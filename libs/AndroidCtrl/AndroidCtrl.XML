<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AndroidCtrl</name>
    </assembly>
    <members>
        <member name="T:AndroidCtrl.ADB.Binary.ChannelExtensions">
            <summary>
             Includes some ADB-Protocol helper
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Binary.ChannelExtensions.WriteHexChunk(AndroidCtrl.ADB.IChannel,System.String)">
            <summary>
             Builds the <see cref="T:byte[]"/> for the <see cref="N:AndroidCtrl.ADB.Binary"/>.<see cref="T:AndroidCtrl.ADB.IChannel"/> and writes it to the <paramref name="channel"/>
            </summary>
            <param name="channel"><see cref="T:AndroidCtrl.ADB.IChannel"/></param>
            <param name="cmd"><see cref="T:System.String"/></param>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.IndexOutOfRangeException"/>
            <exception cref="T:System.InvalidOperationException"/>
            <exception cref="T:System.NullReferenceException"/>
        </member>
        <member name="M:AndroidCtrl.ADB.Binary.ChannelExtensions.WriteHexChunk(AndroidCtrl.ADB.IChannel,System.Byte[],System.Int32,System.Int32)">
            <summary>
             Builds the <see cref="T:byte[]"/> for the <see cref="N:AndroidCtrl.ADB.Binary"/>.<see cref="T:AndroidCtrl.ADB.IChannel"/> and writes it to the <paramref name="channel"/>
            </summary>
            <param name="channel"><see cref="T:AndroidCtrl.ADB.IChannel"/></param>
            <param name="data"><see cref="T:byte[]"/></param>
            <param name="offset"><see cref="T:System.Int32"/></param>
            <param name="size"><see cref="T:System.Int32"/></param>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.IndexOutOfRangeException"/>
            <exception cref="T:System.InvalidOperationException"/>
            <exception cref="T:System.NullReferenceException"/>
        </member>
        <member name="M:AndroidCtrl.ADB.Binary.ChannelExtensions.ReadHexLength(AndroidCtrl.ADB.IChannel)">
            <summary>
             Reads the next 4 bytes of data and converts them to an <see cref="T:System.Int32"/>
            <para/>*NOTE*
            <para/>This method is for the <see cref="T:AndroidCtrl.ADB.Binary.Channel"/>
            <para/>If the conversion failed, the return is -1 and the 4 bytes are lost
            </summary>
            <param name="channel"><see cref="T:AndroidCtrl.ADB.IChannel"/></param>
            <exception cref="T:System.NullReferenceException"/>
            <returns><see cref="T:System.Int32"/></returns>
        </member>
        <member name="T:AndroidCtrl.ADB.Binary.Channel">
            <summary>
             ADB raw data channel
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Binary.Channel.#ctor(AndroidCtrl.ADB.Binary.ADB,System.Int32)">
            <summary>
             Channel - Constructor
            </summary>
            <param name="adb"><see cref="T:AndroidCtrl.ADB.Binary.ADB"/></param>
            <param name="timeout"><see cref="T:System.Int32"/> ms</param>
            <exception cref="T:System.NullReferenceException"/>
        </member>
        <member name="M:AndroidCtrl.ADB.Binary.Channel.Dispose">
            <summary>
             IDisposable
            <para/>*NOTE*
            <para/>The ADB instance will not be disposed
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Binary.Channel.Available">
            <summary>
             Returns the amount of data which is ready to read
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Binary.Channel.DeviceID">
            <summary>
             Returns the assigned device ID
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Binary.Channel.Features">
            <summary>
             Returns the device features
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Binary.Channel.ID">
            <summary>
             Returns always 0
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Binary.Channel.InputEncoding">
            <summary>
             Get the InputEncoding (UTF-8 by default)
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Binary.Channel.IsConnected">
            <summary>
             True if connection is open otherwise false
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Binary.Channel.OutputEncoding">
            <summary>
             Get the OutputEncoding (UTF-8 by default)
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Binary.Channel.Close">
            <summary>
             Close this <see cref="T:AndroidCtrl.ADB.IChannel"/>
            <para/>*NOTE*
            <para/>This will not close the main connection
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Binary.Channel.Open(System.String)">
            <summary>
             Spawns a new thread on the device
            </summary>
            <param name="type">connection type</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Binary.Channel.Open(System.String,System.Boolean)">
            <summary>
             Opens a channel in "Host" or "Tunnel" mode
            </summary>
            <param name="type">connection type</param>
            <param name="isHost"><see cref="T:System.Boolean"/></param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Binary.Channel.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
             Read the given <paramref name="size"/> of bytes into the provided <paramref name="buffer"/>, staring at the given <paramref name="offset"/>
            <para/>*NOTE*
            <para/>This method will block the current thread until this <see cref="T:AndroidCtrl.ADB.IChannel"/> received any data.
            </summary>
            <param name="buffer"><see cref="T:byte[]"/></param>
            <param name="offset"><see cref="T:System.Int32"/></param>
            <param name="size"><see cref="T:System.Int32"/></param>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IndexOutOfRangeException"/>
            <exception cref="T:System.Net.Sockets.SocketException"/>
            <returns><see cref="T:System.Int32"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Binary.Channel.Write(AndroidCtrl.ADB.SyncCmd)">
            <summary>
             Writes the given <see cref="T:AndroidCtrl.ADB.SyncCmd"/> to the socket
            <para/>*NOTE*
            <para/>This method will block the current thread until this <see cref="T:AndroidCtrl.ADB.IChannel"/> becomes writable.
            </summary>
            <param name="cmd"><see cref="T:AndroidCtrl.ADB.SyncCmd"/></param>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.InvalidOperationException"/>
            <exception cref="T:System.Net.Sockets.SocketException"/>
        </member>
        <member name="M:AndroidCtrl.ADB.Binary.Channel.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
             Writes the given <paramref name="size"/> of the <see cref="T:byte[]"/> to the socket, starting at the <paramref name="offset"/>
            <para/>*NOTE*
            <para/>This method will block the current thread until this <see cref="T:AndroidCtrl.ADB.IChannel"/> becomes writable.
            </summary>
            <param name="data"><see cref="T:byte[]"/></param>
            <param name="offset"><see cref="T:System.Int32"/></param>
            <param name="size"><see cref="T:System.Int32"/></param>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IndexOutOfRangeException"/>
            <exception cref="T:System.InvalidOperationException"/>
            <exception cref="T:System.Net.Sockets.SocketException"/>
        </member>
        <member name="E:AndroidCtrl.ADB.Binary.Channel.Closing">
            <summary>
             This event will be raised if <see cref="M:AndroidCtrl.ADB.Binary.Channel.Close"/> is called
            </summary>
        </member>
        <member name="T:AndroidCtrl.ADB.Binary.ADB">
            <summary>
             .NET 4.x (Thread-Safe) ADB-Client, to interact with an Android device via the (A)ndroid (D)ebug (B)ridge.
            <para/>*NOTE*
            <para/>ALL local and remote paths, special variables, etc. will be set in quotes ("), so there is no need to quote anything.
            <para/>Exceptions are nested commands, these u have to quote ur self.
            <para/>All functions in this and some sub-classes are designed to work primary without root.
            <para/>If u want to use all functions with root rights, u have to restart the ADB-Daemon on the device with root rights.
            <para/>U can restart the ADB-Daemon by using <see cref="M:AndroidCtrl.ADB.Device.Daemon.Root"/> or <see cref="M:AndroidCtrl.ADB.Binary.ADB.Root"/>.
            <para/>Otherwise, u can set <see cref="P:AndroidCtrl.ADB.Binary.ADB.UseSu"/> to true and force the use of (su -c) for the most sub-classes.
            <para/>This object implements <see cref="T:AndroidCtrl.ADB.IADB"/>
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Binary.ADB.Instance(System.String)">
            <summary>
             Returns and if not exists creates, the choosen ADB device instance
            <para/>*NOTE*
            <para/>This is the basic interactor in this class, via this var u MUST get/create every device instance.
            <para/>Via device u can get/create the device specific instance. If device is empty, the return is ever the class selected device.
            </summary>
            <param name="device">The device id/serialnumber or empty</param>
            <returns><see cref="T:AndroidCtrl.ADB.Binary.ADB"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Binary.ADB.Instance(AndroidCtrl.IDeviceInfo)">
            <summary>
             Returns and if not exists creates, the choosen ADB device instance
            <para/>*NOTE*
            <para/>This is the basic interactor in this class, via this var u MUST get/create every device instance.
            <para/>Via device u can get/create the device specific instance. If device is null, the return is ever the class selected device.
            </summary>
            <param name="device"><see cref="T:AndroidCtrl.IDeviceInfo"/></param>
            <returns><see cref="T:AndroidCtrl.ADB.Binary.ADB"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Binary.ADB.Remove(System.String)">
            <summary>
             Remove the given device from the instance dictionary.
            </summary>
            <param name="device">Device ID</param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Binary.ADB.Remove(AndroidCtrl.IDeviceInfo)">
            <summary>
             Remove the given device from the instance dictionary.
            </summary>
            <param name="device"><see cref="T:AndroidCtrl.IDeviceInfo"/></param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Binary.ADB.Select(System.String)">
            <summary>
             Select the given device serial in the static class var.
            <para/>*NOTE*
            <para/>U can reach the selected device instance from everywhere in ur code via ADB.Instance().
            </summary>
            <param name="device">Device ID</param>
        </member>
        <member name="M:AndroidCtrl.ADB.Binary.ADB.Select(AndroidCtrl.IDeviceInfo)">
            <summary>
             Select the given device in the static class var.
            <para/>*NOTE*
            <para/>U can reach the selected device instance from everywhere in ur code via ADB.Instance().
            </summary>
            <param name="device"><see cref="T:AndroidCtrl.IDeviceInfo"/></param>
        </member>
        <member name="M:AndroidCtrl.ADB.Binary.ADB.Update(AndroidCtrl.IDeviceInfo)">
            <summary>
             Updates an existing instance of the given device object.
            <para/>*NOTE*
            <para/>Currently only the State gets updated, so the instance know, how to handle su requests.
            </summary>
            <param name="device"><see cref="T:AndroidCtrl.IDeviceInfo"/></param>
        </member>
        <member name="P:AndroidCtrl.ADB.Binary.ADB.Monitor">
            <summary>
             Returns and if not exist, creates the Monitor instance
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Binary.ADB.IsStarted">
            <summary>
             Check if ADB process is running
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Binary.ADB.PATH_EXE">
            <summary>
             Get/Set the full exe path
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Binary.ADB.ServerPort">
            <summary>
             Get/Set the ADB-Server port (default is 5037)
            <para/>*NOTE*
            <para/>This property can only be changed if <see cref="P:AndroidCtrl.ADB.Binary.ADB.IsStarted"/> is false
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Binary.ADB.Version">
            <summary>
             Get ADB version
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Binary.ADB.Connect(System.String,System.Int32)">
            <summary>
             Connect a single devices via ip
            </summary>
            <param name="deviceIP">e.g. 0.0.0.0 <see cref="T:System.String"/></param>
            <param name="port">default is 5555 <see cref="T:System.Int32"/></param>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Binary.ADB.Connect(AndroidCtrl.IDeviceInfo)">
            <summary>
             Connect the given device
            </summary>
            <param name="device"><see cref="T:AndroidCtrl.IDeviceInfo"/></param>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Binary.ADB.Devices">
            <summary>
             List all connected Devices
            </summary>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Binary.ADB.Disconnect(System.String,System.Int32)">
            <summary>
             Disconnect a single or all ip devices
            </summary>
            <param name="deviceIP">e.g. 0.0.0.0 <see cref="T:System.String"/></param>
            <param name="port">default is 5555 <see cref="T:System.Int32"/></param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Binary.ADB.Disconnect(AndroidCtrl.IDeviceInfo)">
            <summary>
             Disconnect the given device
            </summary>
            <param name="device"><see cref="T:AndroidCtrl.IDeviceInfo"/></param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Binary.ADB.Dispose(System.Boolean)">
            <summary>
             This is not a real IDisposable but it will act like one
            <para/>It will reset the whole ADB class to null, everything in this class will be deleted, stopped, closed, etc...
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Binary.ADB.IntegrityCheck">
            <summary>
             Checks if all needed files exists
            <para/>Checks for:
            <para/>adb.exe
            <para/>AdbWinApi.dll
            <para/>AdbWinUsbApi.dll
            </summary>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Binary.ADB.IntegrityVersionCheck">
            <summary>
             Checks if a possible running server has a mismatching version
            <para/>Test:
            <para/>adb start-server to check for outdated or mismatching server 
            </summary>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Binary.ADB.Manufacturer">
            <summary>
             Open "developer.android.com" in the default browser
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Binary.ADB.Start">
            <summary>
             Start the ADB-Server listening on the <see cref="P:AndroidCtrl.ADB.Binary.ADB.ServerPort"/>
            </summary>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Binary.ADB.Start(System.Int32)">
            <summary>
             Start the ADB-Server listening on the given <paramref name="port"/> and changes the <see cref="P:AndroidCtrl.ADB.Binary.ADB.ServerPort"/> to the provided one
            </summary>
            <param name="port"><see cref="T:System.Int32"/></param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Binary.ADB.Stop(System.Boolean)">
            <summary>
             Stop the ADB-Server which is listening on the <see cref="P:AndroidCtrl.ADB.Binary.ADB.ServerPort"/>
            </summary>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Binary.ADB.WaitForAnyDevice">
            <summary>
             Wait until a RANDOM device is connected
            <para/>*NOTE*
            <para/>This will freeze the current thread until a device is connected
            <para/>Put functions which need this kind of wait procedure in a separate thread.
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Binary.ADB.WaitForAnyDevice(AndroidCtrl.ADB.Transport,AndroidCtrl.DeviceState)">
            <summary>
             Wait until a RANDOM device with the given trasport ID and state connects to adb
            <para/>This will freeze the current thread until a device is connected
            <para/>Put functions which need this kind of wait procedure in a separate thread.
            </summary>
            <param name="transport">IDDeviceTransport</param>
            <param name="state">IDDeviceState</param>
        </member>
        <member name="M:AndroidCtrl.ADB.Binary.ADB.WaitForAnyDevice(AndroidCtrl.ADB.Transport,AndroidCtrl.DeviceState,System.Threading.CancellationToken)">
            <summary>
             Wait until a RANDOM device with the given trasport ID and state connects to adb
            <para/>This will freeze the current thread until a device is connected
            <para/>Put functions which need this kind of wait procedure in a separate thread.
            </summary>
            <param name="transport">IDDeviceTransport</param>
            <param name="state">IDDeviceState</param>
            <param name="cancellationToken">CancellationToken</param>
        </member>
        <member name="M:AndroidCtrl.ADB.Binary.ADB.Xecute(System.String,System.String,AndroidCtrl.ProcessModels.ProcessResponseEventHandler,System.Int32)">
            <summary>
             Execute the given command on the defined device
            </summary>
            <param name="cmd">Command to execute</param>
            <param name="deviceSerial">device serialnumber</param>
            <param name="responseEventHandler">Defines the callback to raise for any output/error response during the operation.</param>
            <param name="timeout">Defines the time in ms Xecute will wait before it closes the process, -1 implies infinite.</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Binary.ADB.Xecute(System.String,System.String,AndroidCtrl.ProcessModels.ProcessResponseEventHandler,System.Threading.CancellationToken,System.Int32)">
            <summary>
             Execute the given command on the defined device
            </summary>
            <param name="cmd">Command to execute</param>
            <param name="deviceSerial">device serialnumber</param>
            <param name="responseEventHandler">Defines the callback to raise for any output/error response during the operation.</param>
            <param name="cancellationToken">CancellationToken</param>
            <param name="timeout">Defines the time in ms Xecute will wait before it closes the process, -1 implies infinite.</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="E:AndroidCtrl.ADB.Binary.ADB.Removed">
            <summary>
             This event will be raised if a device is removed from the instance dictionary
            </summary>
        </member>
        <member name="E:AndroidCtrl.ADB.Binary.ADB.Selected">
            <summary>
             This event will be raised if a device is selected
            </summary>
        </member>
        <member name="E:AndroidCtrl.ADB.Binary.ADB.Started">
            <summary>
             This event will be raised when the ADB-Server gets started
            </summary>
        </member>
        <member name="E:AndroidCtrl.ADB.Binary.ADB.Stopped">
            <summary>
             This event will be raised when the ADB-Server gets stopped
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Binary.ADB.CmdTimeout">
            <summary>
             CmdTimeout define for the whole instance how long Xecute() will wait for the given process to responde.
            <para/>*NOTE*
            <para/>Instance default is "-1", it implies infinite
            <para/>The value are milliseconds 30 sec = 30 000 ms
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Binary.ADB.DeviceID">
            <summary>
             DeviceID return the DeviceID for this class instance
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Binary.ADB.DeviceState">
            <summary>
             Return the last known device state e.g. DEVICE/RECOVERY/OFFLINE etc.
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Binary.ADB.IsBooted">
            <summary>
             Checks if the device is booted
            <para/>*NOTE*
            <para/>This will return true when android finished the complete boot procedure
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Binary.ADB.IsRoot">
            <summary>
             IsRoot checks if ADB is running as root in this instance
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Binary.ADB.UseBusyBox">
            <summary>
             UseBusyBox de-/activate BusyBox for the whole instance. Set false for unset.
            <para/>*NOTE*
            <para/>If no BusyBox is installed on the device, this parameter can't be set to true it will always return false!
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Binary.ADB.UseSu">
            <summary>
             UseSu, force ALL subclasses to act with (su -c) commands
            <para/>*NOTE*
            <para/>If su is not installed on the device, this parameter can't be changed and will always return false!
            <para/>This property will not affect the ADB base class, but the most subclasses that interact with the shell. Except these which needs root to interact with the device.
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Binary.ADB.Device">
            <summary>
             Returns and if not exist, creates the Device instance
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Binary.ADB.GetChannel">
            <summary>
             Returns a fresh RAW-Data channel
            </summary>
            <returns><see cref="T:AndroidCtrl.ADB.IChannel"/> or <see cref="T:null"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Binary.ADB.GetChannel(System.Int32)">
            <summary>
             Returns a fresh RAW-Data channel
            <para/>*NOTE*
            <para/>The value are milliseconds 30 sec = 30 000 ms, "0" will be changed to "-1" which implies infinite
            </summary>
            <param name="timeout"><see cref="T:System.Int32"/> milliseconds</param>
            <returns><see cref="T:AndroidCtrl.ADB.IChannel"/> or <see cref="T:null"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Binary.ADB.GetFramebuffer">
            <summary>
             Returns a fresh <see cref="T:AndroidCtrl.ADB.Device.Screen.IFramebuffer"/> if the device is connected, otherwise the return is <see cref="T:null"/>
            </summary>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:AndroidCtrl.ADB.Device.Screen.IFramebuffer"/> or <see cref="T:null"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Binary.ADB.GetShell">
            <summary>
             Returns a fresh <see cref="T:AndroidCtrl.ADB.Device.Shell.IShell"/> instance
            </summary>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.NullReferenceException"/>
            <returns><see cref="T:AndroidCtrl.ADB.Device.Shell.IShell"/> or <see cref="T:null"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Binary.ADB.Backup(System.String,System.String)">
            <summary>
             Backup the Device with given arguments.
            </summary>
            <param name="localPath">File path</param>
            <param name="args">Backup arguments</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Binary.ADB.BugReport">
            <summary>
             BugReport returns all information from the device that should be included in a bug report
            </summary>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Binary.ADB.BugReport(System.String)">
            <summary>
             Write the bugreport to the given path (bugreport.zip)
            <para/>*NOTE*
            <para/>If path is a directory, the bug report is saved in that directory. devices that don't support zipped bug reports output to stdout.
            <para/>Work only on devices running android 7.0++
            </summary>
            <param name="remotePath">bugreport storage location</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Binary.ADB.Copy(System.String,AndroidCtrl.IDeviceInfo,System.String)">
            <summary>
             Copy the given <paramref name="sourcePath"/> to the given <paramref name="destPath"/> on the provided <paramref name="device"/>
            <para/>File usage: /sdcard/tmp.apk /sdcard/ - tmp.apk to /sdcard/
            <para/>File usage: /sdcard/tmp.apk /sdcard/new_tmp.apk - renamed new_tmp.apk to /sdcard/
            <para/>Directory usage: /sdcard/tmp/ /sdcard/ - content from tmp to /sdcard/
            <para/>Directory usage: /sdcard/tmp/ /sdcard/tmp/ - tmp to /sdcard/
            </summary>
            <param name="sourcePath">Remote source</param>
            <param name="device"><see cref="T:AndroidCtrl.IDeviceInfo"/></param>
            <param name="destPath">Remote destination</param>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NullReferenceException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Binary.ADB.Copy(System.String,AndroidCtrl.IDeviceInfo,System.String,System.Threading.CancellationToken)">
            <summary>
             Copy the given <paramref name="sourcePath"/> to the given <paramref name="destPath"/> on the provided <paramref name="device"/>
            <para/>File usage: /sdcard/tmp.apk /sdcard/ - tmp.apk to /sdcard/
            <para/>File usage: /sdcard/tmp.apk /sdcard/new_tmp.apk - renamed new_tmp.apk to /sdcard/
            <para/>Directory usage: /sdcard/tmp/ /sdcard/ - content from tmp to /sdcard/
            <para/>Directory usage: /sdcard/tmp/ /sdcard/tmp/ - tmp to /sdcard/
            </summary>
            <param name="sourcePath">Remote source</param>
            <param name="device"><see cref="T:AndroidCtrl.IDeviceInfo"/></param>
            <param name="destPath">Remote destination</param>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/></param>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NullReferenceException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Binary.ADB.Copy(System.String,AndroidCtrl.IDeviceInfo,System.String,AndroidCtrl.ADB.Device.IO.FileTransferEventHandler)">
            <summary>
             Copy the given <paramref name="sourcePath"/> to the given <paramref name="destPath"/> on the provided <paramref name="device"/>
            <para/>File usage: /sdcard/tmp.apk /sdcard/ - tmp.apk to /sdcard/
            <para/>File usage: /sdcard/tmp.apk /sdcard/new_tmp.apk - renamed new_tmp.apk to /sdcard/
            <para/>Directory usage: /sdcard/tmp/ /sdcard/ - content from tmp to /sdcard/
            <para/>Directory usage: /sdcard/tmp/ /sdcard/tmp/ - tmp to /sdcard/
            </summary>
            <param name="sourcePath">Remote source</param>
            <param name="device"><see cref="T:AndroidCtrl.IDeviceInfo"/></param>
            <param name="destPath">Remote destination</param>
            <param name="transferEventHandler"><see cref="T:AndroidCtrl.ADB.Device.IO.FileTransferEventHandler"/></param>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NullReferenceException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Binary.ADB.Copy(System.String,AndroidCtrl.IDeviceInfo,System.String,AndroidCtrl.ADB.Device.IO.FileTransferEventHandler,System.Threading.CancellationToken)">
            <summary>
             Copy the given <paramref name="sourcePath"/> to the given <paramref name="destPath"/> on the provided <paramref name="device"/>
            <para/>File usage: /sdcard/tmp.apk /sdcard/ - tmp.apk to /sdcard/
            <para/>File usage: /sdcard/tmp.apk /sdcard/new_tmp.apk - renamed new_tmp.apk to /sdcard/
            <para/>Directory usage: /sdcard/tmp/ /sdcard/ - content from tmp to /sdcard/
            <para/>Directory usage: /sdcard/tmp/ /sdcard/tmp/ - tmp to /sdcard/
            </summary>
            <param name="sourcePath">Remote source</param>
            <param name="device"><see cref="T:AndroidCtrl.IDeviceInfo"/></param>
            <param name="destPath">Remote destination</param>
            <param name="transferEventHandler"><see cref="T:AndroidCtrl.ADB.Device.IO.FileTransferEventHandler"/></param>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/></param>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NullReferenceException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Binary.ADB.Emu(System.String,System.Int32)">
            <summary>
             Run emulator console command
            <para/>*NOTE*
            <para/>timeOut = -1 implies infinite
            </summary>
            <param name="cmd">Command to run</param>
            <param name="timeout">time the process will wait for output, -1 implies infinite, 0 implies class internal timeout</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Binary.ADB.Emu(System.String,AndroidCtrl.ProcessModels.ProcessResponseEventHandler,System.Int32)">
            <summary>
             Run emulator console command
            <para/>*NOTE*
            <para/>timeOut = -1 implies infinite
            </summary>
            <param name="cmd">Command to run</param>
            <param name="responseEventHandler">Defines the callback to raise for any output/error response during the operation.</param>
            <param name="timeout">time the process will wait for output, -1 implies infinite, 0 implies class internal timeout</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Binary.ADB.ExecIn(System.String,System.IO.Stream,System.Int32)">
            <summary>
            ExecIn is a kind of shell for binary transaction
            <para/>*NOTE*
            <para/>timeOut = -1 implies infinite/process end
            </summary>
            <param name="cmd">Command to run</param>
            <param name="stream">input <see cref="T:System.IO.Stream"/></param>
            <param name="timeout">time the method will process the input stream, 0 implies class internal timeout</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Binary.ADB.ExecIn(System.String,System.IO.Stream,System.Threading.CancellationToken,System.Int32)">
            <summary>
            ExecIn is a kind of shell for binary transaction
            <para/>*NOTE*
            <para/>timeOut = -1 implies infinite/process end
            </summary>
            <param name="cmd">Command to run</param>
            <param name="stream">input <see cref="T:System.IO.Stream"/></param>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/></param>
            <param name="timeout">time the method will process the input stream, 0 implies class internal timeout</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Binary.ADB.ExecOut(System.String,System.IO.Stream,System.Int32)">
            <summary>
            ExecOut is a kind of shell for binary transaction
            <para/>*NOTE*
            <para/>timeOut = -1 implies infinite
            </summary>
            <param name="cmd">Command to run</param>
            <param name="stream">output <see cref="T:System.IO.Stream"/></param>
            <param name="timeout">time the process will wait for output, 0 implies class internal timeout</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Binary.ADB.ExecOut(System.String,System.IO.Stream,System.Threading.CancellationToken,System.Int32)">
            <summary>
            ExecOut is a kind of shell for binary transaction
            <para/>*NOTE*
            <para/>timeOut = -1 implies infinite
            </summary>
            <param name="cmd">Command to run</param>
            <param name="stream">output <see cref="T:System.IO.Stream"/></param>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/></param>
            <param name="timeout">time the process will wait for output, 0 implies class internal timeout</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Binary.ADB.Execute(System.String,System.Int32)">
            <summary>
             Execute a custom command
            <para/>*NOTE*
            <para/>timeOut = -1 implies infinite
            <para/>Command examples:
            <para/>shell "ls -l /"
            <para/>push C:\\my\\folder /my/location
            <para/>pull /my/location C:\\my\\folder
            </summary>
            <param name="cmd">Command to run</param>
            <param name="timeout">time the process will wait for output, -1 implies infinite, 0 implies class internal timeout</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Binary.ADB.Execute(System.String,AndroidCtrl.ProcessModels.ProcessResponseEventHandler,System.Int32)">
            <summary>
             Execute a custom command
            <para/>*NOTE*
            <para/>timeOut = -1 implies infinite
            <para/>Command examples:
            <para/>shell "ls -l /"
            <para/>push C:\\my\\folder /my/location
            <para/>pull /my/location C:\\my\\folder
            </summary>
            <param name="cmd">Command to run</param>
            <param name="responseEventHandler">Defines the callback to raise for any output/error response during the operation.</param>
            <param name="timeout">time the process will wait for output, -1 implies infinite, 0 implies class internal timeout</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Binary.ADB.Forward(System.String)">
            <summary>
             Forward a port, list or remove them
            </summary>
            <param name="args">null, --list, --no-rebind, --remove, --remove-all</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Binary.ADB.Forward(System.String,AndroidCtrl.ADB.FRPortType,System.String)">
            <summary>
             Forward a port, list or remove them
            </summary>
            <param name="args">null, --list, --no-rebind, --remove, --remove-all</param>
            <param name="localPortType">IDFRPortType</param>
            <param name="localPort">Remote port</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Binary.ADB.Forward(AndroidCtrl.ADB.FRPortType,System.String,AndroidCtrl.ADB.FRPortType,System.String)">
            <summary>
             Forward a port, list or remove them
            </summary>
            <param name="localPortType">IDFRPortType</param>
            <param name="localPort">Local port</param>
            <param name="remotePortType">IDFRPortType</param>
            <param name="remotePort">Remote port</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Binary.ADB.Forward(System.String,AndroidCtrl.ADB.FRPortType,System.String,AndroidCtrl.ADB.FRPortType,System.String)">
            <summary>
             Forward a port, list or remove them
            </summary>
            <param name="args">--list, --no-rebind, --remove, --remove-all </param>
            <param name="localPortType">IDFRPortType</param>
            <param name="localPort">Local port</param>
            <param name="remotePortType">IDFRPortType</param>
            <param name="remotePort">Remote port</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Binary.ADB.GetDevPath">
            <summary>
             Return the devpath or an empty string
            </summary>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Binary.ADB.GetSerial">
            <summary>
             Return the Device serialnumber or an empty string
            </summary>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Binary.ADB.GetState">
            <summary>
             Returns the device state and refresh the DeviceState property
            </summary>
            <returns><see cref="T:AndroidCtrl.DeviceState"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Binary.ADB.Install(System.String,System.String)">
            <summary>
             Install an APK on the Device
            <para/>*HINT*
            <para/>-d allow version downgrade
            <para/>-g grant all runtime permissions
            <para/>-l forward-lock the app
            <para/>-r reinstall the app and keep its data
            <para/>-p partial application install
            <para/>-s install the app on SD-Card instead of the internal storage
            <para/>-t allow test package
            <para/>the rest of the arguments u can use, u can find in the adb help
            </summary>
            <param name="localPath">File path</param>
            <param name="args">Installer arguments or null</param>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Binary.ADB.Install(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
             Install an APK on the Device
            <para/>*HINT*
            <para/>-d allow version downgrade
            <para/>-g grant all runtime permissions
            <para/>-l forward-lock the app
            <para/>-r reinstall the app and keep its data
            <para/>-p partial application install
            <para/>-s install the app on SD-Card instead of the internal storage
            <para/>-t allow test package
            <para/>the rest of the arguments u can use, u can find in the adb help
            </summary>
            <param name="localPaths">File paths</param>
            <param name="args">Installer arguments or null</param>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Binary.ADB.JDWP">
            <summary>
             JDWP list PIDs of processes hosting a JDWP transport
            </summary>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Binary.ADB.JDWP(System.Int32)">
            <summary>
             Connects to the JDWP thread running in the VM of the given process ID
            </summary>
            <param name="pid">The remote process ID</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Binary.ADB.Keygen(System.String)">
            <summary>
             Keygen generate adb public/private key.
            <para/>*NOTE*
            <para/>The private key is stored in (the/given/path), and the public key is stored in (the/given/path.pub). Any existing files will be overwritten.
            </summary>
            <param name="localKeyPath">local key file path</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Binary.ADB.Pull(System.String,System.String)">
            <summary>
             Pull the given remote object to the given local location
            <para/>File usage: /sdcard/tmp.apk C:\\ - tmp.apk to C:\\
            <para/>File usage: /sdcard/tmp.apk C:\\new_tmp.apk - renamed new_tmp.apk to C:\\
            <para/>Directory usage: /sdcard/tmp/ C:\\ - content from tmp to C:\\
            <para/>Directory usage: /sdcard/tmp/ C:\\tmp\\ - tmp to C:\\
            </summary>
            <param name="remotePath">Remote path</param>
            <param name="localPath">Local path</param>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
            <exception cref="T:System.IO.IOException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Binary.ADB.Pull(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
             Pull the given remote object to the given local location
            <para/>File usage: /sdcard/tmp.apk C:\\ - tmp.apk to C:\\
            <para/>File usage: /sdcard/tmp.apk C:\\new_tmp.apk - renamed new_tmp.apk to C:\\
            <para/>Directory usage: /sdcard/tmp/ C:\\ - content from tmp to C:\\
            <para/>Directory usage: /sdcard/tmp/ C:\\tmp\\ - tmp to C:\\
            </summary>
            <param name="remotePath">Remote path</param>
            <param name="localPath">Local path</param>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/></param>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
            <exception cref="T:System.IO.IOException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Binary.ADB.Pull(System.String,System.String,AndroidCtrl.ADB.Device.IO.FileTransferEventHandler)">
            <summary>
             Pull the given remote object to the given local location
            <para/>File usage: /sdcard/tmp.apk C:\\ - tmp.apk to C:\\
            <para/>File usage: /sdcard/tmp.apk C:\\new_tmp.apk - renamed new_tmp.apk to C:\\
            <para/>Directory usage: /sdcard/tmp/ C:\\ - content from tmp to C:\\
            <para/>Directory usage: /sdcard/tmp/ C:\\tmp\\ - tmp to C:\\
            </summary>
            <param name="remotePath">Remote path</param>
            <param name="localPath">Local path</param>
            <param name="transferEventHandler"><see cref="T:AndroidCtrl.ADB.Device.IO.FileTransferEventHandler"/></param>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
            <exception cref="T:System.IO.IOException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Binary.ADB.Pull(System.String,System.String,AndroidCtrl.ADB.Device.IO.FileTransferEventHandler,System.Threading.CancellationToken)">
            <summary>
             Pull the given remote object to the given local location
            <para/>File usage: /sdcard/tmp.apk C:\\ - tmp.apk to C:\\
            <para/>File usage: /sdcard/tmp.apk C:\\new_tmp.apk - renamed new_tmp.apk to C:\\
            <para/>Directory usage: /sdcard/tmp/ C:\\ - content from tmp to C:\\
            <para/>Directory usage: /sdcard/tmp/ C:\\tmp\\ - tmp to C:\\
            </summary>
            <param name="remotePath">Remote path</param>
            <param name="localPath">Local path</param>
            <param name="transferEventHandler"><see cref="T:AndroidCtrl.ADB.Device.IO.FileTransferEventHandler"/></param>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/></param>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
            <exception cref="T:System.IO.IOException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Binary.ADB.Push(System.String,System.String)">
            <summary>
             Push the given local object to the given remote location
            <para/>File usage: C:\\tmp.apk /sdcard/ - tmp.apk to sdcard
            <para/>File usage: C:\\tmp.apk /sdcard/new_tmp.apk - renamed new_tmp.apk to sdcard
            <para/>Directory usage: C:\\tmp\\ /sdcard/ - content from tmp to sdcard
            <para/>Directory usage: C:\\tmp\\ /sdcard/tmp/ - tmp to sdcard
            </summary>
            <param name="localPath">Local path</param>
            <param name="remotePath">Remote path</param>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
            <exception cref="T:System.IO.IOException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Binary.ADB.Push(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
             Push the given local object to the given remote location
            <para/>File usage: C:\\tmp.apk /sdcard/ - tmp.apk to sdcard
            <para/>File usage: C:\\tmp.apk /sdcard/new_tmp.apk - renamed new_tmp.apk to sdcard
            <para/>Directory usage: C:\\tmp\\ /sdcard/ - content from tmp to sdcard
            <para/>Directory usage: C:\\tmp\\ /sdcard/tmp/ - tmp to sdcard
            </summary>
            <param name="localPath">Local path</param>
            <param name="remotePath">Remote path</param>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/></param>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
            <exception cref="T:System.IO.IOException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Binary.ADB.Push(System.String,System.String,AndroidCtrl.ADB.Device.IO.FileTransferEventHandler)">
            <summary>
             Push the given local object to the given remote location
            <para/>File usage: C:\\tmp.apk /sdcard/ - tmp.apk to sdcard
            <para/>File usage: C:\\tmp.apk /sdcard/new_tmp.apk - renamed new_tmp.apk to sdcard
            <para/>Directory usage: C:\\tmp\\ /sdcard/ - content from tmp to sdcard
            <para/>Directory usage: C:\\tmp\\ /sdcard/tmp/ - tmp to sdcard
            </summary>
            <param name="localPath">Local path</param>
            <param name="remotePath">Remote path</param>
            <param name="transferEventHandler"><see cref="T:AndroidCtrl.ADB.Device.IO.FileTransferEventHandler"/></param>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
            <exception cref="T:System.IO.IOException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Binary.ADB.Push(System.String,System.String,AndroidCtrl.ADB.Device.IO.FileTransferEventHandler,System.Threading.CancellationToken)">
            <summary>
             Push the given local object to the given remote location
            <para/>File usage: C:\\tmp.apk /sdcard/ - tmp.apk to sdcard
            <para/>File usage: C:\\tmp.apk /sdcard/new_tmp.apk - renamed new_tmp.apk to sdcard
            <para/>Directory usage: C:\\tmp\\ /sdcard/ - content from tmp to sdcard
            <para/>Directory usage: C:\\tmp\\ /sdcard/tmp/ - tmp to sdcard
            </summary>
            <param name="localPath">Local path</param>
            <param name="remotePath">Remote path</param>
            <param name="transferEventHandler"><see cref="T:AndroidCtrl.ADB.Device.IO.FileTransferEventHandler"/></param>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/></param>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
            <exception cref="T:System.IO.IOException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Binary.ADB.Reboot(AndroidCtrl.BootMode)">
            <summary>
             Reboot the device to given mode
            </summary>
            <param name="mode"><see cref="T:AndroidCtrl.BootMode"/></param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Binary.ADB.Reconnect(AndroidCtrl.ADB.Reconnect)">
            <summary>
             Initiate a reconnect based on the given IDReconnect
            </summary>
            <param name="mode">IDReconnect</param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Binary.ADB.Remount">
            <summary>
             Remounts the Device system partition to read-write
            </summary>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Binary.ADB.Restore(System.String)">
            <summary>
             Restore the backup to the device.
            </summary>
            <param name="localPath">File path</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Binary.ADB.Reverse(System.String)">
            <summary>
             Reverse a port, list or remove them
            </summary>
            <param name="args">--list, --no-rebind, --remove, --remove-all </param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Binary.ADB.Reverse(System.String,AndroidCtrl.ADB.FRPortType,System.String)">
            <summary>
             Reverse a port, list or remove them
            </summary>
            <param name="args">--list, --no-rebind, --remove, --remove-all </param>
            <param name="remotePortType">IDFRPortType</param>
            <param name="remotePort">Remote port</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Binary.ADB.Reverse(AndroidCtrl.ADB.FRPortType,System.String,AndroidCtrl.ADB.FRPortType,System.String)">
            <summary>
             Reverse a port, list or remove them
            </summary>
            <param name="remotePortType">IDFRPortType</param>
            <param name="remotePort">Remote port</param>
            <param name="localPortType">IDFRPortType</param>
            <param name="localPort">Local port</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Binary.ADB.Reverse(System.String,AndroidCtrl.ADB.FRPortType,System.String,AndroidCtrl.ADB.FRPortType,System.String)">
            <summary>
             Reverse a port, list or remove them
            </summary>
            <param name="args">--list, --no-rebind, --remove, --remove-all </param>
            <param name="remotePortType">IDFRPortType</param>
            <param name="remotePort">Remote port</param>
            <param name="localPortType">IDFRPortType</param>
            <param name="localPort">Local port</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Binary.ADB.Root">
            <summary>
             Restarts adb daemon with root permissions on the device
            <para/>*HINT*
            <para/>The device must be rooted
            </summary>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Binary.ADB.ShellCmd(System.String,System.Int32)">
            <summary>
             Send an Shell-Command to the Device
            <para/>*NOTE*
            <para/>timeOut = -1 implies infinite
            <para/>If u want send an SU-Command use <see cref="M:AndroidCtrl.ADB.Device.Su.ShellCmd(System.String,System.Int32)"/>
            </summary>
            <param name="cmd">Command to send</param>
            <param name="timeout">time the process will wait for output, -1 implies infinite, 0 implies class internal <see cref="P:AndroidCtrl.ADB.Binary.ADB.CmdTimeout"/></param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Binary.ADB.ShellCmd(System.String,System.Threading.CancellationToken,System.Int32)">
            <summary>
             Send an Shell-Command to the Device
            <para/>*NOTE*
            <para/>timeOut = -1 implies infinite
            <para/>If u want send an SU-Command use <see cref="M:AndroidCtrl.ADB.Device.Su.ShellCmd(System.String,System.Threading.CancellationToken,System.Int32)"/>
            </summary>
            <param name="cmd">Command to send</param>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/></param>
            <param name="timeout">time the process will wait for output, -1 implies infinite, 0 implies class internal <see cref="P:AndroidCtrl.ADB.Binary.ADB.CmdTimeout"/></param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Binary.ADB.ShellCmd(System.String,AndroidCtrl.ADB.Device.Shell.ShellDataEventHandler,System.Int32)">
            <summary>
             Send an Shell-Command to the Device
            <para/>*NOTE*
            <para/>timeOut = -1 implies infinite
            <para/>If u want send an SU-Command use <see cref="M:AndroidCtrl.ADB.Device.Su.ShellCmd(System.String,AndroidCtrl.ADB.Device.Shell.ShellDataEventHandler,System.Int32)"/>
            </summary>
            <param name="cmd">Command to send</param>
            <param name="shellDataEventHandler"><see cref="T:AndroidCtrl.ADB.Device.Shell.ShellDataEventHandler"/></param>
            <param name="timeout">time the process will wait for output, -1 implies infinite, 0 implies class internal <see cref="P:AndroidCtrl.ADB.Binary.ADB.CmdTimeout"/></param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Binary.ADB.ShellCmd(System.String,AndroidCtrl.ADB.Device.Shell.ShellDataEventHandler,System.Threading.CancellationToken,System.Int32)">
            <summary>
             Send an Shell-Command to the Device
            <para/>*NOTE*
            <para/>timeOut = -1 implies infinite
            <para/>If u want send an SU-Command use <see cref="M:AndroidCtrl.ADB.Device.Su.ShellCmd(System.String,AndroidCtrl.ADB.Device.Shell.ShellDataEventHandler,System.Threading.CancellationToken,System.Int32)"/>
            </summary>
            <param name="cmd">Command to send</param>
            <param name="shellDataEventHandler"><see cref="T:AndroidCtrl.ADB.Device.Shell.ShellDataEventHandler"/></param>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/></param>
            <param name="timeout">time the process will wait for output, -1 implies infinite, 0 implies class internal <see cref="P:AndroidCtrl.ADB.Binary.ADB.CmdTimeout"/></param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Binary.ADB.ShellCmdHRes(System.String,System.Int32)">
            <summary>
             Send an Shell-Command to the Device and return the HResult
            <para/>*NOTE*
            <para/>timeOut = -1 implies infinite
            <para/>If u want send an SU-Command use <see cref="M:AndroidCtrl.ADB.Device.Su.ShellCmdHRes(System.String,System.Int32)"/>
            </summary>
            <param name="cmd">Command to send</param>
            <param name="timeout">time the process will wait for output, -1 implies infinite, 0 implies class internal <see cref="P:AndroidCtrl.ADB.Binary.ADB.CmdTimeout"/></param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Int32"/> -1 (implies NULL on the shell return)</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Binary.ADB.ShellCmdHRes(System.String,System.Threading.CancellationToken,System.Int32)">
            <summary>
             Send an Shell-Command to the Device and return the HResult
            <para/>*NOTE*
            <para/>timeOut = -1 implies infinite
            <para/>If u want send an SU-Command use <see cref="M:AndroidCtrl.ADB.Device.Su.ShellCmdHRes(System.String,System.Threading.CancellationToken,System.Int32)"/>
            </summary>
            <param name="cmd">Command to send</param>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/></param>
            <param name="timeout">time the process will wait for output, -1 implies infinite, 0 implies class internal <see cref="P:AndroidCtrl.ADB.Binary.ADB.CmdTimeout"/></param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Int32"/> -1 (implies NULL on the shell return)</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Binary.ADB.ShellCmdHRes(System.String,AndroidCtrl.ADB.Device.Shell.ShellDataEventHandler,System.Int32)">
            <summary>
             Send an Shell-Command to the Device and return the HResult
            <para/>*NOTE*
            <para/>timeOut = -1 implies infinite
            <para/>If u want send an SU-Command use <see cref="M:AndroidCtrl.ADB.Device.Su.ShellCmdHRes(System.String,AndroidCtrl.ADB.Device.Shell.ShellDataEventHandler,System.Int32)"/>
            </summary>
            <param name="cmd">Command to send</param>
            <param name="shellDataEventHandler"><see cref="T:AndroidCtrl.ADB.Device.Shell.ShellDataEventHandler"/></param>
            <param name="timeout">time the process will wait for output, -1 implies infinite, 0 implies class internal <see cref="P:AndroidCtrl.ADB.Binary.ADB.CmdTimeout"/></param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Int32"/> -1 (implies NULL on the shell return)</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Binary.ADB.ShellCmdHRes(System.String,AndroidCtrl.ADB.Device.Shell.ShellDataEventHandler,System.Threading.CancellationToken,System.Int32)">
            <summary>
             Send an Shell-Command to the Device and return the HResult
            <para/>*NOTE*
            <para/>timeOut = -1 implies infinite
            <para/>If u want send an SU-Command use <see cref="M:AndroidCtrl.ADB.Device.Su.ShellCmdHRes(System.String,AndroidCtrl.ADB.Device.Shell.ShellDataEventHandler,System.Threading.CancellationToken,System.Int32)"/>
            </summary>
            <param name="cmd">Command to send</param>
            <param name="shellDataEventHandler"><see cref="T:AndroidCtrl.ADB.Device.Shell.ShellDataEventHandler"/></param>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/></param>
            <param name="timeout">time the process will wait for output, -1 implies infinite, 0 implies class internal <see cref="P:AndroidCtrl.ADB.Binary.ADB.CmdTimeout"/></param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Int32"/> -1 (implies NULL on the shell return)</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Binary.ADB.ShellCmdStack(System.Collections.Generic.IEnumerable{System.String},System.Int32)">
            <summary>
             Send an Shell-Command-Stack to the Device
            <para/>*NOTE*
            <para/>Between the cmds in the stack is an delay of 150 ms
            <para/>timeOut = -1 implies infinite
            <para/>If u want send an SU-Command-Stack use <see cref="M:AndroidCtrl.ADB.Device.Su.ShellCmdStack(System.Collections.Generic.IEnumerable{System.String},System.Int32)"/>
            </summary>
            <param name="cmdStack">Commands to send to the device Shell</param>
            <param name="timeout">time the process will wait for output, -1 implies infinite and 0 implies the use of the class internal <see cref="P:AndroidCtrl.ADB.Binary.ADB.CmdTimeout"/>.</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Binary.ADB.ShellCmdStack(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken,System.Int32)">
            <summary>
             Send an Shell-Command-Stack to the Device
            <para/>*NOTE*
            <para/>Between the cmds in the stack is an delay of 150 ms
            <para/>timeOut = -1 implies infinite
            <para/>If u want send an SU-Command-Stack use <see cref="M:AndroidCtrl.ADB.Device.Su.ShellCmdStack(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken,System.Int32)"/>
            </summary>
            <param name="cmdStack">Commands to send to the device Shell</param>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/></param>
            <param name="timeout">time the process will wait for output, -1 implies infinite and 0 implies the use of the class internal <see cref="P:AndroidCtrl.ADB.Binary.ADB.CmdTimeout"/>.</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Binary.ADB.ShellCmdStack(System.Collections.Generic.IEnumerable{System.String},AndroidCtrl.ADB.Device.Shell.ShellDataEventHandler,System.Int32)">
            <summary>
             Send an Shell-Command-Stack to the Device
            <para/>*NOTE*
            <para/>Between the cmds in the stack is an delay of 150 ms
            <para/>timeOut = -1 implies infinite
            <para/>If u want send an SU-Command-Stack use <see cref="M:AndroidCtrl.ADB.Device.Su.ShellCmdStack(System.Collections.Generic.IEnumerable{System.String},AndroidCtrl.ADB.Device.Shell.ShellDataEventHandler,System.Int32)"/>
            </summary>
            <param name="cmdStack">Commands to send to the device Shell</param>
            <param name="shellDataEventHandler"><see cref="T:AndroidCtrl.ADB.Device.Shell.ShellDataEventHandler"/></param>
            <param name="timeout">time the process will wait for output, -1 implies infinite and 0 implies the use of the class internal <see cref="P:AndroidCtrl.ADB.Binary.ADB.CmdTimeout"/>.</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Binary.ADB.ShellCmdStack(System.Collections.Generic.IEnumerable{System.String},AndroidCtrl.ADB.Device.Shell.ShellDataEventHandler,System.Threading.CancellationToken,System.Int32)">
            <summary>
             Send an Shell-Command-Stack to the Device
            <para/>*NOTE*
            <para/>Between the cmds in the stack is an delay of 150 ms
            <para/>timeOut = -1 implies infinite
            <para/>If u want send an SU-Command-Stack use <see cref="M:AndroidCtrl.ADB.Device.Su.ShellCmdStack(System.Collections.Generic.IEnumerable{System.String},AndroidCtrl.ADB.Device.Shell.ShellDataEventHandler,System.Threading.CancellationToken,System.Int32)"/>
            </summary>
            <param name="cmdStack">Commands to send to the device Shell</param>
            <param name="shellDataEventHandler"><see cref="T:AndroidCtrl.ADB.Device.Shell.ShellDataEventHandler"/></param>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/></param>
            <param name="timeout">time the process will wait for output, -1 implies infinite and 0 implies the use of the class internal <see cref="P:AndroidCtrl.ADB.Binary.ADB.CmdTimeout"/>.</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Binary.ADB.Sideload(System.String,System.Int32)">
            <summary>
             Sideloads a rom
            <para/>*NOTE*
            <para/>timeOut = -1 implies infinite
            <para/>The recovery must support this function
            </summary>
            <param name="localPath">Local path (c:\path\to\rom.zip)</param>
            <param name="timeout">time the process will wait for output, -1 implies infinite, 0 implies class internal timeout</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Binary.ADB.TCPIP(System.Int32)">
            <summary>
             Restart adbd daemon listen on given tcp port
            </summary>
            <param name="port">port</param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Binary.ADB.UnInstall(System.String,System.Boolean)">
            <summary>
             UnInstall an APK on the Device
            </summary>
            <param name="package">package name e.g. com.example.package</param>
            <param name="keepData">keeps the cache and userdata</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Binary.ADB.UnRoot">
            <summary>
             Restarts adb daemon without root permissions on the device
            <para/>*HINT*
            <para/>The device must be rooted
            </summary>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Binary.ADB.USB">
            <summary>
             Restart adbd daemon listen on USB
            </summary>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Binary.ADB.Verity(AndroidCtrl.ADB.DMVerity)">
            <summary>
             Dis-/Enable dm-verity on USERDEBUG builds
            </summary>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Binary.ADB.WaitForDevice">
            <summary>
             Wait until the device connects with <see cref="F:AndroidCtrl.ADB.Transport.Any"/> and <see cref="F:AndroidCtrl.DeviceState.DEVICE"/>
            <para/>*NOTE*
            <para/>This will freeze the current thread until a device is connected
            <para/>Put functions which need this kind of wait procedure in a separate thread.
            </summary>
            <exception cref="T:System.NullReferenceException"/>
        </member>
        <member name="M:AndroidCtrl.ADB.Binary.ADB.WaitForDevice(System.Threading.CancellationToken)">
            <summary>
             Wait until the device connects with <see cref="F:AndroidCtrl.ADB.Transport.Any"/> and <see cref="F:AndroidCtrl.DeviceState.DEVICE"/>
            <para/>*NOTE*
            <para/>This will freeze the current thread until a device is connected
            <para/>Put functions which need this kind of wait procedure in a separate thread.
            </summary>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/></param>
            <exception cref="T:System.NullReferenceException"/>
        </member>
        <member name="M:AndroidCtrl.ADB.Binary.ADB.WaitFor(AndroidCtrl.ADB.Transport,AndroidCtrl.DeviceState)">
            <summary>
             Wait until the device connects with the given trasport ID and state to adb
            <para/>This will freeze the current thread until a device is connected
            <para/>Put functions which need this kind of wait procedure in a separate thread.
            </summary>
            <param name="transport"><see cref="T:AndroidCtrl.ADB.Transport"/></param>
            <param name="state"><see cref="T:AndroidCtrl.DeviceState"/></param>
            <exception cref="T:System.NullReferenceException"/>
        </member>
        <member name="M:AndroidCtrl.ADB.Binary.ADB.WaitFor(AndroidCtrl.ADB.Transport,AndroidCtrl.DeviceState,System.Threading.CancellationToken)">
            <summary>
             Wait until the device connects with the given trasport ID and state to adb
            <para/>This will freeze the current thread until a device is connected
            <para/>Put functions which need this kind of wait procedure in a separate thread.
            </summary>
            <param name="transport"><see cref="T:AndroidCtrl.ADB.Transport"/></param>
            <param name="state"><see cref="T:AndroidCtrl.DeviceState"/></param>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/></param>
            <exception cref="T:System.NullReferenceException"/>
        </member>
        <member name="E:AndroidCtrl.ADB.Binary.ADB.Closing">
            <summary>
             This event will be raised if the device is not longer available or if <see cref="M:AndroidCtrl.ADB.Binary.ADB.Dispose(System.Boolean)"/> is called
            <para/>*NOTE*
            <para/>All <see cref="T:AndroidCtrl.ADB.IChannel"/> (created by <see cref="M:AndroidCtrl.ADB.Binary.ADB.GetChannel"/> or <see cref="M:AndroidCtrl.ADB.Binary.ADB.GetChannel(System.Int32)"/>) are linked to this event and will dispose them self.
            </summary>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.Dumpsys.Battery">
            <summary>
             BatteryDump holds the battery data
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Dumpsys.Battery.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
             Creates a new DumpsysBattery object
            </summary>
            <param name="ac">AC powered</param>
            <param name="usb">USB powered</param>
            <param name="wireless">Wireless powered</param>
            <param name="status">Current battery state</param>
            <param name="health">Current battery health</param>
            <param name="present">Present</param>
            <param name="level">Loading level</param>
            <param name="scale">Scale</param>
            <param name="voltage">Current voltage</param>
            <param name="current">Current voltage use</param>
            <param name="temperature">Current temperature</param>
            <param name="technology">Battery technology</param>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Dumpsys.Battery.#ctor(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
             Creates a new DumpsysBattery object
            </summary>
            <param name="data">AC powered</param>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Dumpsys.Battery.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
             Deserialize
            </summary>
            <param name="info"><see cref="T:System.Runtime.Serialization.SerializationInfo"/></param>
            <param name="context"><see cref="T:System.Runtime.Serialization.StreamingContext"/></param>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Dumpsys.Battery.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
             Serialize
            </summary>
            <param name="info"><see cref="T:System.Runtime.Serialization.SerializationInfo"/></param>
            <param name="context"><see cref="T:System.Runtime.Serialization.StreamingContext"/></param>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Dumpsys.Battery.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
             Serialize
            </summary>
            <param name="info"><see cref="T:System.Runtime.Serialization.SerializationInfo"/></param>
            <param name="context"><see cref="T:System.Runtime.Serialization.StreamingContext"/></param>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Dumpsys.Battery.AC">
            <summary>
             AC powered
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Dumpsys.Battery.USB">
            <summary>
             USB powered
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Dumpsys.Battery.Wireless">
            <summary>
             Wireless powered
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Dumpsys.Battery.Status">
            <summary>
             Current battery state
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Dumpsys.Battery.Health">
            <summary>
             Current battery health
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Dumpsys.Battery.Present">
            <summary>
             Present
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Dumpsys.Battery.Level">
            <summary>
             Loading level
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Dumpsys.Battery.Scale">
            <summary>
             Scale
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Dumpsys.Battery.Voltage">
            <summary>
             Current voltage
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Dumpsys.Battery.Current">
            <summary>
             Current voltage use
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Dumpsys.Battery.Temperature">
            <summary>
             Current temperature
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Dumpsys.Battery.Technology">
            <summary>
             Battery technology
            </summary>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.Dumpsys.IBattery">
            <summary>
             BatteryDump interface
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Dumpsys.IBattery.AC">
            <summary>
             AC powered
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Dumpsys.IBattery.USB">
            <summary>
             USB powered
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Dumpsys.IBattery.Wireless">
            <summary>
             Wireless powered
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Dumpsys.IBattery.Status">
            <summary>
             Current battery state
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Dumpsys.IBattery.Health">
            <summary>
             Current battery health
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Dumpsys.IBattery.Present">
            <summary>
             Present
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Dumpsys.IBattery.Level">
            <summary>
             Loading level
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Dumpsys.IBattery.Scale">
            <summary>
             Scale
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Dumpsys.IBattery.Voltage">
            <summary>
             Current voltage
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Dumpsys.IBattery.Current">
            <summary>
             Current voltage use
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Dumpsys.IBattery.Temperature">
            <summary>
             Current temperature
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Dumpsys.IBattery.Technology">
            <summary>
             Battery technology
            </summary>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.Dumpsys.Dumpsys">
            <summary>
             Dumpsys is the general class to interact with the device dumpsys
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Dumpsys.Dumpsys.Battery">
            <summary>
             Return the current battery dump
            </summary>
            <returns>IBattery or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Dumpsys.Dumpsys.RawDump(System.String)">
            <summary>
             Returns the raw dump
            </summary>
            <param name="dump">Dump part e.g. meminfo, battery, etc.</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.Input.MKey">
            <summary>
             Single-Key Map
            </summary>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.Input.IKeyEvent">
            <summary>
             KeyEvent interface
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Input.IKeyEvent.Key">
            <summary>
             Returns the key to send
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Input.IKeyEvent.LongPress">
            <summary>
             Returns true if the --longpress parameter is used
            <para/>*NOTE*
            <para/>The --longpress parameter is not supported on all android devices
            </summary>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.Input.KeyEvent">
            <summary>
             Holds the KeyEvent informations
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Input.KeyEvent.#ctor(AndroidCtrl.ADB.Device.Input.AKey)">
            <summary>
             KeyEvent without --longpress
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Input.KeyEvent.#ctor(AndroidCtrl.ADB.Device.Input.AKey,System.Boolean)">
            <summary>
             KeyEvent with/without --longpress
            </summary>
            <param name="keyEvent">IDKeyEvent to send</param>
            <param name="longPress">--longpress</param>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Input.KeyEvent.Key">
            <summary>
             Returns the key to send
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Input.KeyEvent.LongPress">
            <summary>
             Returns true if the --longpress parameter is used
            <para/>*NOTE*
            <para/>The --longpress parameter is not supported on all android devices
            </summary>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.Input.AKey">
            <summary>
             Android key IDs
            <para/>Current State: <see cref="F:AndroidCtrl.ADB.Device.ASDK.V9"/> (API 28)
            </summary>
            
             TODO:
             Check <see cref="M:AndroidCtrl.ADB.Device.Input.Input.MappedKeyEvent(System.Int32,AndroidCtrl.ADB.Device.Input.KeyMap,System.Boolean)"/> &amp; <see cref="M:AndroidCtrl.ADB.Device.Input.InputExtensions.SendMappedKeyEvent(AndroidCtrl.ADB.Device.Shell.IShell,System.Int32,AndroidCtrl.ADB.Device.Input.KeyMap,System.Boolean)"/> if this list changes
            
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_0">
            <summary>
             0
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V1"/> (API 1)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_1">
            <summary>
             1
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V1"/> (API 1)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_2">
            <summary>
             2
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V1"/> (API 1)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_3">
            <summary>
             3
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V1"/> (API 1)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_3D_MODE">
            <summary>
             3D Mode key
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V4"/> (API 14)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_4">
            <summary>
             4
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V1"/> (API 1)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_5">
            <summary>
             5
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V1"/> (API 1)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_6">
            <summary>
             6
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V1"/> (API 1)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_7">
            <summary>
             7
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V1"/> (API 1)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_8">
            <summary>
             8
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V1"/> (API 1)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_9">
            <summary>
             9
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V1"/> (API 1)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_A">
            <summary>
             A
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V1"/> (API 1)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_ALL_APPS">
            <summary>
             Show all apps
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V9"/> (API 28)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_ALT_LEFT">
            <summary>
             left alt
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V1"/> (API 1)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_ALT_RIGHT">
            <summary>
             right alt
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V1"/> (API 1)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_APOSTROPHE">
            <summary>
             '
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V1"/> (API 1)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_APP_SWITCH">
            <summary>
             App switch key
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V3"/> (API 11)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_ASSIST">
            <summary>
             Assist key
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V4_1_x"/> (API 16)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_AT">
            <summary>
             @
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V1"/> (API 1)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_AVR_INPUT">
            <summary>
             A/V Receiver input key
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V3"/> (API 11)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_AVR_POWER">
            <summary>
             A/V Receiver power key
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V3"/> (API 11)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_B">
            <summary>
             B
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V1"/> (API 1)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_BACK">
            <summary>
             Back
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V1"/> (API 1)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_BACKSLASH">
            <summary>
             \
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V1"/> (API 1)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_BOOKMARK">
            <summary>
             Bookmark key
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V3"/> (API 11)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_BREAK">
            <summary>
             Break / Pause key
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V3"/> (API 11)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_BRIGHTNESS_DOWN">
            <summary>
             Brightness Down key
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V4_3_x"/> (API 18)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_BRIGHTNESS_UP">
            <summary>
             Brightness Up key
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V4_3_x"/> (API 18)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_BUTTON_1">
            <summary>
             Generic Game Pad Button #1
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V3_1"/> (API 12)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_BUTTON_10">
            <summary>
             Generic Game Pad Button #10
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V3_1"/> (API 12)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_BUTTON_11">
            <summary>
             Generic Game Pad Button #11
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V3_1"/> (API 12)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_BUTTON_12">
            <summary>
             Generic Game Pad Button #12
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V3_1"/> (API 12)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_BUTTON_13">
            <summary>
             Generic Game Pad Button #13
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V3_1"/> (API 12)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_BUTTON_14">
            <summary>
             Generic Game Pad Button #14
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V3_1"/> (API 12)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_BUTTON_15">
            <summary>
             Generic Game Pad Button #15
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V3_1"/> (API 12)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_BUTTON_16">
            <summary>
             Generic Game Pad Button #16
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V3_1"/> (API 12)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_BUTTON_2">
            <summary>
             Generic Game Pad Button #2
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V3_1"/> (API 12)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_BUTTON_3">
            <summary>
             Generic Game Pad Button #3
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V3_1"/> (API 12)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_BUTTON_4">
            <summary>
             Generic Game Pad Button #4
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V3_1"/> (API 12)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_BUTTON_5">
            <summary>
             Generic Game Pad Button #5
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V3_1"/> (API 12)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_BUTTON_6">
            <summary>
             Generic Game Pad Button #6
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V3_1"/> (API 12)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_BUTTON_7">
            <summary>
             Generic Game Pad Button #7
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V3_1"/> (API 12)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_BUTTON_8">
            <summary>
             Generic Game Pad Button #8
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V3_1"/> (API 12)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_BUTTON_9">
            <summary>
             Generic Game Pad Button #9
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V3_1"/> (API 12)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_BUTTON_A">
            <summary>
             A Button key. On a game controller, the A button should be either the button labeled A or the first button on the bottom row of controller buttons.
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V2_3"/> (API 9)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_BUTTON_B">
            <summary>
             B Button key. On a game controller, the B button should be either the button labeled B or the second button on the bottom row of controller buttons.
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V2_3"/> (API 9)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_BUTTON_C">
            <summary>
             C Button key. On a game controller, the C button should be either the button labeled C or the third button on the bottom row of controller buttons.
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V2_3"/> (API 9)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_BUTTON_L1">
            <summary>
             L1 Button key. On a game controller, the L1 button should be either the button labeled L1 (or L) or the top left trigger button.
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V2_3"/> (API 9)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_BUTTON_L2">
            <summary>
             L2 Button key. On a game controller, the L2 button should be either the button labeled L2 or the bottom left trigger button.
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V2_3"/> (API 9)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_BUTTON_MODE">
            <summary>
             Mode Button key. On a game controller, the button labeled Mode.
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V2_3"/> (API 9)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_BUTTON_R1">
            <summary>
             R1 Button key. On a game controller, the R1 button should be either the button labeled R1 (or R) or the top right trigger button.
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V2_3"/> (API 9)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_BUTTON_R2">
            <summary>
             R2 Button key. On a game controller, the R2 button should be either the button labeled R2 or the bottom right trigger button.
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V2_3"/> (API 9)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_BUTTON_SELECT">
            <summary>
             Select Button key. On a game controller, the button labeled Select.
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V2_3"/> (API 9)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_BUTTON_START">
            <summary>
             Start Button key. On a game controller, the button labeled Start.
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V2_3"/> (API 9)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_BUTTON_THUMBL">
            <summary>
             Left Thumb Button key. On a game controller, the left thumb button indicates that the left (or only) joystick is pressed.
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V2_3"/> (API 9)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_BUTTON_THUMBR">
            <summary>
             Right Thumb Button key. On a game controller, the right thumb button indicates that the right joystick is pressed.
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V2_3"/> (API 9)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_BUTTON_X">
            <summary>
             X Button key. On a game controller, the X button should be either the button labeled X or the first button on the upper row of controller buttons.
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V2_3"/> (API 9)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_BUTTON_Y">
            <summary>
             Y Button key. On a game controller, the Y button should be either the button labeled Y or the second button on the upper row of controller buttons.
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V2_3"/> (API 9)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_BUTTON_Z">
            <summary>
             Z Button key. On a game controller, the Z button should be either the button labeled Z or the third button on the upper row of controller buttons.
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V2_3"/> (API 9)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_C">
            <summary>
             C
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V1"/> (API 1)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_CALCULATOR">
            <summary>
             Calculator special function key. Used to launch a calculator application.
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V4_0_x"/> (API 15)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_CALENDAR">
            <summary>
             Calendar special function key. Used to launch a calendar application.
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V4_0_x"/> (API 15)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_CALL">
            <summary>
             Call key
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V1"/> (API 1)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_CAMERA">
            <summary>
             Camera key
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V1"/> (API 1)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_CAPS_LOCK">
            <summary>
             Caps Lock key
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V3"/> (API 11)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_CAPTIONS">
            <summary>
             Toggle captions key
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V3"/> (API 11)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_CHANNEL_DOWN">
            <summary>
             Channel down key
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V3"/> (API 11)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_CHANNEL_UP">
            <summary>
             Channel up key
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V3"/> (API 11)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_CLEAR">
            <summary>
             Clear key
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V1"/> (API 1)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_COMMA">
            <summary>
             ,
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V1"/> (API 1)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_CONTACTS">
            <summary>
             Contacts special function key
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V4_0_x"/> (API 15)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_COPY">
            <summary>
             Copy
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V7"/> (API 24)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_CTRL_LEFT">
            <summary>
             Left Control modifier key
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V3"/> (API 11)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_CTRL_RIGHT">
            <summary>
             Right Control modifier key
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V3"/> (API 11)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_CUT">
            <summary>
             Cut
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V7"/> (API 24)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_D">
            <summary>
             D
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V1"/> (API 1)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_DEL">
            <summary>
             Backspace key
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V1"/> (API 1)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_DPAD_CENTER">
            <summary>
             Directional Pad Center key
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V1"/> (API 1)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_DPAD_DOWN">
            <summary>
             Directional Pad Down key
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V1"/> (API 1)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_DPAD_DOWN_LEFT">
            <summary>
             Directional Pad Down-Left key
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V7"/> (API 24)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_DPAD_DOWN_RIGHT">
            <summary>
             Directional Pad Down-Right key
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V7"/> (API 24)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_DPAD_LEFT">
            <summary>
             Directional Pad Left key
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V1"/> (API 1)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_DPAD_RIGHT">
            <summary>
             Directional Pad Right key
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V1"/> (API 1)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_DPAD_UP">
            <summary>
             Directional Pad Up key
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V1"/> (API 1)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_DPAD_UP_LEFT">
            <summary>
             Directional Pad Up-Left key
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V7"/> (API 24)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_DPAD_UP_RIGHT">
            <summary>
             Directional Pad Up-Right key
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V7"/> (API 24)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_DVR">
            <summary>
             DVR key. On some TV remotes, switches to a DVR mode for recorded shows.
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V3"/> (API 11)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_E">
            <summary>
             E
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V1"/> (API 1)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_EISU">
            <summary>
             Japanese alphanumeric key
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V4_1_x"/> (API 16)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_ENDCALL">
            <summary>
             End call
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V1"/> (API 1)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_ENTER">
            <summary>
             Enter
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V1"/> (API 1)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_ENVELOPE">
            <summary>
             Envelope special function key
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V1"/> (API 1)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_EQUALS">
            <summary>
             =
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V1"/> (API 1)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_ESCAPE">
            <summary>
             Escape key
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V3"/> (API 11)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_EXPLORER">
            <summary>
             Explorer special function key
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V1"/> (API 1)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_F">
            <summary>
             F
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V1"/> (API 1)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_F1">
            <summary>
             F1
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V3"/> (API 11)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_F10">
            <summary>
             F10
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V3"/> (API 11)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_F11">
            <summary>
             F11
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V3"/> (API 11)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_F12">
            <summary>
             F12
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V3"/> (API 11)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_F2">
            <summary>
             F2
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V3"/> (API 11)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_F3">
            <summary>
             F3
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V3"/> (API 11)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_F4">
            <summary>
             F4
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V3"/> (API 11)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_F5">
            <summary>
             F5
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V3"/> (API 11)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_F6">
            <summary>
             F6
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V3"/> (API 11)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_F7">
            <summary>
             F7
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V3"/> (API 11)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_F8">
            <summary>
             F8
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V3"/> (API 11)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_F9">
            <summary>
             F9
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V3"/> (API 11)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_FOCUS">
            <summary>
             Camera Focus key
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V1"/> (API 1)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_FORWARD">
            <summary>
             Forward key
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V3"/> (API 11)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_FORWARD_DEL">
            <summary>
             Forward Delete key
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V3"/> (API 11)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_FUNCTION">
            <summary>
             Function modifier key
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V3"/> (API 11)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_G">
            <summary>
             G
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V1"/> (API 1)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_GRAVE">
            <summary>
             `
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V1"/> (API 1)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_GUIDE">
            <summary>
             Guide key
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V3"/> (API 11)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_H">
            <summary>
             H
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V1"/> (API 1)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_HEADSETHOOK">
            <summary>
             Headset Hook key
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V1"/> (API 1)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_HELP">
            <summary>
             Help key
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V5"/> (API 21)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_HENKAN">
            <summary>
             Japanese conversion key
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V4_1_x"/> (API 16)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_HOME">
            <summary>
             Home key
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V1"/> (API 1)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_I">
            <summary>
             I
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V1"/> (API 1)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_INFO">
            <summary>
             Info key
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V3"/> (API 11)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_INSERT">
            <summary>
             Insert key
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V3"/> (API 11)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_J">
            <summary>
             J
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V1"/> (API 1)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_K">
            <summary>
             K
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V1"/> (API 1)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_KANA">
            <summary>
             Japanese kana key
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V4_1_x"/> (API 16)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_KATAKANA_HIRAGANA">
            <summary>
             Japanese katakana / hiragana key
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V4_1_x"/> (API 16)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_L">
            <summary>
             L
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V1"/> (API 1)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_LANGUAGE_SWITCH">
            <summary>
             Language Switch key
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V4"/> (API 14)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_LAST_CHANNEL">
            <summary>
             Last Channel key. Goes to the last viewed channel.
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V5"/> (API 21)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_LEFT_BRACKET">
            <summary>
             [
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V1"/> (API 1)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_M">
            <summary>
             M
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V1"/> (API 1)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_MANNER_MODE">
            <summary>
             Manner Mode key
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V4"/> (API 14)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_MEDIA_AUDIO_TRACK">
            <summary>
             Audio Track key
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V4_4_x"/> (API 19)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_MEDIA_CLOSE">
            <summary>
             Close media key
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V3"/> (API 11)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_MEDIA_EJECT">
            <summary>
             Eject media key
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V3"/> (API 11)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_MEDIA_FAST_FORWARD">
            <summary>
             Fast Forward media key
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V1_5"/> (API 3)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_MEDIA_NEXT">
            <summary>
             Play Next media key
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V1_5"/> (API 3)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_MEDIA_PAUSE">
            <summary>
             Pause media key
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V3"/> (API 11)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_MEDIA_PLAY">
            <summary>
             Play media key
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V3"/> (API 11)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_MEDIA_PLAY_PAUSE">
            <summary>
             Play/Pause media key
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V1_5"/> (API 3)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_MEDIA_PREVIOUS">
            <summary>
             Play Previous media key
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V1_5"/> (API 3)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_MEDIA_RECORD">
            <summary>
             Record media key
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V3"/> (API 11)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_MEDIA_REWIND">
            <summary>
             Rewind media key
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V1_5"/> (API 3)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_MEDIA_SKIP_BACKWARDP">
            <summary>
             Skip backward media key.
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V6"/> (API 23)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_MEDIA_SKIP_FORWARD">
            <summary>
             Skip forward media key.
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V6"/> (API 23)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_MEDIA_STEP_BACKWARDP">
            <summary>
             Step backward media key. Steps media backward, one frame at a time.
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V6"/> (API 23)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_MEDIA_STEP_FORWARD">
            <summary>
             Step forward media key. Steps media forward, one frame at a time.
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V6"/> (API 23)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_MEDIA_STOP">
            <summary>
             Stop media key
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V1_5"/> (API 3)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_MEDIA_TOP_MENUU">
            <summary>
             Media Top Menu key. Goes to the top of media menu.
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V5"/> (API 21)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_MENU">
            <summary>
             Menu key
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V1"/> (API 1)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_META_LEFT">
            <summary>
             Left Meta modifier key
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V3"/> (API 11)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_META_RIGHT">
            <summary>
             Right Meta modifier key
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V3"/> (API 11)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_MINUS">
            <summary>
             -
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V1"/> (API 1)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_MOVE_END">
            <summary>
             End Movement key
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V3"/> (API 11)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_MOVE_HOME">
            <summary>
             Home Movement key
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V3"/> (API 11)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_MUHENKAN">
            <summary>
             Japanese non-conversion key
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V4_1_x"/> (API 16)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_MUSIC">
            <summary>
             Music special function key
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V4_0_x"/> (API 15)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_MUTE">
            <summary>
             Mute key
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V1_5"/> (API 3)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_N">
            <summary>
             N
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V1"/> (API 1)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_NAVIGATE_IN">
            <summary>
             Navigate in key. Activates the item that currently has focus or expands to the next level of a navigation hierarchy.
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V6"/> (API 23)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_NAVIGATE_NEXT">
            <summary>
             Navigate to next key. Advances to the next item in an ordered collection of items.
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V6"/> (API 23)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_NAVIGATE_OUT">
            <summary>
             Navigate out key. Backs out one level of a navigation hierarchy or collapses the item that currently has focus.
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V6"/> (API 23)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_NAVIGATE_PREVIOUS">
            <summary>
             Navigate to previous key. Goes backward by one item in an ordered collection of items.
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V6"/> (API 23)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_NOTIFICATION">
            <summary>
             Notification key
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V1"/> (API 1)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_NUM">
            <summary>
             Number modifier key. Used to enter numeric symbols. This key is not Num Lock; it is more like KEY_ALT_LEFT and is interpreted as an ALT key by MetaKeyKeyListener.
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V1"/> (API 1)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_NUMPAD_0">
            <summary>
             0
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V3"/> (API 11)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_NUMPAD_1">
            <summary>
             1
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V3"/> (API 11)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_NUMPAD_2">
            <summary>
             2
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V3"/> (API 11)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_NUMPAD_3">
            <summary>
             3
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V3"/> (API 11)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_NUMPAD_4">
            <summary>
             4
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V3"/> (API 11)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_NUMPAD_5">
            <summary>
             5
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V3"/> (API 11)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_NUMPAD_6">
            <summary>
             6
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V3"/> (API 11)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_NUMPAD_7">
            <summary>
             7
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V3"/> (API 11)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_NUMPAD_8">
            <summary>
             8
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V3"/> (API 11)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_NUMPAD_9">
            <summary>
             9
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V3"/> (API 11)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_NUMPAD_ADD">
            <summary>
             Numeric keypad +
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V3"/> (API 11)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_NUMPAD_COMMA">
            <summary>
             Numeric keypad ,
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V3"/> (API 11)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_NUMPAD_DIVIDE">
            <summary>
             Numeric keypad /
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V3"/> (API 11)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_NUMPAD_DOT">
            <summary>
             Numeric keypad .
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V3"/> (API 11)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_NUMPAD_ENTER">
            <summary>
             Numeric keypad Enter key
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V3"/> (API 11)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_NUMPAD_EQUALS">
            <summary>
             Numeric keypad =
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V3"/> (API 11)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_NUMPAD_LEFT_PAREN">
            <summary>
             Numeric keypad (
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V3"/> (API 11)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_NUMPAD_MULTIPLY">
            <summary>
             Numeric keypad *
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V3"/> (API 11)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_NUMPAD_RIGHT_PAREN">
            <summary>
             Numeric keypad )
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V3"/> (API 11)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_NUMPAD_SUBTRACT">
            <summary>
             Numeric keypad -
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V3"/> (API 11)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_NUM_LOCK">
            <summary>
             Num Lock key
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V3"/> (API 11)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_O">
            <summary>
             O
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V1"/> (API 1)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_P">
            <summary>
             P
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V1"/> (API 1)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_PAGE_DOWN">
            <summary>
             Page Down key
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V2_3"/> (API 9)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_PAGE_UP">
            <summary>
             Page Up key
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V2_3"/> (API 9)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_PAIRING">
            <summary>
             Pairing key. Initiates peripheral pairing mode. Useful for pairing remote control devices or game controllers, especially if no other input mode is available.
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V5"/> (API 21)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_PASTE">
            <summary>
             Paste
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V7"/> (API 24)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_PERIOD">
            <summary>
             .
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V1"/> (API 1)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_PICTSYMBOLS">
            <summary>
             Picture Symbols modifier key
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V2_3"/> (API 9)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_PLUS">
            <summary>
             +
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V1"/> (API 1)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_POUND">
            <summary>
             #
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V1"/> (API 1)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_POWER">
            <summary>
             Power key
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V1"/> (API 1)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_PROG_BLUE">
            <summary>
             Blue "programmable" key
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V3"/> (API 11)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_PROG_GREEN">
            <summary>
             Green "programmable" key
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V3"/> (API 11)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_PROG_RED">
            <summary>
             Red "programmable" key
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V3"/> (API 11)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_PROG_YELLOW">
            <summary>
             Yellow "programmable" key
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V3"/> (API 11)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_Q">
            <summary>
             Q
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V1"/> (API 1)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_R">
            <summary>
             R
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V1"/> (API 1)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_REFRESH">
            <summary>
             Refresh
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V9"/> (API 28)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_RIGHT_BRACKET">
            <summary>
             ]
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V1"/> (API 1)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_RO">
            <summary>
             Japanese Ro key
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V4_1_x"/> (API 16)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_S">
            <summary>
             S
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V1"/> (API 1)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_SCROLL_LOCK">
            <summary>
             Scroll Lock key
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V3"/> (API 11)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_SEARCH">
            <summary>
             Search key
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V1"/> (API 1)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_SEMICOLON">
            <summary>
             ;
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V1"/> (API 1)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_SETTINGS">
            <summary>
             Settings key
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V3"/> (API 11)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_SHIFT_LEFT">
            <summary>
             Left Shift modifier key
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V1"/> (API 1)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_SHIFT_RIGHT">
            <summary>
             Right Shift modifier key
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V1"/> (API 1)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_SLASH">
            <summary>
             /
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V1"/> (API 1)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_SLEEP">
            <summary>
             Sleep key. Puts the device to sleep. Behaves somewhat like KEYCODE_POWER but it has no effect if the device is already asleep.
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V4_4W_2"/> (API 20)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_SOFT_LEFT">
            <summary>
             Soft Left key
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V1"/> (API 1)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_SOFT_RIGHT">
            <summary>
             Soft Right key
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V1"/> (API 1)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_SOFT_SLEEP">
            <summary>
             put device to sleep unless a wakelock is held.
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V7"/> (API 24)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_SPACE">
            <summary>
             Space " "
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V1"/> (API 1)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_STAR">
            <summary>
             *
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V1"/> (API 1)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_STB_INPUT">
            <summary>
             Set-top-box input key
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V3"/> (API 11)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_STB_POWER">
            <summary>
             Set-top-box power key
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V3"/> (API 11)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_STEM_1">
            <summary>
             Generic stem key 1 for Wear
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V7"/> (API 24)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_STEM_2">
            <summary>
             Generic stem key 2 for Wear
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V7"/> (API 24)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_STEM_3">
            <summary>
             Generic stem key 3 for Wear
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V7"/> (API 24)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_STEM_PRIMARY">
            <summary>
             Primary stem key for Wear Main power/reset button on watch.
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V7"/> (API 24)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_SWITCH_CHARSET">
            <summary>
             Switch Charset modifier key
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V2_3"/> (API 9)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_SYM">
            <summary>
             Symbol modifier key
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V1"/> (API 1)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_SYSRQ">
            <summary>
             System Request / Print Screen key
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V3"/> (API 11)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_SYSTEM_NAVIGATION_DOWN">
            <summary>
             Consumed by the system for navigation down
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V7_1_x"/> (API 25)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_SYSTEM_NAVIGATION_LEFT">
            <summary>
             Consumed by the system for navigation left
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V7_1_x"/> (API 25)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_SYSTEM_NAVIGATION_RIGHT">
            <summary>
             Consumed by the system for navigation right
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V7_1_x"/> (API 25)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_SYSTEM_NAVIGATION_UP">
            <summary>
             Consumed by the system for navigation up
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V7_1_x"/> (API 25)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_T">
            <summary>
             T
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V1"/> (API 1)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_TAB">
            <summary>
             Tab key
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V1"/> (API 1)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_TV">
            <summary>
             TV key
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V3"/> (API 11)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_TV_ANTENNA_CABLE">
            <summary>
             Antenna/Cable key. Toggles broadcast input source between antenna and cable.
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V5"/> (API 21)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_TV_AUDIO_DESCRIPTION">
            <summary>
             Audio description key. Toggles audio description off / on.
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V5"/> (API 21)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_TV_AUDIO_DESCRIPTION_MIX_DOWN">
            <summary>
             Audio description mixing volume down key. Lessen audio description volume as compared with normal audio volume.
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V5"/> (API 21)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_TV_AUDIO_DESCRIPTION_MIX_UP">
            <summary>
             Audio description mixing volume up key. Louden audio description volume as compared with normal audio volume.
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V5"/> (API 21)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_TV_CONTENTS_MENU">
            <summary>
             Contents menu key. Goes to the title list. Corresponds to Contents Menu (0x0B) of CEC User Control Code
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V5"/> (API 21)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_TV_DATA_SERVICE">
            <summary>
             TV data service key. Displays data services like weather, sports.
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V5"/> (API 21)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_TV_INPUT">
            <summary>
             TV input key
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V3"/> (API 11)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_TV_INPUT_COMPONENT_1">
            <summary>
             Component #1 key. Switches to component video input #1.
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V5"/> (API 21)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_TV_INPUT_COMPONENT_2">
            <summary>
             Component #2 key. Switches to component video input #2.
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V5"/> (API 21)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_TV_INPUT_COMPOSITE_1">
            <summary>
             Composite #1 key. Switches to composite video input #1.
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V5"/> (API 21)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_TV_INPUT_COMPOSITE_2">
            <summary>
             Composite #2 key. Switches to composite video input #2.
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V5"/> (API 21)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_TV_INPUT_HDMI_1">
            <summary>
             HDMI #1 key. Switches to HDMI input #1.
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V5"/> (API 21)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_TV_INPUT_HDMI_2">
            <summary>
             HDMI #2 key. Switches to HDMI input #2.
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V5"/> (API 21)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_TV_INPUT_HDMI_3">
            <summary>
             HDMI #3 key. Switches to HDMI input #3.
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V5"/> (API 21)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_TV_INPUT_HDMI_4">
            <summary>
             HDMI #4 key. Switches to HDMI input #4.
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V5"/> (API 21)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_TV_INPUT_VGA_1">
            <summary>
             VGA #1 key. Switches to VGA (analog RGB) input #1.
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V5"/> (API 21)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_TV_MEDIA_CONTEXT_MENU">
            <summary>
             Media context menu key. Goes to the context menu of media contents. Corresponds to Media Context-sensitive Menu (0x11) of CEC User Control Code.
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V5"/> (API 21)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_TV_NETWORK">
            <summary>
             Toggle Network key. Toggles selecting broacast services.
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V5"/> (API 21)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_TV_NUMBER_ENTRY">
            <summary>
             Number entry key. Initiates to enter multi-digit channel nubmber when each digit key is assigned for selecting separate channel. Corresponds to Number Entry Mode (0x1D) of CEC User Control Code.
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V5"/> (API 21)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_TV_POWER">
            <summary>
             TV power key
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V3"/> (API 11)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_TV_RADIO_SERVICE">
            <summary>
             Radio key. Toggles TV service / Radio service.
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V5"/> (API 21)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_TV_SATELLITE">
            <summary>
             Satellite key. Switches to digital satellite broadcast service.
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V5"/> (API 21)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_TV_SATELLITE_BS">
            <summary>
             BS key. Switches to BS digital satellite broadcasting service available in Japan.
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V5"/> (API 21)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_TV_SATELLITE_CS">
            <summary>
             CS key. Switches to CS digital satellite broadcasting service available in Japan.
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V5"/> (API 21)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_TV_SATELLITE_SERVICE">
            <summary>
             BS/CS key. Toggles between BS and CS digital satellite services.
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V5"/> (API 21)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_TV_TELETEXT">
            <summary>
             Teletext key. Displays Teletext service.
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V5"/> (API 21)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_TV_TERRESTRIAL_ANALOG">
            <summary>
             Analog Terrestrial key. Switches to analog terrestrial broadcast service.
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V5"/> (API 21)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_TV_TERRESTRIAL_DIGITAL">
            <summary>
             Digital Terrestrial key. Switches to digital terrestrial broadcast service.
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V5"/> (API 21)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_TV_TIMER_PROGRAMMING">
            <summary>
             Timer programming key. Goes to the timer recording menu. Corresponds to Timer Programming (0x54) of CEC User Control Code.
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V5"/> (API 21)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_TV_ZOOM_MODE">
            <summary>
             Zoom mode key. Changes Zoom mode (Normal, Full, Zoom, Wide-zoom, etc.)
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V5"/> (API 21)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_U">
            <summary>
             U
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V1"/> (API 1)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_UNKNOWN">
            <summary>
             Unknown key code
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V1"/> (API 1)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_V">
            <summary>
             V
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V1"/> (API 1)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_VOICE_ASSIST">
            <summary>
             Voice Assist key. Launches the global voice assist activity. Not delivered to applications.
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V5"/> (API 21)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_VOLUME_DOWN">
            <summary>
             Volume Down key
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V1"/> (API 1)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_VOLUME_MUTE">
            <summary>
             Volume Mute key
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V3"/> (API 11)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_VOLUME_UP">
            <summary>
             Volume Up key
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V1"/> (API 1)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_W">
            <summary>
             W
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V1"/> (API 1)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_WAKEUP">
            <summary>
             Wakeup key
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V4_4W_2"/> (API 20)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_WINDOW">
            <summary>
             Window key
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V3"/> (API 11)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_X">
            <summary>
             X
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V1"/> (API 1)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_Y">
            <summary>
             Y
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V1"/> (API 1)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_YEN">
            <summary>
             Japanese Yen key
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V4_1_x"/> (API 16)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_Z">
            <summary>
             Z
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V1"/> (API 1)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_ZENKAKU_HANKAKU">
            <summary>
             Japanese full-width / half-width key
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V4_1_x"/> (API 16)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_ZOOM_IN">
            <summary>
             Zoom in key
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V3"/> (API 11)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.KEY_ZOOM_OUT">
            <summary>
             Zoom out key
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V3"/> (API 11)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.AKey.MAX_KEYCODE">
            <summary>
             MAX_KEYCODE
            <para/> Since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V1"/> (API 1)
            <para/> Deprecated since <see cref="F:AndroidCtrl.ADB.Device.ASDK.V1_5"/> (API 3)
            </summary>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.Input.InputSource">
            <summary>
             Key input source IDs
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.InputSource.Keyboard">
            <summary>
             keyboard
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.InputSource.Mouse">
            <summary>
             mouse
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.InputSource.Joystick">
            <summary>
             joystick
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.InputSource.TouchNavigation">
            <summary>
             touchnavigation
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.InputSource.Touchpad">
            <summary>
             touchpad
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.InputSource.Trackball">
            <summary>
             trackball
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.InputSource.DPad">
            <summary>
             dpad
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.InputSource.Stylus">
            <summary>
             stylus
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.InputSource.Gamepad">
            <summary>
             gamepad
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.InputSource.Touchscreen">
            <summary>
             touchscreen
            </summary>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.Input.KeyMap">
            <summary>
             Key mapping mode
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.KeyMap.Forms">
            <summary>
             Windows Forms
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Input.KeyMap.WPF">
            <summary>
             Windows Presentation Framework
            </summary>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.Input.InputExtensions">
            <summary>
             <see cref="T:AndroidCtrl.ADB.Device.Input.Input"/> like extension methods
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Input.InputExtensions.SendKeyEvent(AndroidCtrl.ADB.Device.Shell.IShell,AndroidCtrl.ADB.Device.Input.AKey)">
            <summary>
             Sends a single key event to the device
            </summary>
            <param name="shell"><see cref="T:AndroidCtrl.ADB.Device.Shell.IShell"/></param>
            <param name="key"><see cref="T:AndroidCtrl.ADB.Device.Input.AKey"/></param>
            <exception cref="T:System.NullReferenceException"/>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Input.InputExtensions.SendKeyEvent(AndroidCtrl.ADB.Device.Shell.IShell,AndroidCtrl.ADB.Device.Input.AKey,System.Boolean)">
            <summary>
             Sends a single key event, with the ability to mark it as --longpress, to the device
            <para/>*NOTE*
            <para/>The --longpress parameter is not supported on all android devices
            </summary>
            <param name="shell"><see cref="T:AndroidCtrl.ADB.Device.Shell.IShell"/></param>
            <param name="key">a<see cref="T:AndroidCtrl.ADB.Device.Input.AKey"/></param>
            <param name="longPress"><see cref="T:System.Boolean"/></param>
            <exception cref="T:System.NullReferenceException"/>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Input.InputExtensions.SendKeyEvent(AndroidCtrl.ADB.Device.Shell.IShell,AndroidCtrl.ADB.Device.Input.InputSource,AndroidCtrl.ADB.Device.Input.AKey,System.Boolean)">
            <summary>
             Sends a single key event, with the ability to mark it as --longpress, to the given device source
            <para/>*NOTE*
            <para/>The --longpress parameter is not supported on all android devices
            <para/>This method is on some devices buggy, if u get always false as return, use KeyEvent(IDKey key, bool longPress) or KeyEvent(IDKey key)
            </summary>
            <param name="shell"><see cref="T:AndroidCtrl.ADB.Device.Shell.IShell"/></param>
            <param name="source"><see cref="T:AndroidCtrl.ADB.Device.Input.InputSource"/></param>
            <param name="key"><see cref="T:AndroidCtrl.ADB.Device.Input.AKey"/></param>
            <param name="longPress"><see cref="T:System.Boolean"/></param>
            <exception cref="T:System.NullReferenceException"/>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Input.InputExtensions.SendMappedKeyEvent(AndroidCtrl.ADB.Device.Shell.IShell,System.Int32,AndroidCtrl.ADB.Device.Input.KeyMap,System.Boolean)">
            <summary>
             Maps an key based on the given <see cref="T:AndroidCtrl.ADB.Device.Input.KeyMap"/> with an "en" layout and sends it via the <see cref="T:AndroidCtrl.ADB.Device.Shell.IShell"/> to the device
            </summary>
            <param name="shell"><see cref="T:AndroidCtrl.ADB.Device.Shell.IShell"/></param>
            <param name="key"><see cref="T:System.Int32"/></param>
            <param name="map"><see cref="T:AndroidCtrl.ADB.Device.Input.KeyMap"/></param>
            <param name="shift"><see cref="T:System.Boolean"/></param>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Input.InputExtensions.SendMappedKeyEvent(AndroidCtrl.ADB.Device.Shell.IShell,System.Int32,AndroidCtrl.ADB.Device.Input.KeyMap,System.String,System.Boolean)">
            <summary>
             Maps an key based on the given <see cref="T:AndroidCtrl.ADB.Device.Input.KeyMap"/> with the given <paramref name="twoLetterISOLanguageName"/> layout and sends it via the <see cref="T:AndroidCtrl.ADB.Device.Shell.IShell"/> to the device
            <para/>*NOTE*
            <para/>If the <paramref name="twoLetterISOLanguageName"/> couldn't be found, "en" will be used
            </summary>
            <param name="shell"><see cref="T:AndroidCtrl.ADB.Device.Shell.IShell"/></param>
            <param name="key"><see cref="T:System.Int32"/></param>
            <param name="map"><see cref="T:AndroidCtrl.ADB.Device.Input.KeyMap"/></param>
            <param name="twoLetterISOLanguageName"><see cref="T:System.String"/> 2 letter language code like de, en</param>
            <param name="shift"><see cref="T:System.Boolean"/></param>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
            <exception cref="T:System.NullReferenceException"/>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Input.InputExtensions.SendSwipe(AndroidCtrl.ADB.Device.Shell.IShell,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
             Sends the given x,y , x1,y1 as swipe event to the device
            <para/>*NOTE*
            <para/>The input source is <see cref="F:AndroidCtrl.ADB.Device.Input.InputSource.Touchscreen"/>
            </summary>
            <param name="shell"><see cref="T:AndroidCtrl.ADB.Device.Shell.IShell"/></param>
            <param name="x">X-Axis</param>
            <param name="y">Y-Axis</param>
            <param name="x1">X-Axis</param>
            <param name="y1">Y-Axis</param>
            <exception cref="T:System.NullReferenceException"/>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Input.InputExtensions.SendSwipe(AndroidCtrl.ADB.Device.Shell.IShell,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
             Sends the given x,y , x1,y1 as swipe event with the given duration (ms) to the device
            <para/>*NOTE*
            <para/>duration = 0 implies that the duration parameter is not used
            <para/>The input source is <see cref="F:AndroidCtrl.ADB.Device.Input.InputSource.Touchscreen"/>
            </summary>
            <param name="shell"><see cref="T:AndroidCtrl.ADB.Device.Shell.IShell"/></param>
            <param name="x">X-Axis</param>
            <param name="y">Y-Axis</param>
            <param name="x1">X-Axis</param>
            <param name="y1">Y-Axise</param>
            <param name="ms">time (ms) it will take to swipe, 0 implies that no duration is used</param>
            <exception cref="T:System.NullReferenceException"/>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Input.InputExtensions.SendSwipe(AndroidCtrl.ADB.Device.Shell.IShell,AndroidCtrl.ADB.Device.Input.InputSource,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
             Sends the given x,y , x1,y1 as swipe event with the given duration (ms) to the given device source
            <para/>*NOTE*
            <para/>duration = 0 implies that the duration parameter is not used
            </summary>
            <param name="shell"><see cref="T:AndroidCtrl.ADB.Device.Shell.IShell"/></param>
            <param name="source"><see cref="T:AndroidCtrl.ADB.Device.Input.InputSource"/></param>
            <param name="x">X-Axis</param>
            <param name="y">Y-Axis</param>
            <param name="x1">X-Axis</param>
            <param name="y1">Y-Axis</param>
            <param name="ms">duartion (ms) it will take to swipe, 0 implies that no duration is used</param>
            <exception cref="T:System.NullReferenceException"/>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Input.InputExtensions.SendTap(AndroidCtrl.ADB.Device.Shell.IShell,System.Int32,System.Int32)">
            <summary>
             Sends the given x and y as touch event to the device
            <para/>*NOTE*
            <para/>The input source is <see cref="F:AndroidCtrl.ADB.Device.Input.InputSource.Touchscreen"/>
            </summary>
            <param name="shell"><see cref="T:AndroidCtrl.ADB.Device.Shell.IShell"/></param>
            <param name="x">X-Axis</param>
            <param name="y">Y-Axis</param>
            <exception cref="T:System.NullReferenceException"/>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Input.InputExtensions.SendTap(AndroidCtrl.ADB.Device.Shell.IShell,AndroidCtrl.ADB.Device.Input.InputSource,System.Int32,System.Int32)">
            <summary>
             Sends the given x and y as touch event to the given device source
            </summary>
            <param name="shell"><see cref="T:AndroidCtrl.ADB.Device.Shell.IShell"/></param>
            <param name="source"><see cref="T:AndroidCtrl.ADB.Device.Input.InputSource"/></param>
            <param name="x">X-Axis</param>
            <param name="y">Y-Axis</param>
            <exception cref="T:System.NullReferenceException"/>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Input.InputExtensions.SendText(AndroidCtrl.ADB.Device.Shell.IShell,System.String)">
            <summary>
             Sends the given <see cref="T:System.String"/> as text event to the device
            <para/>*NOTE*
            <para/>The input source is <see cref="F:AndroidCtrl.ADB.Device.Input.InputSource.Touchscreen"/>
            </summary>
            <param name="shell"><see cref="T:AndroidCtrl.ADB.Device.Shell.IShell"/></param>
            <param name="text"><see cref="T:System.String"/> to send</param>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.NullReferenceException"/>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Input.InputExtensions.SendText(AndroidCtrl.ADB.Device.Shell.IShell,AndroidCtrl.ADB.Device.Input.InputSource,System.String)">
            <summary>
             Sends the given <see cref="T:System.String"/> as text event to the given device source
            </summary>
            <param name="shell"><see cref="T:AndroidCtrl.ADB.Device.Shell.IShell"/></param>
            <param name="source"><see cref="T:AndroidCtrl.ADB.Device.Input.InputSource"/></param>
            <param name="text"><see cref="T:System.String"/> to send</param>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.NullReferenceException"/>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.Input.KeyMaps">
            <summary>
             Forms &amp; WPS Key-Maps
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Input.KeyMaps.UnMappableChar">
            <summary>
             Un-mappable char "pseudo constant"
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Input.KeyMaps.Forms">
            <summary>
             Forms Key-Map
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Input.KeyMaps.WPF">
            <summary>
             WPF Key-Map
            </summary>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.Input.Input">
            <summary>
             Input is the general class to send some "input" commands.
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Input.Input.KeyEvent(AndroidCtrl.ADB.Device.Input.AKey)">
            <summary>
             Sends a single key event to the device
            </summary>
            <param name="key"><see cref="T:AndroidCtrl.ADB.Device.Input.AKey"/></param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Input.Input.KeyEvent(AndroidCtrl.ADB.Device.Input.AKey,System.Boolean)">
            <summary>
             Sends a single key event, with the ability to mark it as --longpress, to the device
            <para/>*NOTE*
            <para/>The --longpress parameter is not supported on all android devices
            </summary>
            <param name="key">a<see cref="T:AndroidCtrl.ADB.Device.Input.AKey"/></param>
            <param name="longPress"><see cref="T:System.Boolean"/></param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Input.Input.KeyEvent(AndroidCtrl.ADB.Device.Input.InputSource,AndroidCtrl.ADB.Device.Input.AKey,System.Boolean)">
            <summary>
             Sends a single key event, with the ability to mark it as --longpress, to the given device source
            <para/>*NOTE*
            <para/>The --longpress parameter is not supported on all android devices
            <para/>This method is on some devices buggy, if u get always false as return, use KeyEvent(IDKey key, bool longPress) or KeyEvent(IDKey key)
            </summary>
            <param name="source"><see cref="T:AndroidCtrl.ADB.Device.Input.InputSource"/></param>
            <param name="key"><see cref="T:AndroidCtrl.ADB.Device.Input.AKey"/></param>
            <param name="longPress"><see cref="T:System.Boolean"/></param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Input.Input.KeyEventStack(System.Collections.Generic.IEnumerable{AndroidCtrl.ADB.Device.Input.AKey})">
            <summary>
             Sends a stack of key events to the device
            <para/>*NOTE*
            <para/>Between the key events is an delay of 150 ms
            </summary>
            <param name="keys"><see cref="T:AndroidCtrl.ADB.Device.Input.AKey"/></param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Input.Input.KeyEventStack(System.Collections.Generic.IEnumerable{AndroidCtrl.ADB.Device.Input.IKeyEvent})">
            <summary>
             Sends a stack of IKeyEvent's to the device
            <para/>*NOTE*
            <para/>Between the key events is an delay of 150 ms
            </summary>
            <param name="keys"><see cref="T:AndroidCtrl.ADB.Device.Input.AKey"/></param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Input.Input.MappedKeyEvent(System.Int32,AndroidCtrl.ADB.Device.Input.KeyMap,System.Boolean)">
            <summary>
             Maps an key based on the given <see cref="T:AndroidCtrl.ADB.Device.Input.KeyMap"/> with an "en" layout and sends it to the device
            </summary>
            <param name="key"><see cref="T:System.Int32"/></param>
            <param name="map"><see cref="T:AndroidCtrl.ADB.Device.Input.KeyMap"/></param>
            <param name="shift"><see cref="T:System.Boolean"/></param>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Input.Input.MappedKeyEvent(System.Int32,AndroidCtrl.ADB.Device.Input.KeyMap,System.String,System.Boolean)">
            <summary>
             Maps an key based on the given <see cref="T:AndroidCtrl.ADB.Device.Input.KeyMap"/> with the given <paramref name="twoLetterISOLanguageName"/> layout and sends it to the device
            <para/>*NOTE*
            <para/>If the <paramref name="twoLetterISOLanguageName"/> couldn't be found, "en" will be used
            </summary>
            <param name="key"><see cref="T:System.Int32"/></param>
            <param name="map"><see cref="T:AndroidCtrl.ADB.Device.Input.KeyMap"/></param>
            <param name="twoLetterISOLanguageName"><see cref="T:System.String"/> 2 letter language code like de, en</param>
            <param name="shift"><see cref="T:System.Boolean"/></param>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Input.Input.Press">
            <summary>
             Sends the press event to the device
            <para/>*Note* 
            <para/>The input source is <see cref="F:AndroidCtrl.ADB.Device.Input.InputSource.Trackball"/>
            </summary>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Input.Input.Press(AndroidCtrl.ADB.Device.Input.InputSource)">
            <summary>
             Sends the press event to the given device source
            </summary>
            <param name="source"><see cref="T:AndroidCtrl.ADB.Device.Input.InputSource"/></param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Input.Input.Roll(System.Int32,System.Int32)">
            <summary>
             Sends the given x and y as roll event to the device
            <para/>*Note* 
            <para/>The input source is <see cref="F:AndroidCtrl.ADB.Device.Input.InputSource.Trackball"/>
            </summary>
            <param name="x">X-Axis</param>
            <param name="y">Y-Axis</param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Input.Input.Roll(AndroidCtrl.ADB.Device.Input.InputSource,System.Int32,System.Int32)">
            <summary>
             Sends the given dx and dy as roll event to the given device source
            </summary>
            <param name="source"><see cref="T:AndroidCtrl.ADB.Device.Input.InputSource"/></param>
            <param name="x">X-Axis</param>
            <param name="y">Y-Axis</param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Input.Input.Swipe(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
             Sends the given x,y , x1,y1 as swipe event to the device
            <para/>*NOTE*
            <para/>The input source is <see cref="F:AndroidCtrl.ADB.Device.Input.InputSource.Touchscreen"/>
            </summary>
            <param name="x">X-Axis</param>
            <param name="y">Y-Axis</param>
            <param name="x1">X-Axis</param>
            <param name="y1">Y-Axis</param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Input.Input.Swipe(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
             Sends the given x,y , x1,y1 as swipe event with the given duration (ms) to the device
            <para/>*NOTE*
            <para/>duration = 0 implies that the duration parameter is not used
            <para/>The input source is <see cref="F:AndroidCtrl.ADB.Device.Input.InputSource.Touchscreen"/>
            </summary>
            <param name="x">X-Axis</param>
            <param name="y">Y-Axis</param>
            <param name="x1">X-Axis</param>
            <param name="y1">Y-Axise</param>
            <param name="ms">time (ms) it will take to swipe, 0 implies that no duration is used</param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Input.Input.Swipe(AndroidCtrl.ADB.Device.Input.InputSource,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
             Sends the given x,y , x1,y1 as swipe event with the given duration (ms) to the given device source
            <para/>*NOTE*
            <para/>duration = 0 implies that the duration parameter is not used
            </summary>
            <param name="source"><see cref="T:AndroidCtrl.ADB.Device.Input.InputSource"/></param>
            <param name="x">X-Axis</param>
            <param name="y">Y-Axis</param>
            <param name="x1">X-Axis</param>
            <param name="y1">Y-Axis</param>
            <param name="ms">duartion (ms) it will take to swipe, 0 implies that no duration is used</param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Input.Input.Tap(System.Int32,System.Int32)">
            <summary>
             Sends the given x and y as touch event to the device
            <para/>*NOTE*
            <para/>The input source is <see cref="F:AndroidCtrl.ADB.Device.Input.InputSource.Touchscreen"/>
            </summary>
            <param name="x">X-Axis</param>
            <param name="y">Y-Axis</param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Input.Input.Tap(AndroidCtrl.ADB.Device.Input.InputSource,System.Int32,System.Int32)">
            <summary>
             Sends the given x and y as touch event to the given device source
            </summary>
            <param name="source"><see cref="T:AndroidCtrl.ADB.Device.Input.InputSource"/></param>
            <param name="x">X-Axis</param>
            <param name="y">Y-Axis</param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Input.Input.Text(System.String)">
            <summary>
             Sends the given <see cref="T:System.String"/> as text event to the device
            <para/>*NOTE*
            <para/>The input source is <see cref="F:AndroidCtrl.ADB.Device.Input.InputSource.Touchscreen"/>
            </summary>
            <param name="text"><see cref="T:System.String"/> to send</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Input.Input.Text(AndroidCtrl.ADB.Device.Input.InputSource,System.String)">
            <summary>
             Sends the given <see cref="T:System.String"/> as text event to the given device source
            </summary>
            <param name="source"><see cref="T:AndroidCtrl.ADB.Device.Input.InputSource"/></param>
            <param name="text"><see cref="T:System.String"/> to send</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.Screen.FramebufferInfo">
            <summary>
             Framebuffer-Image-Header
            <para/>This object implements <see cref="T:AndroidCtrl.ADB.Device.Screen.IFramebufferInfo"/>
            <para/>Base struct can be found here: https://android.googlesource.com/platform/system/core/+/master/adb/daemon/framebuffer_service.cpp
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Screen.FramebufferInfo.#ctor(System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
             Initialize the <see cref="T:AndroidCtrl.ADB.Device.Screen.FramebufferInfo"/>
            <para/>*NOTE*
            <para/>This constructor takes only a 52 byte or 56 byte array
            </summary>
            <param name="header"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.FormatException"/>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Screen.FramebufferInfo.Version">
            <summary>
             Framebuffer Version
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Screen.FramebufferInfo.Bpp">
            <summary>
             Bits per Pixel
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Screen.FramebufferInfo.ColorSpace">
            <summary>
             Color Space
            <para/>*NOTE*
            <para/>If <see cref="P:AndroidCtrl.ADB.Device.Screen.FramebufferInfo.Version"/> is "1" (one) the return will always be "0" (zero)
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Screen.FramebufferInfo.ColorFormat">
            <summary>
             Color Format
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Screen.FramebufferInfo.Size">
            <summary>
             Pixel-Array Size
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Screen.FramebufferInfo.Width">
            <summary>
             Image Width
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Screen.FramebufferInfo.Height">
            <summary>
             Image Height
            </summary>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.Screen.ColorFormat">
            <summary>
             Represents the currently known Android Framebuffer-Color-Formats
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Screen.ColorFormat.None">
            <summary>
             None/Unknown
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Screen.ColorFormat.RGBA_8888">
            <summary>
             RGBA_8888 (32 bpp)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Screen.ColorFormat.RGBX_8888">
            <summary>
             RGBX_8888 (32 bpp)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Screen.ColorFormat.RGB_888">
            <summary>
             RGB_888 (24 bpp)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Screen.ColorFormat.BGR_565">
            <summary>
             RGB_565 (16 bpp)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Screen.ColorFormat.BGRA_8888">
            <summary>
             BGRA_8888 (32 bpp)
            </summary>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.Screen.FramebufferPausedEventHandler">
            <summary>
             This event will be raised when the Framebuffer-Service is paused
            </summary>
            <param name="sender"><see cref="T:AndroidCtrl.ADB.Device.Screen.IFramebuffer"/></param>
            <param name="e"><see cref="T:System.EventArgs"/></param>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.Screen.FramebufferResumedEventHandler">
            <summary>
             This event will be raised when the Framebuffer-Service is resumed from it's pause state
            </summary>
            <param name="sender"><see cref="T:AndroidCtrl.ADB.Device.Screen.IFramebuffer"/></param>
            <param name="e"><see cref="T:System.EventArgs"/></param>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.Screen.FramebufferStartedEventHandler">
            <summary>
             This event will be raised when the Framebuffer-Service is started
            </summary>
            <param name="sender"><see cref="T:AndroidCtrl.ADB.Device.Screen.IFramebuffer"/></param>
            <param name="e"><see cref="T:System.EventArgs"/></param>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.Screen.FramebufferStoppedEventHandler">
            <summary>
             This event will be raised when the Framebuffer-Service is stopped
            </summary>
            <param name="sender"><see cref="T:AndroidCtrl.ADB.Device.Screen.IFramebuffer"/></param>
            <param name="e"><see cref="T:System.EventArgs"/></param>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.Screen.FramebufferUpdatedEventHandler">
            <summary>
             This event will be raised after the Pixel-Buffer is updated
            </summary>
            <param name="sender"><see cref="T:AndroidCtrl.ADB.Device.Screen.IFramebuffer"/></param>
            <param name="e"><see cref="T:System.EventArgs"/></param>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.Screen.IFramebufferInfo">
            <summary>
             FramebufferInfo interface
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Screen.IFramebufferInfo.Version">
            <summary>
             Framebuffer Version
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Screen.IFramebufferInfo.Bpp">
            <summary>
             Bits per Pixel
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Screen.IFramebufferInfo.ColorSpace">
            <summary>
             Color Space
            <para/>*NOTE*
            <para/>If <see cref="P:AndroidCtrl.ADB.Device.Screen.IFramebufferInfo.Version"/> is "1" (one) the return will always be "0" (zero)
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Screen.IFramebufferInfo.ColorFormat">
            <summary>
             Color Format
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Screen.IFramebufferInfo.Size">
            <summary>
             Pixel-Array Size
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Screen.IFramebufferInfo.Width">
            <summary>
             Image Width
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Screen.IFramebufferInfo.Height">
            <summary>
             Image Height
            </summary>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.Screen.ScreenDimension">
            <summary>
             Represents the screen dimensions
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Screen.ScreenDimension.#ctor(System.Int32,System.Int32)">
            <summary>
             ScreenDimension - Constructor
            </summary>
            <param name="width">int</param>
            <param name="height">int</param>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Screen.ScreenDimension.Width">
            <summary>
             Screen width
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Screen.ScreenDimension.Height">
            <summary>
             Screen height
            </summary>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.Screen.ScreenFocus">
            <summary>
             Represents the currently running package &amp; activity
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Screen.ScreenFocus.#ctor(System.String,System.String)">
            <summary>
             ScreenFocus - Constructor
            </summary>
            <param name="package"><see cref="T:System.String"/></param>
            <param name="activity"><see cref="T:System.String"/></param>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Screen.ScreenFocus.Activity">
            <summary>
             Activity
            <para/>*NOTE
            <para/>Can be <see cref="T:null"/>
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Screen.ScreenFocus.Package">
            <summary>
             Package
            </summary>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.Screen.IScreenFocus">
            <summary>
             ScreenFocus interface
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Screen.IScreenFocus.Activity">
            <summary>
             Activity
            <para/>*NOTE
            <para/>Can be <see cref="T:null"/>
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Screen.IScreenFocus.Package">
            <summary>
             Package
            </summary>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.Screen.IScreenDimension">
            <summary>
             ScreenDimension interface
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Screen.IScreenDimension.Width">
            <summary>
             Screen width
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Screen.IScreenDimension.Height">
            <summary>
             Screen height
            </summary>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.Screen.Framebuffer">
            <summary>
             Handles the Framebuffer-Service on the device
            <para/>*NOTE*
            <para/>The ADB-Daemon must have sufficient privilegs
            <para/>This object implements <see cref="T:AndroidCtrl.ADB.Device.Screen.IFramebuffer"/>
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Screen.Framebuffer.#ctor(AndroidCtrl.ADB.IADB)">
            <summary>
             Framebuffer - Constructor
            </summary>
            <param name="adb"><see cref="N:AndroidCtrl.ADB"/></param>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Screen.Framebuffer.Dispose">
            <summary>
             IDispose
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Screen.Framebuffer.BufferInfo">
            <summary>
             Pixel-Buffer Info
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Screen.Framebuffer.DeviceID">
            <summary>
             Device ID
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Screen.Framebuffer.FPS">
            <summary>
             Frames per second
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Screen.Framebuffer.IsAlive">
            <summary>
             Checks if the Framebuffer-Service is running
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Screen.Framebuffer.IsPaused">
            <summary>
             Checks if the Framebuffer-Service is paused
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Screen.Framebuffer.CopyPixelBuffer(System.Byte[]@)">
            <summary>
             Pixel-Buffer
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Screen.Framebuffer.Pause">
            <summary>
             Pause after the next transmitted Pixel-Array
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Screen.Framebuffer.Start">
            <summary>
             Start/Resume the Framebuffer-Service
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Screen.Framebuffer.Stop">
            <summary>
             Stop the Framebuffer-Service
            </summary>
        </member>
        <member name="E:AndroidCtrl.ADB.Device.Screen.Framebuffer.Paused">
            <summary>
             This event will be raised when the Framebuffer-Service is paused
            </summary>
        </member>
        <member name="E:AndroidCtrl.ADB.Device.Screen.Framebuffer.Resumed">
            <summary>
             This event will be raised when the Framebuffer-Service is resumed from it's pause state
            </summary>
        </member>
        <member name="E:AndroidCtrl.ADB.Device.Screen.Framebuffer.Started">
            <summary>
             This event will be raised when the Framebuffer-Service is started
            </summary>
        </member>
        <member name="E:AndroidCtrl.ADB.Device.Screen.Framebuffer.Stopped">
            <summary>
             This event will be raised when the Framebuffer-Service is stopped
            </summary>
        </member>
        <member name="E:AndroidCtrl.ADB.Device.Screen.Framebuffer.Updated">
            <summary>
             This event will be raised after the Pixel-Buffer is updated
            </summary>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.Screen.IFramebuffer">
            <summary>
             IFramebuffer interface
            <para/>Represents the Framebuffer interface for <see cref="T:AndroidCtrl.ADB.Device.Screen.Framebuffer"/>
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Screen.IFramebuffer.BufferInfo">
            <summary>
             Pixel-Buffer Info
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Screen.IFramebuffer.DeviceID">
            <summary>
             Device ID
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Screen.IFramebuffer.FPS">
            <summary>
             Frames per second
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Screen.IFramebuffer.IsAlive">
            <summary>
             Checks if the Framebuffer-Service is running
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Screen.IFramebuffer.IsPaused">
            <summary>
             Checks if the Framebuffer-Service is paused
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Screen.IFramebuffer.CopyPixelBuffer(System.Byte[]@)">
            <summary>
             Copy the Pixel-Buffer to the given <see cref="T:byte[]"/>
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Screen.IFramebuffer.Pause">
            <summary>
             Pause, after the next transmitted Pixel-Array
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Screen.IFramebuffer.Start">
            <summary>
             Start/Resume the Framebuffer-Service
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Screen.IFramebuffer.Stop">
            <summary>
             Stop the Framebuffer-Service
            </summary>
        </member>
        <member name="E:AndroidCtrl.ADB.Device.Screen.IFramebuffer.Paused">
            <summary>
             This event will be raised when the Framebuffer-Service is paused
            </summary>
        </member>
        <member name="E:AndroidCtrl.ADB.Device.Screen.IFramebuffer.Resumed">
            <summary>
             This event will be raised when the Framebuffer-Service is resumed from it's pause state
            </summary>
        </member>
        <member name="E:AndroidCtrl.ADB.Device.Screen.IFramebuffer.Started">
            <summary>
             This event will be raised when the Framebuffer-Service is started
            </summary>
        </member>
        <member name="E:AndroidCtrl.ADB.Device.Screen.IFramebuffer.Stopped">
            <summary>
             This event will be raised when the Framebuffer-Service is stopped
            </summary>
        </member>
        <member name="E:AndroidCtrl.ADB.Device.Screen.IFramebuffer.Updated">
            <summary>
             This event will be raised after the Pixel-Buffer is updated
            </summary>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.Screen.Screen">
            <summary>
             Screen is the general class to interact with the device screen.
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Screen.Screen.CurrentFocus">
            <summary>
             Returns the current focused app &amp; activity
            </summary>
            <returns><see cref="T:AndroidCtrl.ADB.Device.Screen.IScreenFocus"/> or <see cref="T:null"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Screen.Screen.GetFramebuffer">
            <summary>
             Returns a fresh <see cref="T:AndroidCtrl.ADB.Device.Screen.IFramebuffer"/> if the device is connected, otherwise the return is <see cref="T:null"/>
            </summary>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:AndroidCtrl.ADB.Device.Screen.IFramebuffer"/> or <see cref="T:null"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Screen.Screen.IsOn">
            <summary>
             Check if the device screen is currently on or off
            </summary>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Screen.Screen.OnOff">
            <summary>
             Turns the screen on or off, depending on current state.
            </summary>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Screen.Screen.Record(System.String,System.String,System.String,System.Boolean)">
            <summary>
             Starts an screenrecord on the device
            </summary>
            <param name="remotePath">File path to store (mp4)</param>
            <param name="timeLimit">Recording time limit (sec)</param>
            <param name="size">Recoding size (1280x720)</param>
            <param name="rotate">Rotate 90 degrees</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Screen.Screen.RestrictedSize">
            <summary>
             Returns the restricted screen size or null
            </summary>
            <returns><see cref="T:AndroidCtrl.ADB.Device.Screen.IScreenDimension"/> or <see cref="T:null"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Screen.Screen.Shot(System.String,System.Int32)">
            <summary>
             Make a screenshot on the device (Filename example: Screenshot_dd.MM.yyyy_hh-mm-ss.png)
            </summary>
            <param name="remoteDirectory">Remote directory path</param>
            <param name="displayID">Display ID default is 0</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Screen.Screen.Shot(System.IO.Stream,System.Int32)">
            <summary>
             Make a screenshot from the device
            <para/>*NOTE*
            <para/>This method works only on devices which support adb exec-out!
            </summary>
            <param name="stream"><see cref="T:System.IO.Stream"/></param>
            <param name="displayID">Display ID default is 0</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Screen.Screen.Swipe(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
             Sends the given x1, y1, x2, y2 as swipe event to the device
            </summary>
            <param name="x1">x1 coordinate</param>
            <param name="y1">y1 coordinate</param>
            <param name="x2">x2 coordinate</param>
            <param name="y2">y2 coordinate</param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Screen.Screen.Swipe(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
             Sends the given x1, y1, x2, y2 as swipe event with the given duration (ms) to the device
            <para/>*NOTE*
            <para/>duration = 0 implies that the duration parameter is not used
            </summary>
            <param name="x1">x1 coordinate</param>
            <param name="y1">y1 coordinate</param>
            <param name="x2">x2 coordinate</param>
            <param name="y2">y2 coordinate</param>
            <param name="duration">duartion (ms) it will take to swipe, 0 implies that no duration is used</param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Screen.Screen.Tap(System.Int32,System.Int32)">
            <summary>
             Sends the given x and y as touch event to the device
            </summary>
            <param name="x">x coordinate</param>
            <param name="y">y coordinate</param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Screen.Screen.Unlock">
            <summary>
             Unlocks the device if no security mechanism is active.
            </summary>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Screen.Screen.UnlockWithPin(System.String)">
            <summary>
             Sends the given unlock-pin/password to the device
            </summary>
            <param name="pin">Unlock-Pin</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Screen.Screen.UnrestrictedSize">
            <summary>
             Returns the unrestricted screen size or null
            </summary>
            <returns><see cref="T:AndroidCtrl.ADB.Device.Screen.IScreenDimension"/> or <see cref="T:null"/></returns>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.IO.IFileSystemItem">
            <summary>
             FileSystemItem interface
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.IO.IFileSystemItem.Name">
            <summary>
             Holds the item name (text.txt)
            <para>*NOTE* if <see cref="P:AndroidCtrl.ADB.Device.IO.IFileSystemItem.ID"/> is <see cref="F:AndroidCtrl.ADB.Device.IO.FileType.Mount"/> this will hold the mountpoint or its ID this depends on the parse mode</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.IO.IFileSystemItem.Path">
            <summary>
             Holds the full item path (/root/sdcard/test/text.txt)
            <para>*NOTE* if <see cref="P:AndroidCtrl.ADB.Device.IO.IFileSystemItem.ID"/> is <see cref="F:AndroidCtrl.ADB.Device.IO.FileType.Mount"/> this will hold the mountpoint</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.IO.IFileSystemItem.SymPath">
            <summary>
             Holds the full item sym path (/root/sdcard/test/text.txt)
            <para>*NOTE* if <see cref="P:AndroidCtrl.ADB.Device.IO.IFileSystemItem.ID"/> is <see cref="F:AndroidCtrl.ADB.Device.IO.FileType.Mount"/> this will hold the mountpoint</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.IO.IFileSystemItem.ID">
            <summary>
             Holds the item <see cref="T:AndroidCtrl.ADB.Device.IO.FileType"/> (file,folder,etc...)
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.IO.IFileSystemItem.INode">
            <summary>
             Holds the item inode number
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.IO.IFileSystemItem.Type">
            <summary>
             Holds the item type (.exe,.bat,block_device_file,etc...)
            <para>*NOTE* if <see cref="P:AndroidCtrl.ADB.Device.IO.IFileSystemItem.ID"/> is <see cref="F:AndroidCtrl.ADB.Device.IO.FileType.Mount"/> this will hold a FileType.(SDCARD,DIRECTORY,etc.).ToString() for better identification</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.IO.IFileSystemItem.Permission">
            <summary>
             Holds the item permissions (rwxrwx---)
            <para>*NOTE* if <see cref="P:AndroidCtrl.ADB.Device.IO.IFileSystemItem.ID"/> is <see cref="F:AndroidCtrl.ADB.Device.IO.FileType.Mount"/> this will be null</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.IO.IFileSystemItem.Owner">
            <summary>
             Holds the item owner (system,sdcard_rw,etc...)
            <para>*NOTE* if <see cref="P:AndroidCtrl.ADB.Device.IO.IFileSystemItem.ID"/> is <see cref="F:AndroidCtrl.ADB.Device.IO.FileType.Mount"/> this will be null</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.IO.IFileSystemItem.Group">
            <summary>
             Holds the item group (system,sdcard_rw,etc...)
            <para>*NOTE* if <see cref="P:AndroidCtrl.ADB.Device.IO.IFileSystemItem.ID"/> is <see cref="F:AndroidCtrl.ADB.Device.IO.FileType.Mount"/> this will be null</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.IO.IFileSystemItem.Size">
            <summary>
             Holds the item size as byte
            <para>*NOTE* if <see cref="P:AndroidCtrl.ADB.Device.IO.IFileSystemItem.ID"/> is <see cref="F:AndroidCtrl.ADB.Device.IO.FileType.Mount"/> this will hold the whole mountpoint space</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.IO.IFileSystemItem.SizeUsed">
            <summary>
             Holds the item used space
            <para>*NOTE* ONLY if the item is <see cref="F:AndroidCtrl.ADB.Device.IO.FileType.Mount"/> else its -1</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.IO.IFileSystemItem.SizeFree">
            <summary>
             Holds the item free space
            <para>*NOTE* ONLY if the item is <see cref="F:AndroidCtrl.ADB.Device.IO.FileType.Mount"/> else its -1</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.IO.IFileSystemItem.SizeUse">
            <summary>
             Holds the item used space in (%)
            <para>*NOTE* ONLY if the item is <see cref="F:AndroidCtrl.ADB.Device.IO.FileType.Mount"/> else its null</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.IO.IFileSystemItem.BlockSize">
            <summary>
             Holds the item blocksize
            <para>*NOTE* ONLY if the item is <see cref="F:AndroidCtrl.ADB.Device.IO.FileType.Mount"/> else its null</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.IO.IFileSystemItem.Date">
            <summary>
             Holds the item date
            <para>*NOTE* if <see cref="P:AndroidCtrl.ADB.Device.IO.IFileSystemItem.ID"/> is <see cref="F:AndroidCtrl.ADB.Device.IO.FileType.Mount"/> this will be null</para>
            </summary>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.IO.IO">
            <summary>
             IO is the general class for I/O, here u find some pre-defined shell/busybox commands.
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.IO.#ctor(AndroidCtrl.ADB.IADB)">
            <summary>
             Creates the IO instance, from here u can use a wide range of predefined functions to interact with the device.
            </summary>
            <param name="adb"><see cref="T:AndroidCtrl.ADB.IADB"/></param>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.IO.Directories(System.String)">
            <summary>
             Returns a new Directories instance
            </summary>
            <param name="remoteDirectory">Remote directory to interact with</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns>Directories</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.IO.Files(System.String)">
            <summary>
             Returns a new Files instance
            </summary>
            <param name="remoteFile">Remote file to interact with</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns>Files</returns>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.IO.IO.FileSystem">
            <summary>
             Returns and if not exist, creates the FileSystem instance
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.IO.IO.MediaScanner">
            <summary>
             Returns and if not exist, creates the MediaScanner instance
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.IO.IO.Mount">
            <summary>
             Returns and if not exist, creates the Mount instance
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.IO.DD(System.String,System.String)">
            <summary>
             DD
            </summary>
            <param name="input">InputFile</param>
            <param name="output">OutputFile</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.IO.DD(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
             DD
            </summary>
            <param name="input">InputFile</param>
            <param name="output">OutputFile</param>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/></param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.IO.DD(System.String,System.String,System.String)">
            <summary>
             DD
            <para/>*NOTE*
            <para/>The arg1 and arg2 parameter are NOT auto quoted!
            </summary>
            <param name="input">InputFile</param>
            <param name="output">OutputFile</param>
            <param name="args">Arguments</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.IO.DD(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
             DD
            <para/>*NOTE*
            <para/>The arg1 and arg2 parameter are NOT auto quoted!
            </summary>
            <param name="input">InputFile</param>
            <param name="output">OutputFile</param>
            <param name="args">Arguments</param>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/></param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.IO.FileSystemItem">
            <summary>
             Holds the file/folder data which the directory parser (shell/busybox) could get.
            <para/>This object implements <see cref="T:AndroidCtrl.ADB.Device.IO.IFileSystemItem"/> &amp; <see cref="T:System.Runtime.Serialization.ISerializable"/>
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.FileSystemItem.#ctor(System.String,System.String,AndroidCtrl.ADB.Device.IO.FileType,System.String,System.Int64,System.Int64,System.Int64,System.String,System.String)">
            <summary>
             Creates a new FileSystemItem (MountPoints)
            </summary>
            <param name="name">Item name (test.txt)</param>
            <param name="path">Full item path (/root/sdcard/test/text.txt)</param>
            <param name="id">Item filesystemid</param>
            <param name="type">Item type (.exe,.bat,block_device_file,etc...)</param>
            <param name="size">bytes as long</param>
            <param name="sizeused">Used space *NOTE* ONLY if the item is a mountpoint</param>
            <param name="sizefree">Free space *NOTE* ONLY if the item is a mountpoint</param>
            <param name="sizeuse">Used space in (%) *NOTE* ONLY if the item is a mountpoint</param>
            <param name="sizeblock">Blocksize *NOTE* ONLY if the item is a mountpoint</param>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.FileSystemItem.#ctor(System.String,System.String,System.String,AndroidCtrl.ADB.Device.IO.FileType,System.UInt64,System.String,System.String,System.String,System.String,System.Int64,System.DateTime)">
            <summary>
             Creates a new FileSystemItem (FileSystem)
            </summary>
            <param name="name">Item name (test.txt)</param>
            <param name="path">Full item path (/root/sdcard/test/text.txt)</param>
            <param name="sympath">Item sym path (/root/sdcard/test/text.txt)</param>
            <param name="id">Item filesystemid</param>
            <param name="inode">Item inode number</param>
            <param name="type">Item type (.exe,.bat,block_device_file,etc...)</param>
            <param name="perm">Item permissions (rwxrwx---)</param>
            <param name="owner">Item owner (system,sdcard_rw,etc...)</param>
            <param name="group">Item group (system,sdcard_rw,etc...)</param>
            <param name="size">bytes as long</param>
            <param name="date">DateTime</param>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.FileSystemItem.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
             Deserialize
            </summary>
            <param name="info"><see cref="T:System.Runtime.Serialization.SerializationInfo"/></param>
            <param name="context"><see cref="T:System.Runtime.Serialization.StreamingContext"/></param>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.FileSystemItem.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
             Serialize
            </summary>
            <param name="info"><see cref="T:System.Runtime.Serialization.SerializationInfo"/></param>
            <param name="context"><see cref="T:System.Runtime.Serialization.StreamingContext"/></param>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.FileSystemItem.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
             Serialize
            </summary>
            <param name="info"><see cref="T:System.Runtime.Serialization.SerializationInfo"/></param>
            <param name="context"><see cref="T:System.Runtime.Serialization.StreamingContext"/></param>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.IO.FileSystemItem.Name">
            <summary>
             Holds the item name (text.txt)
            <para>*NOTE* if <see cref="P:AndroidCtrl.ADB.Device.IO.FileSystemItem.ID"/> is <see cref="F:AndroidCtrl.ADB.Device.IO.FileType.Mount"/> this will hold the mountpoint or its ID this depends on the parse mode</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.IO.FileSystemItem.Path">
            <summary>
             Holds the full item path (/root/sdcard/test/text.txt)
            <para>*NOTE* if <see cref="P:AndroidCtrl.ADB.Device.IO.FileSystemItem.ID"/> is <see cref="F:AndroidCtrl.ADB.Device.IO.FileType.Mount"/> this will hold the mountpoint</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.IO.FileSystemItem.SymPath">
            <summary>
             Holds the full item sym path (/root/sdcard/test/text.txt)
            <para>*NOTE* if <see cref="P:AndroidCtrl.ADB.Device.IO.FileSystemItem.ID"/> is <see cref="F:AndroidCtrl.ADB.Device.IO.FileType.Mount"/> this will hold the mountpoint</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.IO.FileSystemItem.ID">
            <summary>
             Holds the item <see cref="T:AndroidCtrl.ADB.Device.IO.FileType"/> (file,folder,etc...)
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.IO.FileSystemItem.INode">
            <summary>
             Holds the item inode number
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.IO.FileSystemItem.Type">
            <summary>
             Holds the item type (.exe,.bat,block_device_file,etc...)
            <para>*NOTE* if <see cref="P:AndroidCtrl.ADB.Device.IO.FileSystemItem.ID"/> is <see cref="F:AndroidCtrl.ADB.Device.IO.FileType.Mount"/> this will hold a FileType.(SDCARD,DIRECTORY,etc.).ToString() for better identification</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.IO.FileSystemItem.Permission">
            <summary>
             Holds the item permissions (rwxrwx---)
            <para>*NOTE* if <see cref="P:AndroidCtrl.ADB.Device.IO.FileSystemItem.ID"/> is <see cref="F:AndroidCtrl.ADB.Device.IO.FileType.Mount"/> this will be null</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.IO.FileSystemItem.Owner">
            <summary>
             Holds the item owner (system,sdcard_rw,etc...)
            <para>*NOTE* if <see cref="P:AndroidCtrl.ADB.Device.IO.FileSystemItem.ID"/> is <see cref="F:AndroidCtrl.ADB.Device.IO.FileType.Mount"/> this will be null</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.IO.FileSystemItem.Group">
            <summary>
             Holds the item group (system,sdcard_rw,etc...)
            <para>*NOTE* if <see cref="P:AndroidCtrl.ADB.Device.IO.FileSystemItem.ID"/> is <see cref="F:AndroidCtrl.ADB.Device.IO.FileType.Mount"/> this will be null</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.IO.FileSystemItem.Size">
            <summary>
             Holds the item size as byte
            <para>*NOTE* if <see cref="P:AndroidCtrl.ADB.Device.IO.FileSystemItem.ID"/> is <see cref="F:AndroidCtrl.ADB.Device.IO.FileType.Mount"/> this will hold the whole mountpoint space</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.IO.FileSystemItem.SizeUsed">
            <summary>
             Holds the item used space
            <para>*NOTE* ONLY if the item is <see cref="F:AndroidCtrl.ADB.Device.IO.FileType.Mount"/> else its -1</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.IO.FileSystemItem.SizeFree">
            <summary>
             Holds the item free space
            <para>*NOTE* ONLY if the item is <see cref="F:AndroidCtrl.ADB.Device.IO.FileType.Mount"/> else its -1</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.IO.FileSystemItem.SizeUse">
            <summary>
             Holds the item used space in (%)
            <para>*NOTE* ONLY if the item is <see cref="F:AndroidCtrl.ADB.Device.IO.FileType.Mount"/> else its null</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.IO.FileSystemItem.BlockSize">
            <summary>
             Holds the item blocksize
            <para>*NOTE* ONLY if the item is <see cref="F:AndroidCtrl.ADB.Device.IO.FileType.Mount"/> else its null</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.IO.FileSystemItem.Date">
            <summary>
             Holds the item date
            <para>*NOTE* if <see cref="P:AndroidCtrl.ADB.Device.IO.FileSystemItem.ID"/> is <see cref="F:AndroidCtrl.ADB.Device.IO.FileType.Mount"/> this will be null</para>
            </summary>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.IO.FileType">
            <summary>
             File types
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.IO.FileType.Directory">
            <summary>
             an directory
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.IO.FileType.File">
            <summary>
             an file
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.IO.FileType.Mount">
            <summary>
             an mountpoint
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.IO.FileType.None">
            <summary>
             no/unknown file
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.IO.FileType.Root">
            <summary>
             the root direcory
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.IO.FileType.SDCard">
            <summary>
             sdcard(0,ext,etc...)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.IO.FileType.SymlinkFile">
            <summary>
             symlink file
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.IO.FileType.SymlinkDirectory">
            <summary>
             symlink directory
            </summary>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.IO.MediaScanMode">
            <summary>
             Media Scan modes
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.IO.MediaScanMode.All">
            <summary>
             all paths
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.IO.MediaScanMode.Media">
            <summary>
             only media paths
            </summary>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.IO.TransferMode">
            <summary>
             ADB transport ids
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.IO.TransferMode.Copy">
            <summary>
             copy
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.IO.TransferMode.Create">
            <summary>
             create
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.IO.TransferMode.Delete">
            <summary>
             copy
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.IO.TransferMode.Move">
            <summary>
             move
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.IO.TransferMode.Pull">
            <summary>
             pull
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.IO.TransferMode.Push">
            <summary>
             push
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.IO.TransferMode.Tar">
            <summary>
             create tar
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.IO.TransferMode.UnTar">
            <summary>
             extract tar
            </summary>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.IO.TransferState">
            <summary>
             ADB transport ids
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.IO.TransferState.Done">
            <summary>
             success
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.IO.TransferState.Error">
            <summary>
             error
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.IO.TransferState.Pending">
            <summary>
             pending
            </summary>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.IO.Files">
            <summary>
             Files is the general class for file interactions on/with the device.
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.Files.#ctor(AndroidCtrl.ADB.IADB,System.String)">
            <summary>
             Files - Constructor
            </summary>
            <param name="adb"><see cref="T:AndroidCtrl.ADB.IADB"/></param>
            <param name="remoteFile"><see cref="T:System.String"/></param>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.IO.Files.Exists">
            <summary>
             Exist check if the file exist
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.IO.Files.Extension">
            <summary>
             Returns the file extension (e.g. .exe, .txt, .rc, etc...)
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.IO.Files.FullName">
            <summary>
             Full filepath
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.IO.Files.Name">
            <summary>
             Returns only the filename without any path
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.IO.Files.Size">
            <summary>
             Returns the filesize in byte
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.Files.Append(System.String)">
            <summary>
             Append the given data
            </summary>
            <param name="data">data to append</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.Files.Append(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
             Append the given data
            </summary>
            <param name="data"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.Files.Chmod(System.String)">
            <summary>
             Sets the given chmod for this file on the device.
            <para/>*NOTE*
            <para/>U can also set an unix chmod (rwxrwxrwx). If u want to set an unix format u must use the full 9 chars.
            <para/>Like this examples: (rw-rwx-wt), (rwsrwsrwt), (rw-r--r--)
            <para/>*HINT*
            <para/>Usefull if u use the directory parser and want to copy some permissions to other files/folders.
            <para/>This function uses ToolBox.ConvertUnixChmod() to convert the unix format to an number.
            </summary>
            <param name="chmod">The chmod to set</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.Files.Chown(System.String,System.String)">
            <summary>
             Own this file with given owner and group id
            <para>*NOTE* This method needs root access on the device</para>
            </summary>
            <param name="owner">New owner</param>
            <param name="group">New group</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.Files.CopyTo(System.String)">
            <summary>
             Copy this file to the given location on the device
            <para/>*NOTE*
            <para/>Usage: /sdcard/ - file to sdcard
            <para/>Usage: /sdcard/myFile.ext - renamed myFile.ext to sdcard
            </summary>
            <param name="destination">Remote destination file/folder path</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.Files.CopyTo(System.String,System.Threading.CancellationToken)">
            <summary>
             Copy this file to the given location on the device
            <para/>*NOTE*
            <para/>Usage: /sdcard/ - file to sdcard
            <para/>Usage: /sdcard/myFile.ext - renamed myFile.ext to sdcard
            </summary>
            <param name="destination">Remote destination file/folder path</param>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/></param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.Files.CopyTo(System.String,AndroidCtrl.ADB.Device.IO.FileTransferEventHandler)">
            <summary>
             Copy this file to the given location on the device
            <para/>*NOTE*
            <para/>Usage: /sdcard/ - file to sdcard
            <para/>Usage: /sdcard/myFile.ext - renamed myFile.ext to sdcard
            </summary>
            <param name="destination">Remote destination file/folder path</param>
            <param name="transferEventHandler"><see cref="T:AndroidCtrl.ADB.Device.IO.FileTransferEventHandler"/></param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.Files.CopyTo(System.String,AndroidCtrl.ADB.Device.IO.FileTransferEventHandler,System.Threading.CancellationToken)">
            <summary>
             Copy this file to the given location on the device
            <para/>*NOTE*
            <para/>Usage: /sdcard/ - file to sdcard
            <para/>Usage: /sdcard/myFile.ext - renamed myFile.ext to sdcard
            </summary>
            <param name="destination">Remote destination file/folder path</param>
            <param name="transferEventHandler"><see cref="T:AndroidCtrl.ADB.Device.IO.FileTransferEventHandler"/></param>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/></param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.Files.CopyTo(AndroidCtrl.IDeviceInfo,System.String)">
            <summary>
             Copy this file to the given <paramref name="destination"/> on the provided <paramref name="device"/>
            <para/>*NOTE*
            <para/>If u created the instance with su=true u also need adbd running as root to get this method work.
            <para>Usage: /sdcard/ - file to sdcard</para>
            <para>Usage: /sdcard/myFile.ext - renamed myFile.ext to sdcard</para>
            </summary>
            <param name="device"><see cref="T:AndroidCtrl.IDeviceInfo"/></param>
            <param name="destination">Remote destination file/folder path</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.Files.CopyTo(AndroidCtrl.IDeviceInfo,System.String,System.Threading.CancellationToken)">
            <summary>
             Copy this file to the given <paramref name="destination"/> on the provided <paramref name="device"/>
            <para/>*NOTE*
            <para/>If u created the instance with su=true u also need adbd running as root to get this method work.
            <para>Usage: /sdcard/ - file to sdcard</para>
            <para>Usage: /sdcard/myFile.ext - renamed myFile.ext to sdcard</para>
            </summary>
            <param name="device"><see cref="T:AndroidCtrl.IDeviceInfo"/></param>
            <param name="destination">Remote destination file/folder path</param>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/></param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.Files.CopyTo(AndroidCtrl.IDeviceInfo,System.String,AndroidCtrl.ADB.Device.IO.FileTransferEventHandler)">
            <summary>
             Copy this file to the given <paramref name="destination"/> on the provided <paramref name="device"/>
            <para/>*NOTE*
            <para/>If u created the instance with su=true u also need adbd running as root to get this method work.
            <para>Usage: /sdcard/ - file to sdcard</para>
            <para>Usage: /sdcard/myFile.ext - renamed myFile.ext to sdcard</para>
            </summary>
            <param name="device"><see cref="T:AndroidCtrl.IDeviceInfo"/></param>
            <param name="destination">Remote destination file/folder path</param>
            <param name="transferEventHandler"><see cref="T:AndroidCtrl.ADB.Device.IO.FileTransferEventHandler"/></param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.Files.CopyTo(AndroidCtrl.IDeviceInfo,System.String,AndroidCtrl.ADB.Device.IO.FileTransferEventHandler,System.Threading.CancellationToken)">
            <summary>
             Copy this file to the given <paramref name="destination"/> on the provided <paramref name="device"/>
            <para/>*NOTE*
            <para/>If u created the instance with su=true u also need adbd running as root to get this method work.
            <para>Usage: /sdcard/ - file to sdcard</para>
            <para>Usage: /sdcard/myFile.ext - renamed myFile.ext to sdcard</para>
            </summary>
            <param name="device"><see cref="T:AndroidCtrl.IDeviceInfo"/></param>
            <param name="destination">Remote destination file/folder path</param>
            <param name="transferEventHandler"><see cref="T:AndroidCtrl.ADB.Device.IO.FileTransferEventHandler"/></param>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/></param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.Files.Create">
            <summary>
             Create an file on the device
            <para/>*NOTE*
            <para/>Overrides an existing file!
            </summary>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.Files.Create(AndroidCtrl.ADB.Device.IO.FileTransferEventHandler)">
            <summary>
             Create an file on the device
            <para/>*NOTE*
            <para/>Overrides an existing file!
            </summary>
            <param name="transferEventHandler"><see cref="T:AndroidCtrl.ADB.Device.IO.FileTransferEventHandler"/></param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.Files.Create(System.String)">
            <summary>
             Create an file on the device
            <para/>*NOTE*
            <para/>Overrides an existing file!
            </summary>
            <param name="content">content to write to the file</param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.Files.Create(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
             Create an file on the device
            <para/>*NOTE*
            <para/>Overrides an existing file!
            </summary>
            <param name="content"><see cref="T:System.Collections.Generic.IEnumerable`1"/> strings to write</param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.Files.Create(System.Collections.Generic.IEnumerable{System.String},AndroidCtrl.ADB.Device.IO.FileTransferEventHandler)">
            <summary>
             Create an file on the device
            <para/>*NOTE*
            <para/>Overrides an existing file!
            </summary>
            <param name="content"><see cref="T:System.Collections.Generic.IEnumerable`1"/> strings to write</param>
            <param name="transferEventHandler"><see cref="T:AndroidCtrl.ADB.Device.IO.FileTransferEventHandler"/></param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.Files.Delete">
            <summary>
             Delete the given file on the device
            </summary>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.Files.Delete(System.Boolean)">
            <summary>
             Delete the given file on the device
            </summary>
            <param name="force">not supported by all android versions</param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.Files.Delete(AndroidCtrl.ADB.Device.IO.FileTransferEventHandler)">
            <summary>
             Delete the given file on the device
            </summary>
            <param name="transferEventHandler"><see cref="T:AndroidCtrl.ADB.Device.IO.FileTransferEventHandler"/></param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.Files.Delete(System.Boolean,AndroidCtrl.ADB.Device.IO.FileTransferEventHandler)">
            <summary>
             Delete the given file on the device
            </summary>
            <param name="force">not supported by all android versions</param>
            <param name="transferEventHandler"><see cref="T:AndroidCtrl.ADB.Device.IO.FileTransferEventHandler"/></param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.IO.Files.Directory">
            <summary>
             Returns the parent directory as Directories
            </summary>
            <returns><see cref="T:AndroidCtrl.ADB.Device.IO.Directories"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.Files.Hash(AndroidCtrl.HashMode)">
            <summary>
             Generate a hash value from the given <see cref="T:AndroidCtrl.HashMode"/>
            <para/>*NOTE*
            <para/>This method require BusyBox!
            </summary>
            <param name="hash"><see cref="T:AndroidCtrl.HashMode"/> default is <see cref="F:AndroidCtrl.HashMode.MD5"/></param>
            <returns><see cref="T:System.String"/> or <see cref="T:null"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.Files.HexDump">
            <summary>
             Gets the hexdump
            <para/>*NOTE*
            <para/>This method require BusyBox!
            </summary>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.Files.HexDump(System.Threading.CancellationToken)">
            <summary>
             Gets the hexdump
            <para/>*NOTE*
            <para/>This method require BusyBox!
            </summary>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/></param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.Files.LinkTo(System.String,System.Boolean)">
            <summary>
             Create an sym-/hardlink on the given position
            </summary>
            <param name="destination">link destination (Must be a file)</param>
            <param name="symlink">true = symlink | false = hardlink</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.Files.MoveTo(System.String)">
            <summary>
             Move this file to the given location on the device
            <para>Usage: /sdcard/ - file to sdcard</para>
            <para>Usage: /sdcard/myFile.ext - renamed myFile.ext to sdcard</para>
            </summary>
            <param name="destination">Remote destination file path</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.Files.MoveTo(System.String,System.Threading.CancellationToken)">
            <summary>
             Move this file to the given location on the device
            <para>Usage: /sdcard/ - file to sdcard</para>
            <para>Usage: /sdcard/myFile.ext - renamed myFile.ext to sdcard</para>
            </summary>
            <param name="destination">Remote destination file path</param>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/></param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.Files.MoveTo(System.String,AndroidCtrl.ADB.Device.IO.FileTransferEventHandler)">
            <summary>
             Move this file to the given location on the device
            <para>Usage: /sdcard/ - file to sdcard</para>
            <para>Usage: /sdcard/myFile.ext - renamed myFile.ext to sdcard</para>
            </summary>
            <param name="destination">Remote destination file path</param>
            <param name="transferEventHandler"><see cref="T:AndroidCtrl.ADB.Device.IO.FileTransferEventHandler"/></param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.Files.MoveTo(System.String,AndroidCtrl.ADB.Device.IO.FileTransferEventHandler,System.Threading.CancellationToken)">
            <summary>
             Move this file to the given location on the device
            <para>Usage: /sdcard/ - file to sdcard</para>
            <para>Usage: /sdcard/myFile.ext - renamed myFile.ext to sdcard</para>
            </summary>
            <param name="destination">Remote destination file path</param>
            <param name="transferEventHandler"><see cref="T:AndroidCtrl.ADB.Device.IO.FileTransferEventHandler"/></param>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/></param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.Files.ParseInfo">
            <summary>
             Parse the <see cref="M:AndroidCtrl.ADB.Device.IO.Files.RawInfo"/> output into a usable class
            </summary>
            <returns><see cref="T:AndroidCtrl.ADB.Device.IO.IFileSystemItem"/> or <see cref="T:null"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.Files.PullTo(System.String)">
            <summary>
             Download this file from the device to the given location
            <para/>*NOTE*
            <para/>If u created the instance with active root u also need adbd running as root to get this method work.
            </summary>
            <param name="destination">Local path</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.Files.PullTo(System.String,System.Threading.CancellationToken)">
            <summary>
             Download this file from the device to the given location
            <para/>*NOTE*
            <para/>If u created the instance with active root u also need adbd running as root to get this method work.
            </summary>
            <param name="destination">Local path</param>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/></param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.Files.PullTo(System.String,AndroidCtrl.ADB.Device.IO.FileTransferEventHandler)">
            <summary>
             Download this file from the device to the given location
            <para/>*NOTE*
            <para/>If u created the instance with active root u also need adbd running as root to get this method work.
            </summary>
            <param name="destination">Local path</param>
            <param name="transferEventHandler"><see cref="T:AndroidCtrl.ADB.Device.IO.FileTransferEventHandler"/></param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.Files.PullTo(System.String,AndroidCtrl.ADB.Device.IO.FileTransferEventHandler,System.Threading.CancellationToken)">
            <summary>
             Download this file from the device to the given location
            <para/>*NOTE*
            <para/>If u created the instance with active root u also need adbd running as root to get this method work.
            </summary>
            <param name="destination">Local path</param>
            <param name="transferEventHandler"><see cref="T:AndroidCtrl.ADB.Device.IO.FileTransferEventHandler"/></param>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/></param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.Files.PushFrom(System.String)">
            <summary>
             Upload this file to the device from the given location
            <para/>*NOTE*
            <para/>If u created the instance with active root u also need adbd running as root to get this method work.
            </summary>
            <param name="source">Local path</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.Files.PushFrom(System.String,System.Threading.CancellationToken)">
            <summary>
             Upload this file to the device from the given location
            <para/>*NOTE*
            <para/>If u created the instance with active root u also need adbd running as root to get this method work.
            </summary>
            <param name="source">Local path</param>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/></param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.Files.PushFrom(System.String,AndroidCtrl.ADB.Device.IO.FileTransferEventHandler)">
            <summary>
             Upload this file to the device from the given location
            <para/>*NOTE*
            <para/>If u created the instance with active root u also need adbd running as root to get this method work.
            </summary>
            <param name="source">Local path</param>
            <param name="transferEventHandler"><see cref="T:AndroidCtrl.ADB.Device.IO.FileTransferEventHandler"/></param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.Files.PushFrom(System.String,AndroidCtrl.ADB.Device.IO.FileTransferEventHandler,System.Threading.CancellationToken)">
            <summary>
             Upload this file to the device from the given location
            <para/>*NOTE*
            <para/>If u created the instance with active root u also need adbd running as root to get this method work.
            </summary>
            <param name="source">Local path</param>
            <param name="transferEventHandler"><see cref="T:AndroidCtrl.ADB.Device.IO.FileTransferEventHandler"/></param>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/></param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.Files.RawInfo">
            <summary>
             Read the raw file informations
            </summary>
            <returns><see cref="T:System.String"/> or <see cref="T:null"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.Files.ReadContent">
            <summary>
             Reads the given file content on the device
            </summary>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.Files.ReadContent(System.Threading.CancellationToken)">
            <summary>
             Reads the given file content on the device
            </summary>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/></param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.Files.Rename(System.String)">
            <summary>
             Rename the given file on the device
            </summary>
            <param name="newName">New filename (not the full path)</param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.Files.ToString">
            <summary>
             return the complete path of this file
            </summary>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.IO.ITransferMessage">
            <summary>
             TransferMessage interface
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.IO.ITransferMessage.DestDeviceID">
            <summary>
             Destionation device serial
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.IO.ITransferMessage.DestPath">
            <summary>
             Destination path
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.IO.ITransferMessage.Mode">
            <summary>
             State
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.IO.ITransferMessage.Progress">
            <summary>
             Progress (%)
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.IO.ITransferMessage.State">
            <summary>
             State
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.IO.ITransferMessage.SrcDeviceID">
            <summary>
             Source device serial
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.IO.ITransferMessage.SrcPath">
            <summary>
             Source path
            </summary>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.IO.TransferMessage">
            <summary>
             TransferMessage
            <para/>This object implements <see cref="T:AndroidCtrl.ADB.Device.IO.ITransferMessage"/>
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.TransferMessage.#ctor(AndroidCtrl.ADB.Device.IO.TransferMode,System.String,System.String,System.String,AndroidCtrl.ADB.Device.IO.TransferState)">
            <summary>
             Creates the TransferMessage Object
            </summary>
            <param name="mode"><see cref="T:AndroidCtrl.ADB.Device.IO.TransferMode"/></param>
            <param name="srcDeviceID">deviceID</param>
            <param name="srcPath">Path (file/folder)</param>
            <param name="destPath">Path (file/folder)</param>
            <param name="state"><see cref="T:AndroidCtrl.ADB.Device.IO.TransferState"/></param>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.TransferMessage.#ctor(AndroidCtrl.ADB.Device.IO.TransferMode,System.String,System.String,System.String,AndroidCtrl.ADB.Device.IO.TransferState,System.Double)">
            <summary>
             Creates the TransferMessage Object
            </summary>
            <param name="mode"><see cref="T:AndroidCtrl.ADB.Device.IO.TransferMode"/></param>
            <param name="srcDeviceID">deviceID</param>
            <param name="srcPath">Path (file/folder)</param>
            <param name="destPath">Path (file/folder)</param>
            <param name="state"><see cref="T:AndroidCtrl.ADB.Device.IO.TransferState"/></param>
            <param name="progress"><see cref="T:System.Double"/></param>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.TransferMessage.#ctor(AndroidCtrl.ADB.Device.IO.TransferMode,System.String,System.String,System.String,System.String,AndroidCtrl.ADB.Device.IO.TransferState)">
            <summary>
             Creates the TransferMessage Object
            </summary>
            <param name="mode"><see cref="T:AndroidCtrl.ADB.Device.IO.TransferMode"/></param>
            <param name="srcDeviceID">deviceID</param>
            <param name="srcPath">Path (file/folder)</param>
            <param name="destDeviceID">deviceID</param>
            <param name="destPath">Path (file/folder)</param>
            <param name="state"><see cref="T:AndroidCtrl.ADB.Device.IO.TransferState"/></param>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.TransferMessage.#ctor(AndroidCtrl.ADB.Device.IO.TransferMode,System.String,System.String,System.String,System.String,AndroidCtrl.ADB.Device.IO.TransferState,System.Double)">
            <summary>
             Creates the TransferMessage Object
            </summary>
            <param name="mode"><see cref="T:AndroidCtrl.ADB.Device.IO.TransferMode"/></param>
            <param name="srcDeviceID">deviceID</param>
            <param name="srcPath">Path (file/folder)</param>
            <param name="destDeviceID">deviceID</param>
            <param name="destPath">Path (file/folder)</param>
            <param name="state"><see cref="T:AndroidCtrl.ADB.Device.IO.TransferState"/></param>
            <param name="progress"><see cref="T:System.Double"/></param>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.TransferMessage.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
             Deserialize
            </summary>
            <param name="info"><see cref="T:System.Runtime.Serialization.SerializationInfo"/></param>
            <param name="context"><see cref="T:System.Runtime.Serialization.StreamingContext"/></param>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.TransferMessage.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
             Serialize
            </summary>
            <param name="info"><see cref="T:System.Runtime.Serialization.SerializationInfo"/></param>
            <param name="context"><see cref="T:System.Runtime.Serialization.StreamingContext"/></param>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.TransferMessage.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
             Serialize
            </summary>
            <param name="info"><see cref="T:System.Runtime.Serialization.SerializationInfo"/></param>
            <param name="context"><see cref="T:System.Runtime.Serialization.StreamingContext"/></param>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.IO.TransferMessage.DestDeviceID">
            <summary>
             Destination device serial
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.IO.TransferMessage.DestPath">
            <summary>
             Destination path
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.IO.TransferMessage.Mode">
            <summary>
             State
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.IO.TransferMessage.Progress">
            <summary>
             Progress (%)
            <para/>*NOTE*
            <para/>Returns -1 by default
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.IO.TransferMessage.State">
            <summary>
             State
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.IO.TransferMessage.SrcDeviceID">
            <summary>
             Source device serial
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.IO.TransferMessage.SrcPath">
            <summary>
             Source path
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.TransferMessage.UpdateProgress(System.Double)">
            <summary>
             Updates the <see cref="P:AndroidCtrl.ADB.Device.IO.TransferMessage.Progress"/>
            </summary>
            <param name="current"><see cref="T:System.Double"/> can't be greater as 100 (%)</param>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.TransferMessage.UpdateProgress(System.Int64,System.Int64)">
            <summary>
             Updates the <see cref="P:AndroidCtrl.ADB.Device.IO.TransferMessage.Progress"/>
            </summary>
            <param name="current"><see cref="T:System.Int64"/></param>
            <param name="done"><see cref="T:System.Int64"/></param>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.TransferMessage.UpdateProgress(System.Int64,System.UInt64)">
            <summary>
             Updates the <see cref="P:AndroidCtrl.ADB.Device.IO.TransferMessage.Progress"/>
            </summary>
            <param name="current"><see cref="T:System.Int64"/></param>
            <param name="done"><see cref="T:System.UInt64"/></param>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.TransferMessage.UpdateState(AndroidCtrl.ADB.Device.IO.TransferState)">
            <summary>
             Updates the <see cref="P:AndroidCtrl.ADB.Device.IO.TransferMessage.State"/>
            </summary>
            <param name="state"><see cref="T:AndroidCtrl.ADB.Device.IO.TransferState"/></param>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.IO.MediaScanner">
            <summary>
             Manage the Android MediaScanner
            <para/>*NOTE*
            <para/>This class gives u access to the "MediaScanner", so u can update the Android system, manually, after file interactions.
            <para/>This is needed if u, for example transfer files via ADB push to any "Media" storage. Because, the files aren't visible on MTP/PTP nor in some "Media Storage" related apps.
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.MediaScanner.AddDirectory(System.String)">
            <summary>
             Adds the given directory to the "Directories"
            </summary>
            <param name="path">directory path</param>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.IO.MediaScanner.Directories">
            <summary>
             Returns the list of media directories
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.MediaScanner.RemoveDirectory(System.String)">
            <summary>
             Removes, if exists, the given directory from the "Directories"
            </summary>
            <param name="path">directory path</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.MediaScanner.CreateScanList(System.String,AndroidCtrl.ADB.Device.IO.MediaScanMode)">
            <summary>
             Scans the given directory path for files and add each filepath a List&lt;string&gt; (recursive)
            </summary>
            <param name="remoteDirectory">remote directory "/some/directoy/"</param>
            <param name="mode"><see cref="T:AndroidCtrl.ADB.Device.IO.MediaScanMode"/></param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Collections.Generic.IList`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.MediaScanner.CreateScanList(System.String,AndroidCtrl.ADB.Device.IO.MediaScanMode,System.Threading.CancellationToken)">
            <summary>
             Scans the given directory path for files and add each filepath a List&lt;string&gt; (recursive)
            </summary>
            <param name="remoteDirectory">remote directory "/some/directoy/"</param>
            <param name="mode"><see cref="T:AndroidCtrl.ADB.Device.IO.MediaScanMode"/></param>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/></param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Collections.Generic.IList`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.MediaScanner.CreateScanList(System.String,System.Collections.Generic.IList{System.String},AndroidCtrl.ADB.Device.IO.MediaScanMode)">
            <summary>
             Scans the given directory path for files and add each filepath to the List&lt;string&gt; (recursive)
            </summary>
            <param name="remoteDirectory">remote directory "/some/directoy/"</param>
            <param name="files"><see cref="T:System.Collections.Generic.IList`1"/></param>
            <param name="mode"><see cref="T:AndroidCtrl.ADB.Device.IO.MediaScanMode"/></param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Collections.Generic.IList`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.MediaScanner.CreateScanList(System.String,System.Collections.Generic.IList{System.String},AndroidCtrl.ADB.Device.IO.MediaScanMode,System.Threading.CancellationToken)">
            <summary>
             Scans the given directory path for files and add each filepath to the List&lt;string&gt; (recursive)
            </summary>
            <param name="remoteDirectory">remote directory "/some/directoy/"</param>
            <param name="files"><see cref="T:System.Collections.Generic.IList`1"/></param>
            <param name="mode"><see cref="T:AndroidCtrl.ADB.Device.IO.MediaScanMode"/></param>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/></param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Collections.Generic.IList`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.MediaScanner.ScanFile(System.String,AndroidCtrl.ADB.Device.IO.MediaScanMode)">
            <summary>
             Force the "MediaScanner" to scan the given filepath
            </summary>
            <param name="remotePath">remote filepath "/some/file.ext"</param>
            <param name="mode"><see cref="T:AndroidCtrl.ADB.Device.IO.MediaScanMode"/></param>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.MediaScanner.ScanFile(System.Collections.Generic.IEnumerable{System.String},AndroidCtrl.ADB.Device.IO.MediaScanMode)">
            <summary>
             Force the "MediaScanner" to scan the given filepaths
            </summary>
            <param name="remotePaths">remote filepath list</param>
            <param name="mode"><see cref="T:AndroidCtrl.ADB.Device.IO.MediaScanMode"/></param>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.MediaScanner.ScanFile(System.Collections.Generic.IEnumerable{System.String},AndroidCtrl.ADB.Device.IO.MediaScanMode,System.Threading.CancellationToken)">
            <summary>
             Force the "MediaScanner" to scan the given filepaths
            </summary>
            <param name="remotePaths">remote filepath list</param>
            <param name="mode"><see cref="T:AndroidCtrl.ADB.Device.IO.MediaScanMode"/></param>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/></param>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.MediaScanner.ScanDirectory(System.String,AndroidCtrl.ADB.Device.IO.MediaScanMode)">
            <summary>
             Force the "MediaScanner" to scan all existing files inside the given directory path (recursive)
            </summary>
            <param name="remotePath">remote directory "/some/directoy/"</param>
            <param name="mode"><see cref="T:AndroidCtrl.ADB.Device.IO.MediaScanMode"/></param>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.MediaScanner.ScanDirectory(System.String,AndroidCtrl.ADB.Device.IO.MediaScanMode,System.Threading.CancellationToken)">
            <summary>
             Force the "MediaScanner" to scan all existing files inside the given directory path (recursive)
            </summary>
            <param name="remotePath">remote directory "/some/directoy/"</param>
            <param name="mode"><see cref="T:AndroidCtrl.ADB.Device.IO.MediaScanMode"/></param>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/></param>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.MediaScanner.ScanDirectory(System.Collections.Generic.IEnumerable{System.String},AndroidCtrl.ADB.Device.IO.MediaScanMode)">
            <summary>
             Force the "MediaScanner" to scan all existing files inside the given directory paths (recursive)
            <para/>*NOTE* if one "broadcast" fails, the method will return FALSE
            </summary>
            <param name="remotePaths">remote directory list</param>
            <param name="mode"><see cref="T:AndroidCtrl.ADB.Device.IO.MediaScanMode"/></param>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.MediaScanner.ScanDirectory(System.Collections.Generic.IEnumerable{System.String},AndroidCtrl.ADB.Device.IO.MediaScanMode,System.Threading.CancellationToken)">
            <summary>
             Force the "MediaScanner" to scan all existing files inside the given directory paths (recursive)
            <para/>*NOTE* if one "broadcast" fails, the method will return FALSE
            </summary>
            <param name="remotePaths">remote directory list</param>
            <param name="mode"><see cref="T:AndroidCtrl.ADB.Device.IO.MediaScanMode"/></param>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/></param>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.MediaScanner.ScanObject(AndroidCtrl.ADB.Device.IO.ITransferMessage,AndroidCtrl.ADB.Device.IO.MediaScanMode)">
            <summary>
             Force the "MediaScanner" to scan the given filepath
            </summary>
            <param name="obj"><see cref="T:AndroidCtrl.ADB.Device.IO.ITransferMessage"/></param>
            <param name="mode"><see cref="T:AndroidCtrl.ADB.Device.IO.MediaScanMode"/></param>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.IO.DirectoryParserEventHandler">
            <summary>
             This event will be raised by some directory parser
            </summary>
            <param name="sender">device ID <see cref="T:System.String"/></param>
            <param name="e"><see cref="T:AndroidCtrl.ADB.Device.IO.DirectoryParserEventArgs"/></param>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.IO.DirectoryParserEventArgs">
            <summary>
             DirectoryParserEventArgs
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.IO.DirectoryParserEventArgs.DeviceID">
            <summary>
             Returns the device ID
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.IO.DirectoryParserEventArgs.Element">
            <summary>
             Returns the parsed filesystem item
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.DirectoryParserEventArgs.#ctor(System.String,AndroidCtrl.ADB.Device.IO.IFileSystemItem)">
            <summary>
             DirectoryParserEventArgs
            </summary>
            <param name="deviceID">device ID <see cref="T:System.String"/></param>
            <param name="element"><see cref="T:AndroidCtrl.ADB.Device.IO.IFileSystemItem"/></param>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.IO.FileTransferEventHandler">
            <summary>
             This event will be raised by file/folder transfers
            </summary>
            <param name="sender">device ID as <see cref="T:System.String"/></param>
            <param name="e"><see cref="T:AndroidCtrl.ADB.Device.IO.FileTransferEventArgs"/></param>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.IO.FileTransferEventArgs">
            <summary>
             FileTransferEventArgs
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.IO.FileTransferEventArgs.DeviceID">
            <summary>
             Returns the device ID
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.IO.FileTransferEventArgs.Message">
            <summary>
             Returns the transfer info
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.FileTransferEventArgs.#ctor(System.String,AndroidCtrl.ADB.Device.IO.ITransferMessage)">
            <summary>
             FileTransferEventArgs
            </summary>
            <param name="deviceID">device ID <see cref="T:System.String"/></param>
            <param name="msg"><see cref="T:AndroidCtrl.ADB.Device.IO.ITransferMessage"/></param>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.IO.FileSystem">
            <summary>
             FileSystem is the general class to read/parse the filesystem overview from the device.
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.FileSystem.Parse">
            <summary>
             Parse the Read output into a human readable class
            </summary>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.FileSystem.Parse(System.Threading.CancellationToken)">
            <summary>
             Parse the Read output into a human readable class
            </summary>
            <param name="cancellationToken">CancellationToken</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.FileSystem.Parse(AndroidCtrl.ADB.Device.IO.DirectoryParserEventHandler)">
            <summary>
             Parse the Read output into a human readable class
            </summary>
            <param name="callback">CallbackDirectoryParser</param>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.FileSystem.Parse(AndroidCtrl.ADB.Device.IO.DirectoryParserEventHandler,System.Threading.CancellationToken)">
            <summary>
             Parse the Read output into a human readable class
            </summary>
            <param name="callback">CallbackDirectoryParser</param>
            <param name="cancellationToken">CancellationToken</param>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.FileSystem.ParseItem(System.String)">
            <summary>
             Parse the <see cref="M:AndroidCtrl.ADB.Device.IO.FileSystem.ReadRaw"/> output into a human readable class
            </summary>
            <param name="rawItem">the raw item from the shell output</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:AndroidCtrl.ADB.Device.IO.IFileSystemItem"/> or <see cref="T:null"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.FileSystem.ReadRaw">
            <summary>
             Read the filesystem overview on from the device (shell mode = df), (busybox mode = df -k)
            </summary>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.FileSystem.ReadRaw(System.Threading.CancellationToken)">
            <summary>
             Read the filesystem overview on from the device (shell mode = df), (busybox mode = df -k)
            </summary>
            <param name="cancellationToken">CancellationToken</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.FileSystem.ParseSize(System.String,System.Boolean)">
            <summary>
             Parse the given string to an long based on bytes
            <para/>*NOTE*
            <para/>This parser will check for common df endings like: K,M,G,T,P,E,Z,Y and calculate the byte size based on 1000 or 1024
            <para/>If none of the mentioned endings are found, the default block-size is mostly 1024, so the method will use the hardcoded 1024 to calculate the byte size.
            </summary>
            <param name="size"><see cref="T:System.String"/> like 102546, 10,4M, 1.9G, etc.</param>
            <param name="base1024"><see cref="T:System.Boolean"/> if True, 1024 will be use to calculate a unit, otherwise 1000 is used</param>
            <returns><see cref="T:System.Int64"/></returns>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.IO.Directories">
            <summary>
             Directories is the general class for directory interactions on/with the device.
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.Directories.#ctor(AndroidCtrl.ADB.IADB,System.String)">
            <summary>
             Directories - Constructor
            </summary>
            <param name="adb">IADB</param>
            <param name="remoteDirectory">string</param>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.IO.Directories.Exists">
            <summary>
             Check if the directory exist
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.IO.Directories.FullName">
            <summary>
             Full directory path
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.IO.Directories.Name">
            <summary>
             Returns only the directoryname without any path
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.IO.Directories.Parent">
            <summary>
             Returns the parent directory as Directories or if no parent exists null
            </summary>
            <returns><see cref="T:AndroidCtrl.ADB.Device.IO.Directories"/></returns>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.IO.Directories.Size">
            <summary>
             Returns the directorysize in byte
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.Directories.Chmod(System.String)">
            <summary>
             Sets the given chmod for this directory on the device.
            <para/>*NOTE*
            <para/>U can also set an unix chmod (rwxrwxrwx). If u want to set an unix format u must use the full 9 chars.
            <para/>Like this examples: (rw-rwx-wt), (rwsrwsrwt), (rw-r--r--)
            <para/>*HINT*
            <para/>Usefull if u use the directory parser and want to copy some permissions to other files/folders.
            <para/>This function uses ToolBox.ConvertUnixChmod() to convert the unix format to an number.
            </summary>
            <param name="chmod">The chmod to set</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.Directories.Chown(System.String,System.String,System.Boolean)">
            <summary>
             Own this directory with given owner and group id
            <para>*NOTE* This method needs root access on the device</para>
            </summary>
            <param name="owner">New owner</param>
            <param name="group">New group</param>
            <param name="recursive">Recursive (by default true)</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.Directories.CopyTo(System.String)">
            <summary>
             Copy this directory to the given location on the device
            <para/>*NOTE*
            <para/>Usage: /sdcard/ - content to sdcard
            <para/>Usage: /sdcard/myFolder/ - content to myFolder on sdcard
            </summary>
            <param name="destination">Remote destination file/folder path</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.Directories.CopyTo(System.String,System.Threading.CancellationToken)">
            <summary>
             Copy this directory to the given location on the device
            <para/>*NOTE*
            <para/>Usage: /sdcard/ - content to sdcard
            <para/>Usage: /sdcard/myFolder/ - content to myFolder on sdcard
            </summary>
            <param name="destination">Remote destination file/folder path</param>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/></param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.Directories.CopyTo(System.String,AndroidCtrl.ADB.Device.IO.FileTransferEventHandler)">
            <summary>
             Copy this directory to the given location on the device
            <para/>*NOTE*
            <para/>Usage: /sdcard/ - content to sdcard
            <para/>Usage: /sdcard/myFolder/ - content to myFolder on sdcard
            </summary>
            <param name="destination">Remote destination file/folder path</param>
            <param name="transferEventHandler"><see cref="T:AndroidCtrl.ADB.Device.IO.FileTransferEventHandler"/></param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.Directories.CopyTo(System.String,AndroidCtrl.ADB.Device.IO.FileTransferEventHandler,System.Threading.CancellationToken)">
            <summary>
             Copy this directory to the given location on the device
            <para/>*NOTE*
            <para/>Usage: /sdcard/ - content to sdcard
            <para/>Usage: /sdcard/myFolder/ - content to myFolder on sdcard
            </summary>
            <param name="destination">Remote destination file/folder path</param>
            <param name="transferEventHandler"><see cref="T:AndroidCtrl.ADB.Device.IO.FileTransferEventHandler"/></param>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/></param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.Directories.CopyTo(AndroidCtrl.IDeviceInfo,System.String)">
            <summary>
             Copy this directory to the given <paramref name="destination"/> on the provided <paramref name="device"/>
            <para/>*NOTE*
            <para/>If u created the instance with su=true u also need adbd running as root to get this method work.
            <para/>Usage: /sdcard/ - content to sdcard
            <para/>Usage: /sdcard/myFolder/ - content to myFolder on sdcard
            </summary>
            <param name="device"><see cref="T:AndroidCtrl.IDeviceInfo"/></param>
            <param name="destination">Remote destination file/folder path</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.Directories.CopyTo(AndroidCtrl.IDeviceInfo,System.String,System.Threading.CancellationToken)">
            <summary>
             Copy this directory to the given <paramref name="destination"/> on the provided <paramref name="device"/>
            <para/>*NOTE*
            <para/>If u created the instance with su=true u also need adbd running as root to get this method work.
            <para/>Usage: /sdcard/ - content to sdcard
            <para/>Usage: /sdcard/myFolder/ - content to myFolder on sdcard
            </summary>
            <param name="device"><see cref="T:AndroidCtrl.IDeviceInfo"/></param>
            <param name="destination">Remote destination file/folder path</param>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/></param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.Directories.CopyTo(AndroidCtrl.IDeviceInfo,System.String,AndroidCtrl.ADB.Device.IO.FileTransferEventHandler)">
            <summary>
             Copy this directory to the given <paramref name="destination"/> on the provided <paramref name="device"/>
            <para/>*NOTE*
            <para/>If u created the instance with su=true u also need adbd running as root to get this method work.
            <para/>Usage: /sdcard/ - content to sdcard
            <para/>Usage: /sdcard/myFolder/ - content to myFolder on sdcard
            </summary>
            <param name="device"><see cref="T:AndroidCtrl.IDeviceInfo"/></param>
            <param name="destination">Remote destination file/folder path</param>
            <param name="transferEventHandler"><see cref="T:AndroidCtrl.ADB.Device.IO.FileTransferEventHandler"/></param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.Directories.CopyTo(AndroidCtrl.IDeviceInfo,System.String,AndroidCtrl.ADB.Device.IO.FileTransferEventHandler,System.Threading.CancellationToken)">
            <summary>
             Copy this directory to the given <paramref name="destination"/> on the provided <paramref name="device"/>
            <para/>*NOTE*
            <para/>If u created the instance with su=true u also need adbd running as root to get this method work.
            <para/>Usage: /sdcard/ - content to sdcard
            <para/>Usage: /sdcard/myFolder/ - content to myFolder on sdcard
            </summary>
            <param name="device"><see cref="T:AndroidCtrl.IDeviceInfo"/></param>
            <param name="destination">Remote destination file/folder path</param>
            <param name="transferEventHandler"><see cref="T:AndroidCtrl.ADB.Device.IO.FileTransferEventHandler"/></param>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/></param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.Directories.Create">
            <summary>
             Creates an empty directory on the device
            </summary>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.Directories.Create(System.Boolean)">
            <summary>
             Creates an empty directory on the device
            </summary>
            <param name="createParent">create parent directories also</param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.Directories.Create(AndroidCtrl.ADB.Device.IO.FileTransferEventHandler)">
            <summary>
             Creates an empty directory on the device
            </summary>
            <param name="transferEventHandler"><see cref="T:AndroidCtrl.ADB.Device.IO.FileTransferEventHandler"/></param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.Directories.Create(System.Boolean,AndroidCtrl.ADB.Device.IO.FileTransferEventHandler)">
            <summary>
             Creates an empty directory and it's parents (if <paramref name="createParent"/> is set to true) on the device
            </summary>
            <param name="createParent">create parent directories also</param>
            <param name="transferEventHandler"><see cref="T:AndroidCtrl.ADB.Device.IO.FileTransferEventHandler"/></param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.Directories.Delete">
            <summary>
             Delete the given folder (recursive)
            </summary>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.Directories.Delete(System.Boolean)">
            <summary>
             Delete the given folder (recursive)
            </summary>
            <param name="force">not supported by all android versions</param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.Directories.Delete(System.Threading.CancellationToken)">
            <summary>
             Delete the given folder (recursive)
            </summary>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/></param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.Directories.Delete(AndroidCtrl.ADB.Device.IO.FileTransferEventHandler)">
            <summary>
             Delete the given folder (recursive)
            </summary>
            <param name="transferEventHandler"><see cref="T:AndroidCtrl.ADB.Device.IO.FileTransferEventHandler"/></param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.Directories.Delete(AndroidCtrl.ADB.Device.IO.FileTransferEventHandler,System.Threading.CancellationToken)">
            <summary>
             Delete the given folder (recursive)
            </summary>
            <param name="transferEventHandler"><see cref="T:AndroidCtrl.ADB.Device.IO.FileTransferEventHandler"/></param>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/></param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.Directories.Delete(System.Boolean,System.Threading.CancellationToken)">
            <summary>
             Delete the given folder (recursive)
            </summary>
            <param name="force">not supported by all android versions</param>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/></param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.Directories.Delete(System.Boolean,AndroidCtrl.ADB.Device.IO.FileTransferEventHandler)">
            <summary>
             Delete the given folder (recursive)
            </summary>
            <param name="force">not supported by all android versions</param>
            <param name="transferEventHandler"><see cref="T:AndroidCtrl.ADB.Device.IO.FileTransferEventHandler"/></param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.Directories.Delete(System.Boolean,AndroidCtrl.ADB.Device.IO.FileTransferEventHandler,System.Threading.CancellationToken)">
            <summary>
             Delete the given folder (recursive)
            </summary>
            <param name="force">not supported by all android versions</param>
            <param name="transferEventHandler"><see cref="T:AndroidCtrl.ADB.Device.IO.FileTransferEventHandler"/></param>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/></param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.Directories.GetDirectories">
            <summary>
             Returns only the sym-/directories in this directory as a parsed <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            </summary>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.Directories.GetDirectories(System.Threading.CancellationToken)">
            <summary>
             Returns only the sym-/directories in this directory as a parsed <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            </summary>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/></param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.Directories.GetDirectories(AndroidCtrl.ADB.Device.IO.DirectoryParserEventHandler)">
            <summary>
             Returns only the sym-/directories in this directory as a parsed <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            </summary>
            <param name="callback"><see cref="T:AndroidCtrl.ADB.Device.IO.DirectoryParserEventHandler"/></param>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.Directories.GetDirectories(AndroidCtrl.ADB.Device.IO.DirectoryParserEventHandler,System.Threading.CancellationToken)">
            <summary>
             Returns only the sym-/directories in this directory as a parsed <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            </summary>
            <param name="callback"><see cref="T:AndroidCtrl.ADB.Device.IO.DirectoryParserEventHandler"/></param>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/></param>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.Directories.GetDirectoriesRaw">
            <summary>
             Returns only the sym-/directories in this directory as a <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            </summary>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.Directories.GetDirectoriesRaw(System.Threading.CancellationToken)">
            <summary>
             Returns only the sym-/directories in this directory as a <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            </summary>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/></param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.Directories.GetFiles">
            <summary>
             Returns only the sym-/files in this directory as a parsed <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            </summary>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.Directories.GetFiles(System.Threading.CancellationToken)">
            <summary>
             Returns only the sym-/files in this directory as a parsed <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            </summary>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/></param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.Directories.GetFiles(AndroidCtrl.ADB.Device.IO.DirectoryParserEventHandler)">
            <summary>
             Returns only the sym-/files in this directory as a parsed <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            </summary>
            <param name="callback"><see cref="T:AndroidCtrl.ADB.Device.IO.DirectoryParserEventHandler"/></param>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.Directories.GetFiles(AndroidCtrl.ADB.Device.IO.DirectoryParserEventHandler,System.Threading.CancellationToken)">
            <summary>
             Returns only the sym-/files in this directory as a parsed <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            </summary>
            <param name="callback"><see cref="T:AndroidCtrl.ADB.Device.IO.DirectoryParserEventHandler"/></param>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/></param>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.Directories.GetFilesRaw">
            <summary>
             Returns only the sym-/files in this directory as a <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            </summary>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.Directories.GetFilesRaw(System.Threading.CancellationToken)">
            <summary>
             Returns only the sym-/files in this directory as a <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            </summary>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/></param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.Directories.LinkTo(System.String,System.Boolean)">
            <summary>
             Create an sym-/hardlink on the given position
            </summary>
            <param name="destination">link destination (Must be a directory)</param>
            <param name="symlink">true = symlink | false = hardlink</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.Directories.MoveTo(System.String)">
            <summary>
             Move this directory to the given location on the device
            <para>Usage: /sdcard/ - content to sdcard</para>
            <para>Usage: /sdcard/myFolder/ - content to myFolder on sdcard</para>
            </summary>
            <param name="destination">Remote destination folder path</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.Directories.MoveTo(System.String,System.Threading.CancellationToken)">
            <summary>
             Move this directory to the given location on the device
            <para>Usage: /sdcard/ - content to sdcard</para>
            <para>Usage: /sdcard/myFolder/ - content to myFolder on sdcard</para>
            </summary>
            <param name="destination">Remote destination folder path</param>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/></param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.Directories.MoveTo(System.String,AndroidCtrl.ADB.Device.IO.FileTransferEventHandler)">
            <summary>
             Move this directory to the given location on the device
            <para>Usage: /sdcard/ - content to sdcard</para>
            <para>Usage: /sdcard/myFolder/ - content to myFolder on sdcard</para>
            </summary>
            <param name="destination">Remote destination folder path</param>
            <param name="transferEventHandler"><see cref="T:AndroidCtrl.ADB.Device.IO.FileTransferEventHandler"/></param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.Directories.MoveTo(System.String,AndroidCtrl.ADB.Device.IO.FileTransferEventHandler,System.Threading.CancellationToken)">
            <summary>
             Move this directory to the given location on the device
            <para>Usage: /sdcard/ - content to sdcard</para>
            <para>Usage: /sdcard/myFolder/ - content to myFolder on sdcard</para>
            </summary>
            <param name="destination">Remote destination folder path</param>
            <param name="transferEventHandler"><see cref="T:AndroidCtrl.ADB.Device.IO.FileTransferEventHandler"/></param>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/></param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.Directories.Parse">
            <summary>
             Parse the <see cref="M:AndroidCtrl.ADB.Device.IO.Directories.ReadRaw"/> output into usable classes
            </summary>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.Directories.Parse(System.Threading.CancellationToken)">
            <summary>
             Parse the <see cref="M:AndroidCtrl.ADB.Device.IO.Directories.ReadRaw"/> output into usable classes
            </summary>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/></param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.Directories.Parse(AndroidCtrl.ADB.Device.IO.DirectoryParserEventHandler)">
            <summary>
             Parse the <see cref="M:AndroidCtrl.ADB.Device.IO.Directories.ReadRaw"/> output into usable classes
            </summary>
            <param name="callback"><see cref="T:AndroidCtrl.ADB.Device.IO.DirectoryParserEventHandler"/></param>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.Directories.Parse(AndroidCtrl.ADB.Device.IO.DirectoryParserEventHandler,System.Threading.CancellationToken)">
            <summary>
             Parse the <see cref="M:AndroidCtrl.ADB.Device.IO.Directories.ReadRaw"/> output into usable classes
            </summary>
            <param name="callback"><see cref="T:AndroidCtrl.ADB.Device.IO.DirectoryParserEventHandler"/></param>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/></param>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.Directories.ParseItem(System.String)">
            <summary>
             Parse a single raw string item into a usable class
            </summary>
            <param name="rawItem">the raw item from the shell output</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:AndroidCtrl.ADB.Device.IO.IFileSystemItem"/> or <see cref="T:null"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.Directories.ParseInfo">
            <summary>
             Parse the <see cref="M:AndroidCtrl.ADB.Device.IO.Directories.RawInfo"/> output into a usable class
            </summary>
            <returns><see cref="T:AndroidCtrl.ADB.Device.IO.IFileSystemItem"/> or <see cref="T:null"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.Directories.PullTo(System.String)">
            <summary>
             Download this directory from the device to the given location
            <para/>*NOTE*
            <para/>If u created the instance with su=true u also need adbd running as root to get this method work.
            <para/>usage: C:\\ - content from this folder to C:\\
            <para/>usage: C:\\tmp\\ - content from this folder to "tmp" on C:\\
            </summary>
            <param name="destination">Local path</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.Directories.PullTo(System.String,System.Threading.CancellationToken)">
            <summary>
             Download this directory from the device to the given location
            <para/>*NOTE*
            <para/>If u created the instance with su=true u also need adbd running as root to get this method work.
            <para/>usage: C:\\ - content from this folder to C:\\
            <para/>usage: C:\\tmp\\ - content from this folder to "tmp" on C:\\
            </summary>
            <param name="destination">Local path</param>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/></param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.Directories.PullTo(System.String,AndroidCtrl.ADB.Device.IO.FileTransferEventHandler)">
            <summary>
             Download this directory from the device to the given location
            <para/>*NOTE*
            <para/>If u created the instance with su=true u also need adbd running as root to get this method work.
            <para/>usage: C:\\ - content from this folder to C:\\
            <para/>usage: C:\\tmp\\ - content from this folder to "tmp" on C:\\
            </summary>
            <param name="destination">Local path</param>
            <param name="transferEventHandler"><see cref="T:AndroidCtrl.ADB.Device.IO.FileTransferEventHandler"/></param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.Directories.PullTo(System.String,AndroidCtrl.ADB.Device.IO.FileTransferEventHandler,System.Threading.CancellationToken)">
            <summary>
             Download this directory from the device to the given location
            <para/>*NOTE*
            <para/>If u created the instance with su=true u also need adbd running as root to get this method work.
            <para/>usage: C:\\ - content from this folder to C:\\
            <para/>usage: C:\\tmp\\ - content from this folder to "tmp" on C:\\
            </summary>
            <param name="destination">Local path</param>
            <param name="transferEventHandler"><see cref="T:AndroidCtrl.ADB.Device.IO.FileTransferEventHandler"/></param>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/></param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.Directories.PushFrom(System.String)">
            <summary>
             Upload this directory to the device from the given location
            <para/>*NOTE*
            <para/>If u created the instance with su=true u also need adbd running as root to get this method work.
            <para/>usage: C:\\tmp\\ - content from tmp to this folder
            </summary>
            <param name="source">Local path</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.Directories.PushFrom(System.String,System.Threading.CancellationToken)">
            <summary>
             Upload this directory to the device from the given location
            <para/>*NOTE*
            <para/>If u created the instance with su=true u also need adbd running as root to get this method work.
            <para/>usage: C:\\tmp\\ - content from tmp to this folder
            </summary>
            <param name="source">Local path</param>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/></param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.Directories.PushFrom(System.String,AndroidCtrl.ADB.Device.IO.FileTransferEventHandler)">
            <summary>
             Upload this directory to the device from the given location
            <para/>*NOTE*
            <para/>If u created the instance with su=true u also need adbd running as root to get this method work.
            <para/>usage: C:\\tmp\\ - content from tmp to this folder
            </summary>
            <param name="source">Local path</param>
            <param name="transferEventHandler"><see cref="T:AndroidCtrl.ADB.Device.IO.FileTransferEventHandler"/></param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.Directories.PushFrom(System.String,AndroidCtrl.ADB.Device.IO.FileTransferEventHandler,System.Threading.CancellationToken)">
            <summary>
             Upload this directory to the device from the given location
            <para/>*NOTE*
            <para/>If u created the instance with su=true u also need adbd running as root to get this method work.
            <para/>usage: C:\\tmp\\ - content from tmp to this folder
            </summary>
            <param name="source">Local path</param>
            <param name="transferEventHandler"><see cref="T:AndroidCtrl.ADB.Device.IO.FileTransferEventHandler"/></param>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/></param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.Directories.RawInfo">
            <summary>
             Read the raw directory informations
            </summary>
            <returns><see cref="T:System.String"/> or <see cref="T:null"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.Directories.ReadRaw">
            <summary>
             Read the given directory and return a raw List string
            </summary>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.Directories.ReadRaw(System.Threading.CancellationToken)">
            <summary>
             Read the given directory and return a raw List string
            </summary>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/></param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.Directories.Rename(System.String)">
            <summary>
             Rename the given directory on the device
            </summary>
            <param name="newName">New directoryname (not the full path)</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.Directories.ToString">
            <summary>
             return the complete path of this directory
            </summary>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.IO.Mount">
            <summary>
             Mount is the general class to un-/mount the filesystem or parts of it, on the device.
             <para>*NOTE* This class needs root access on the device</para>
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.Mount.IsRootRW">
            <summary>
             IsRootRW checks if rootfs and /system is mounted as read/write or not
            </summary>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.Mount.IsReadWrite(System.String)">
            <summary>
             IsReadWrite checks if the given id is mounted as read/write or not
            </summary>
            <param name="id">id to mount e.g. rootfs or /system</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.Mount.Loop(System.String,System.String,System.String)">
            <summary>
             Mount the given source path as loop device to the given destination
            <para/>*NOTE*
            <para/>The device kernel MUST support loop devices!
            <para/>If the method return false u can try it with ADB.Instance().UseBusyBox = true, if busybox exists.
            <para/>If u get then also a false u have to mount the loop device by ur self. Reason for this could be a wrong loop device location...
            <para/>I got this problem on my device. losetup returned the location /dev/loop1 but it was /dev/block/loop1.
            </summary>
            <param name="type">mount type (ext,ext2,ext3,ext4,vfat etc.)</param>
            <param name="source">image/block/device to mount</param>
            <param name="destination">mount location, the path must already exist</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.Mount.ReadOnly(System.String)">
            <summary>
             ReadOnly try to remount the given id as read/only
            </summary>
            <param name="id">id to remount e.g. rootfs or /system</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.Mount.ReadWrite(System.String)">
            <summary>
             ReadWrite try to remount the given id as read/write
            </summary>
            <param name="id">id to remount e.g. rootfs or /system</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.Mount.RootRO">
            <summary>
             RootRO try to remount rootfs and /system as read/only
            </summary>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.Mount.RootRW">
            <summary>
             RootRW try to remount rootfs and /system as read/write
            </summary>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.Mount.UnMount(System.String)">
            <summary>
             Unmount the given mount
            </summary>
            <param name="id">id to unmount e.g. rootfs or /system</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.IO.UPath">
            <summary>
             Unix Path class
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.UPath.AdjustFile(System.String,System.Int32)">
            <summary>
             AdjustFilePath adds a (/) to the begin if no1 exist and remove it on the end if 1 exist, also it will replace "/\s{1,}/" to "/"
            <para/>*NOTE*
            <para/>Quotes are only added if whitespaces are detected!
            <para/>If a (') is detected, the quotes will automatically switch to (")
            </summary>
            <param name="path">path to check</param>
            <param name="quote">1 single (') | 2 double (") quote</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.UPath.AdjustDirectory(System.String,System.Int32)">
            <summary>
             AdjustDirectoryPath adds a (/) to the given path begin and end if no1 exists, also it will replace "//", "/\s{1,}/" to "/"
            <para/>*NOTE*
            <para/>Quotes are only added if whitespaces are detected!
            <para/>If a (') is detected, the quotes will automatically switch to (")
            </summary>
            <param name="path">path to check</param>
            <param name="quote">1 single (') | 2 double (") quote</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.UPath.Combine(System.String[])">
            <summary>
             Combines the given parts to an path like "/p1/p2/p3/p4" or "/p1/p2/p3/p4/"
            </summary>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.IO.UPath.DirectorySeparator">
            <summary>
             Directory separator as string
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.IO.UPath.DirectorySeparatorChar">
            <summary>
             Directory separator as char
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.UPath.GetHash(System.String)">
            <summary>
             Create an MD5 hash of the given path
            </summary>
            <param name="path">path</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.UPath.GetHash(System.String,AndroidCtrl.HashMode)">
            <summary>
             Create an hash of the given path based on the given hash algorithm
            </summary>
            <param name="path">path</param>
            <param name="hash">IDHash</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.UPath.GetName(System.String)">
            <summary>
             Extracts the name of the last element (file/directory)
            <para/>*NOTE*
            <para/>This method will return an empty string if the path is "/"
            </summary>
            <param name="path"></param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.UPath.GetUniqueDirectory(System.String)">
            <summary>
             Returns an unique (sub) directory path based on the given directory
            <para/>*NOTE*
            <para/>There will be no directory created (!) it's only a string. The names are similar to: /my/prefix/38Ejt-m6GrX8/, /my/prefix/UPGaFop_pzqB/, /my/prefix/iVNxOYgCUY3m/, /my/prefix/5gaNzKia0roj/, /my/prefix/SFu59eaFPwmZ/
            </summary>
            <param name="path"></param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.UPath.GetUniqueFile(System.String)">
            <summary>
             Returns an unique file path based on the given directory
            <para/>*NOTE*
            <para/>There will be no file created (!) it's only a string. The names are similar to: /my/prefix/38Ejt-m6GrX8.rnd, /my/prefix/UPGaFop_pzqB.rnd, /my/prefix/iVNxOYgCUY3m.rnd, /my/prefix/5gaNzKia0roj.rnd, /my/prefix/SFu59eaFPwmZ.rnd
            </summary>
            <param name="path"></param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.IO.UPath.MaxLength">
            <summary>
             Max path length
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.UPath.Quote(System.String,System.Int32,System.Boolean)">
            <summary>
             Quote adds quotes (') or (") to a string
            <para>mode 1 = (') | 2 = (")</para>
            </summary>
            <param name="path">string to quote</param>
            <param name="mode">1 single (') | 2 double (") quote</param>
            <param name="esc">escape</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.UPath.ToByteArray(System.String)">
            <summary>
             Converts the given path to an (UTF-8) byte[]
            </summary>
            <param name="path">path</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.UPath.ToByteArray(System.String,System.Text.Encoding)">
            <summary>
             Converts the given path to an byte[] based on the given encoding
            </summary>
            <param name="path">path</param>
            <param name="enc">Encoding</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.UPath.Cleanup(System.String)">
            <summary>
             Removes (")(\) and replace "//" by "/"
            </summary>
            <param name="path"></param>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.IO.UPath.GenRNDString(System.Int32)">
            <summary>
             Returns a random string with the given length
            </summary>
            <param name="length">string length</param>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.IUptime">
            <summary>
             Uptime interface
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.IUptime.Days">
            <summary>
             Holds the up days
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.IUptime.IdleDays">
            <summary>
             Holds the idle-days
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.IUptime.IdleTime">
            <summary>
             Holds the idle-time
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.IUptime.Load">
            <summary>
             Holds the load-average
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.IUptime.SleepDays">
            <summary>
             Holds the sleep-days
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.IUptime.SleepTime">
            <summary>
             Holds the sleep-time
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.IUptime.Time">
            <summary>
             Holds the up hours, minutes and seconds (if available)
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.IUptime.Users">
            <summary>
             Holds the loggedon users
            </summary>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.Logcat.LogEntry">
            <summary>
             Holds an logcat line formatted as object
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Logcat.LogEntry.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
             Creates the DataModelLogCat object
            </summary>
            <param name="type">Log type</param>
            <param name="name">Log sender name</param>
            <param name="pid">Log sender pid</param>
            <param name="info">Log info</param>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Logcat.LogEntry.#ctor(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
             Creates the DataModelLogCat object
            </summary>
            <param name="type">Log type</param>
            <param name="name">Log sender name</param>
            <param name="pid">Log sender pid</param>
            <param name="info">Log info</param>
            <param name="tid">Log sender tid</param>
            <param name="time">Log time</param>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Logcat.LogEntry.Info">
            <summary>
             Holds the log info
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Logcat.LogEntry.Name">
            <summary>
             Holds the log sender name
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Logcat.LogEntry.PID">
            <summary>
             Holds the log sender pid
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Logcat.LogEntry.TID">
            <summary>
             Holds the log sender tid
            <para>*NOTE* returns null if no "-v long" was defined</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Logcat.LogEntry.Time">
            <summary>
             Holds the log time
            <para>*NOTE* returns null if no "-v long" was defined</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Logcat.LogEntry.Type">
            <summary>
             Holds the log type
            </summary>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.Logcat.ILogEntry">
            <summary>
             LogEntry interface
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Logcat.ILogEntry.Info">
            <summary>
             Holds the log info
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Logcat.ILogEntry.Name">
            <summary>
             Holds the log sender name
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Logcat.ILogEntry.PID">
            <summary>
             Holds the log sender pid
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Logcat.ILogEntry.TID">
            <summary>
             Holds the log sender tid
            <para>*NOTE* returns null if no "-v long" was defined</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Logcat.ILogEntry.Time">
            <summary>
             Holds the log time
            <para>*NOTE* returns null if no "-v long" was defined</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Logcat.ILogEntry.Type">
            <summary>
             Holds the log type
            </summary>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.Logcat.Logcat">
            <summary>
             Logcat is the general class to interact with logcat.
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Logcat.Logcat.ParseLog(System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
             Returns a parsed object list of the given raw logcat output
            </summary>
            <param name="rawData">Logcat raw data</param>
            <param name="_long">Define that "-v long" was used to create the log</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Logcat.Logcat.ParseLogFile(System.String,System.Boolean)">
            <summary>
             Returns a parsed object list of the given logfile
            </summary>
            <param name="localFile">Local file path</param>
            <param name="_long">Define that "-v long" was used to create the log</param>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Logcat.Logcat.RawLog(System.Boolean)">
            <summary>
             Returns the complete raw logcat output
            </summary>
            <param name="_long">Define that "-v long" is used to create the log</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Logcat.Logcat.RealTime(System.String)">
            <summary>
             Returns a new LogCat instance
            </summary>
            <param name="args">Arguments (events|main|radio|system|etc.)</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:AndroidCtrl.ADB.Device.Shell.IShell"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Logcat.Logcat.ToLocalFile(System.String,System.Boolean)">
            <summary>
             Write the logcat to the given local file location
            </summary>
            <param name="localFilePath">Logfile local path</param>
            <param name="_long">Define that "-v long" is used to create the log</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Logcat.Logcat.ToRemoteFile(System.String,System.Boolean)">
            <summary>
             Write the logcat to the given remote file location
            </summary>
            <param name="remoteFilePath">Logfile device path</param>
            <param name="_long">Define that "-v long" is used to create the log</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.Manager.Permission">
            <summary>
             PackageManagerPermission holds the permission data
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Manager.Permission.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
             Creates the PackageManagerPermission object
            </summary>
            <param name="name">Permission name</param>
            <param name="package">Package</param>
            <param name="label">Label</param>
            <param name="description">Description</param>
            <param name="protectionlevel">Protection-Level</param>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Manager.Permission.Name">
            <summary>
             Holds the permission name
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Manager.Permission.Package">
            <summary>
             holds the package name
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Manager.Permission.Label">
            <summary>
             Holds the label
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Manager.Permission.Description">
            <summary>
             Holds the description
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Manager.Permission.ProtectionLevel">
            <summary>
             Holds the protectionLevel
            </summary>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.Manager.IPermission">
            <summary>
             PackageManagerPermission interface
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Manager.IPermission.Name">
            <summary>
             Holds the permission name
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Manager.IPermission.Package">
            <summary>
             holds the package name
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Manager.IPermission.Label">
            <summary>
             Holds the label
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Manager.IPermission.Description">
            <summary>
             Holds the description
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Manager.IPermission.ProtectionLevel">
            <summary>
             Holds the protectionLevel
            </summary>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.Manager.Package">
            <summary>
             PackageManagerPackage holds the package data
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Manager.Package.#ctor(System.String,System.String)">
            <summary>
             Creates the PackageManagerPackage object
            </summary>
            <param name="path">Installed APK path</param>
            <param name="name">Package name</param>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Manager.Package.Name">
            <summary>
             Holds the package name
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Manager.Package.Path">
            <summary>
             Holds the installed APK path
            </summary>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.Manager.IPackage">
            <summary>
             PackageManagerPackage interface
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Manager.IPackage.Path">
            <summary>
             Holds the installed APK path
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Manager.IPackage.Name">
            <summary>
             Holds the package name
            </summary>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.Manager.Instrumentation">
            <summary>
             PackageManagerInstrumentation holds the instrumentation data
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Manager.Instrumentation.#ctor(System.String,System.String,System.String)">
            <summary>
             Creates the PackageManagerInstrumentation object
            </summary>
            <param name="path">APK path or null</param>
            <param name="activity">Activity</param>
            <param name="package">Package name</param>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Manager.Instrumentation.Path">
            <summary>
             Holds the APK path
            <para>*NOTE* This variable can be null</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Manager.Instrumentation.Activity">
            <summary>
             Holds the activity
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Manager.Instrumentation.Package">
            <summary>
             Holds the package name
            </summary>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.Manager.IInstrumentation">
            <summary>
             PackageManagerInstrumentation interface
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Manager.IInstrumentation.Path">
            <summary>
             Holds the APK path
            <para>*NOTE* This variable can be null</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Manager.IInstrumentation.Activity">
            <summary>
             Holds the activity
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Manager.IInstrumentation.Package">
            <summary>
             Holds the package name
            </summary>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.Manager.Manager">
            <summary>
             Manager is the general class to interact with the device managers, here u find some pre-defined shell/busybox commands.
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Manager.Manager.#ctor(AndroidCtrl.ADB.IADB)">
            <summary>
             Creates the Manager instance, from here u can use a wide range of predefined functions to interact with the device.
            </summary>
            <param name="adb"><see cref="T:AndroidCtrl.ADB.IADB"/></param>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Manager.Manager.ActivityManager">
            <summary>
             Returns and if not exist, creates the ActivityManager instance
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Manager.Manager.PackageManager">
            <summary>
             Returns and if not exist, creates the PackageManager instance
            </summary>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.Manager.InstallLocation">
            <summary>
             Package-Manager install location id's
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Manager.InstallLocation.Error">
            <summary>
             Error
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Manager.InstallLocation.Auto">
            <summary>
             Auto
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Manager.InstallLocation.Internal">
            <summary>
             Internal
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Manager.InstallLocation.External">
            <summary>
             External
            </summary>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.Manager.ActivityManager">
            <summary>
             ActivityManager is the general class to interact with the device ActivityManager.
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Manager.ActivityManager.Broadcast(System.String,System.String)">
            <summary>
             Broadcast the given activity with the given arguments
            </summary>
            <param name="package">Package/Activity to broadcast</param>
            <param name="pargs">Package arguments</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Manager.ActivityManager.Broadcast(System.String,System.String,System.String)">
            <summary>
             Broadcast the given activity with the given arguments
            </summary>
            <param name="package">Package/Activity to broadcast</param>
            <param name="pargs">Package arguments</param>
            <param name="aargs">Activity arguments</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Manager.ActivityManager.DumpHeap(System.String,System.String)">
            <summary>
             This will create a heap dump of the given process.
            </summary>
            <param name="pid">Process id to snapshot</param>
            <param name="remoteFile">Remote dump file path</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Manager.ActivityManager.DumpHeap(System.String,System.String,System.Boolean)">
            <summary>
             This will create a heap dump of the given process.
            </summary>
            <param name="pid">Process id to snapshot</param>
            <param name="remoteFile">Remote dump file path</param>
            <param name="n">Use breaks (?)</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Manager.ActivityManager.DumpHeap(System.String,System.String,System.Boolean,System.String)">
            <summary>
             This will create a heap dump of the given process.
            </summary>
            <param name="pid">Process id to snapshot</param>
            <param name="remoteFile">Remote dump file path</param>
            <param name="n">Use breaks (?)</param>
            <param name="user">User id or "current"</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Manager.ActivityManager.ForceStop(System.String)">
            <summary>
             Force stop everything associated with package
            </summary>
            <param name="package">App/Package to force-stop</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Manager.ActivityManager.ForceStop(System.String,System.String)">
            <summary>
             Force stop everything associated with package
            </summary>
            <param name="package">App/Package to force-stop</param>
            <param name="user">User id or (all|current)</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Manager.ActivityManager.Kill(System.String)">
            <summary>
             Kill all processes associated with package
            </summary>
            <param name="package">App/Package to kill</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Manager.ActivityManager.Kill(System.String,System.String)">
            <summary>
             Kill all processes associated with package
            </summary>
            <param name="package">App/Package to kill</param>
            <param name="user">User id or (all|current)</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Manager.ActivityManager.KillAll">
            <summary>
             Kill all background processes.
            </summary>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Manager.ActivityManager.Restart">
            <summary>
             Restart the user-space system.
            </summary>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Manager.ActivityManager.Start(System.String,System.String)">
            <summary>
             Starts the given activity with the given arguments
            </summary>
            <param name="package">Package/Activity to launch</param>
            <param name="pargs">Package arguments</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Manager.ActivityManager.Start(System.String,System.String,System.String)">
            <summary>
             Starts the given activity with the given arguments
            </summary>
            <param name="package">Package/Activity to launch</param>
            <param name="pargs">Package arguments</param>
            <param name="aargs">Activity arguments</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Manager.ActivityManager.StartService(System.String)">
            <summary>
             Start a Service
            </summary>
            <param name="intent">Service to start</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Manager.ActivityManager.StartService(System.String,System.String)">
            <summary>
             Start a Service
            </summary>
            <param name="intent">Service to start</param>
            <param name="user">User id or "current"</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Manager.ActivityManager.StopService(System.String)">
            <summary>
             Stop a Service
            </summary>
            <param name="intent">Service to stop</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Manager.ActivityManager.StopService(System.String,System.String)">
            <summary>
             Stop a Service
            </summary>
            <param name="intent">Service to stop</param>
            <param name="user">User id or "current"</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.Manager.PackageManager">
            <summary>
             PackageManager is the general class to interact with the device PackageManager.
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Manager.PackageManager.Block(System.String,System.String)">
            <summary>
             Blocks the given package.
            <para>*NOTE* This method is used since Android 4.x.x</para>
            </summary>
            <param name="package">Package name</param>
            <param name="userID">User ID</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Manager.PackageManager.Clear(System.String,System.String)">
            <summary>
             Deletes all data associated with the given package.
            <para>*NOTE* "userID" is used since Android 4.x.x</para>
            </summary>
            <param name="package">Package name</param>
            <param name="userID">User ID</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Manager.PackageManager.Disable(System.String,System.String)">
            <summary>
             Disables the given package.
            <para>*NOTE* "userID" is used since Android 4.x.x</para>
            </summary>
            <param name="package">Package name</param>
            <param name="userID">User ID</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Manager.PackageManager.DisableUser(System.String,System.String)">
            <summary>
             Disables the given userID for the given package.
            <para>*NOTE* "userID" is used since Android 4.x.x</para>
            </summary>
            <param name="package">Package name</param>
            <param name="userID">User ID</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Manager.PackageManager.DisableUntilUsed(System.String,System.String)">
            <summary>
             Disable until used
            <para>*NOTE* This method is used since Android 4.x.x</para>
            </summary>
            <param name="package">Package name</param>
            <param name="userID">User ID</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Manager.PackageManager.Dump(System.String)">
            <summary>
             Returns the system state associated with the given package.
            </summary>
            <param name="package">Package name</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Manager.PackageManager.Enable(System.String,System.String)">
            <summary>
             Enables the given package.
            <para>*NOTE* "userID" is used since Android 4.x.x</para>
            </summary>
            <param name="package">Package name</param>
            <param name="userID">User ID</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Manager.PackageManager.GetInstallLocation">
            <summary>
             Return the current install location
            </summary>
            <returns><see cref="T:AndroidCtrl.ADB.Device.Manager.InstallLocation"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Manager.PackageManager.Install(System.String,System.String)">
            <summary>
            Installs the given package
            <para/>*HINT*
            <para/>-d allow version downgrade
            <para/>-g grant all runtime permissions
            <para/>-l forward-lock the app
            <para/>-r reinstall the app and keep its data
            <para/>-p partial application install
            <para/>-s install the app on SD-Card instead of the internal storage
            <para/>-t allow test package
            </summary>
            <param name="packagePath">remote package path</param>
            <param name="args">arguments</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Manager.PackageManager.ListFeatures">
            <summary>
             Returns all features of the system
            </summary>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Manager.PackageManager.ListInstrumentation(System.String)">
            <summary>
             Returns the installed test packages
            </summary>
            <param name="package">Package name</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Manager.PackageManager.ListLibraries">
            <summary>
             Returns all installed libraries
            </summary>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Manager.PackageManager.ListPackages(System.String)">
            <summary>
             Returns the installed package(s) info(s)
            </summary>
            <param name="package">Package name</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Manager.PackageManager.ListPermissionGroups">
            <summary>
             Returns all permission groups
            </summary>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Manager.PackageManager.ListPermissions">
            <summary>
             Returns all permissions and it's info's
            </summary>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Manager.PackageManager.Path(System.String)">
            <summary>
             Gets the APK path from given package
            </summary>
            <param name="package">Package</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.String"/> or <see cref="T:null"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Manager.PackageManager.SetInstallLocation(AndroidCtrl.ADB.Device.Manager.InstallLocation)">
            <summary>
             Sets the given install location
            </summary>
            <param name="location"><see cref="T:AndroidCtrl.ADB.Device.Manager.InstallLocation"/></param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Manager.PackageManager.Unblock(System.String,System.String)">
            <summary>
             Unblocks the given package.
            <para>*NOTE* This method is used since Android 4.x.x</para>
            </summary>
            <param name="package">Package name</param>
            <param name="userID">User ID</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Manager.PackageManager.Uninstall(System.String,System.Boolean)">
            <summary>
             Uninstalls the given package
            </summary>
            <param name="package">Package name</param>
            <param name="keepData">Keep package data</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.Provider.ContactsDataField">
            <summary>
             ContactsDataField holds the contacts data table row structure
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Provider.ContactsDataField.#ctor(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
             Creates a new ContactsDataField object
            </summary>
            <param name="row">raw data table row</param>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Provider.ContactsDataField.ID">
            <summary>
             Table row id
            <para>*NOTE* Can be -1, this implies null</para>
            <para>*HINT* Long story short, if this property is set to -1, this object is not usable.</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Provider.ContactsDataField.PackageID">
            <summary>
             package_id
            <para>*NOTE* Can be -1, this implies null</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Provider.ContactsDataField.MimetypeID">
            <summary>
             mimetype_id
            <para>*NOTE* Can be -1, this implies null</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Provider.ContactsDataField.RawContactID">
            <summary>
             raw_contact_id
            <para>*NOTE* Can be -1, this implies null</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Provider.ContactsDataField.IsReadOnly">
            <summary>
             is_read_only
            <para>*NOTE* Can be -1, this implies null</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Provider.ContactsDataField.IsPrimary">
            <summary>
             is_primary
            <para>*NOTE* Can be -1, this implies null</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Provider.ContactsDataField.IsSuperPrimary">
            <summary>
             is_super_primary
            <para>*NOTE* Can be -1, this implies null</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Provider.ContactsDataField.DataVersion">
            <summary>
             data_version
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Provider.ContactsDataField.Data1">
            <summary>
             data1
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Provider.ContactsDataField.Data2">
            <summary>
             data2
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Provider.ContactsDataField.Data3">
            <summary>
             data3
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Provider.ContactsDataField.Data4">
            <summary>
             data4
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Provider.ContactsDataField.Data5">
            <summary>
             data5
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Provider.ContactsDataField.Data6">
            <summary>
             data6
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Provider.ContactsDataField.Data7">
            <summary>
             data7
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Provider.ContactsDataField.Data8">
            <summary>
             data8
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Provider.ContactsDataField.Data9">
            <summary>
             data9
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Provider.ContactsDataField.Data10">
            <summary>
             data10
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Provider.ContactsDataField.Data11">
            <summary>
             data11
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Provider.ContactsDataField.Data12">
            <summary>
             data12
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Provider.ContactsDataField.Data13">
            <summary>
             data13
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Provider.ContactsDataField.Data14">
            <summary>
             data14
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Provider.ContactsDataField.Data15">
            <summary>
             data15
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Provider.ContactsDataField.DataSync1">
            <summary>
             data_sync1
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Provider.ContactsDataField.DataSync2">
            <summary>
             data_sync2
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Provider.ContactsDataField.DataSync3">
            <summary>
             data_sync3
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Provider.ContactsDataField.DataSync4">
            <summary>
             data_sync4
            </summary>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.Provider.ContactsEmail">
            <summary>
             Extended version of ContactsDataField
            <para>*NOTE* Structure is based on http://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Email.html</para>
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Provider.ContactsEmail.#ctor(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
             Creates a new ContactsEmail object
            </summary>
            <param name="structure">raw data table row</param>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Provider.ContactsEmail.Email">
            <summary>
             Contact email address
            <para>*NOTE* Referrs to ContactsDataField.Data1</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Provider.ContactsEmail.Type">
            <summary>
             Contact email type
            <para>*NOTE* Referrs to ContactsDataField.Data2</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Provider.ContactsEmail.Label">
            <summary>
             Contact email label
            <para>*NOTE* Referrs to ContactsDataField.Data3</para>
            </summary>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.Provider.ContactsEvent">
            <summary>
             Extended version of ContactsDataField
            <para>*NOTE* Structure is based on http://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Event.html</para>
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Provider.ContactsEvent.#ctor(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
             Creates a new ContactsEvent object
            </summary>
            <param name="structure">raw data table row</param>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Provider.ContactsEvent.Event">
            <summary>
             Contact event start time
            <para>*NOTE* Referrs to ContactsDataField.Data1</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Provider.ContactsEvent.Type">
            <summary>
             Contact event type
            <para>*NOTE* Referrs to ContactsDataField.Data2</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Provider.ContactsEvent.Label">
            <summary>
             Contact event label
            <para>*NOTE* Referrs to ContactsDataField.Data3</para>
            </summary>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.Provider.ContactsGroup">
            <summary>
             Extended version of ContactsDataField
            <para>*NOTE* Structure is based on http://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.GroupMembership.html</para>
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Provider.ContactsGroup.#ctor(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
             Creates a new ContactsGroup object
            </summary>
            <param name="structure">raw data table row</param>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Provider.ContactsGroup.GroupRowID">
            <summary>
             Contact group row id
            <para>*NOTE* Referrs to ContactsDataField.Data1</para>
            </summary>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.Provider.ContactsIdentity">
            <summary>
             Extended version of DataModelContactsDataField
            <para>*NOTE* Structure is based on http://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Identity.html</para>
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Provider.ContactsIdentity.#ctor(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
             Creates a new ContactsIdentity object
            </summary>
            <param name="structure">raw data table row</param>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Provider.ContactsIdentity.Identity">
            <summary>
             Contact identity
            <para>*NOTE* Referrs to ContactsDataField.Data1</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Provider.ContactsIdentity.Namespace">
            <summary>
             Contact namespace
            <para>*NOTE* Referrs to ContactsDataField.Data2</para>
            </summary>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.Provider.ContactsIM">
            <summary>
             Extended version of DataModelContactsDataField
            <para>*NOTE* Structure is based on http://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Im.html</para>
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Provider.ContactsIM.#ctor(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
             Creates a new ContactsIM object
            </summary>
            <param name="structure">raw data table row</param>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Provider.ContactsIM.IM">
            <summary>
             Contact IM number
            <para>*NOTE* Referrs to ContactsDataField.Data1</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Provider.ContactsIM.Type">
            <summary>
             Contact IM type
            <para>*NOTE* Referrs to ContactsDataField.Data2</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Provider.ContactsIM.Label">
            <summary>
             Contact IM label
            <para>*NOTE* Referrs to ContactsDataField.Data3</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Provider.ContactsIM.Protocol">
            <summary>
             Contact IM protocol
            <para>*NOTE* Referrs to ContactsDataField.Data5</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Provider.ContactsIM.CustomProtocol">
            <summary>
             Contact custom IM protocol
            <para>*NOTE* Referrs to ContactsDataField.Data6</para>
            </summary>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.Provider.ContactsName">
            <summary>
             Extended version of ContactsDataField
            <para>*NOTE* Structure is based on http://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.StructuredName.html</para>
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Provider.ContactsName.#ctor(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
             Creates a new ContactsName object
            </summary>
            <param name="structure">raw data table row</param>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Provider.ContactsName.DisplayName">
            <summary>
             Contact display name
            <para>*NOTE* Referrs to ContactsDataField.Data1</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Provider.ContactsName.GivenName">
            <summary>
             Contact given name
            <para>*NOTE* Referrs to ContactsDataField.Data2</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Provider.ContactsName.FamilyName">
            <summary>
             Contact family name
            <para>*NOTE* Referrs to ContactsDataField.Data3</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Provider.ContactsName.Prefix">
            <summary>
             Contact prefix (Mr, Mrs, Dr., etc.)
            <para>*NOTE* Referrs to ContactsDataField.Data4</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Provider.ContactsName.MiddleName">
            <summary>
             Contact middle name
            <para>*NOTE* Referrs to ContactsDataField.Data5</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Provider.ContactsName.Suffix">
            <summary>
             Contact suffix (Sr, Jr, III, etc.)
            <para>*NOTE* Referrs to ContactsDataField.Data6</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Provider.ContactsName.PhoneticGivenName">
            <summary>
             Contact phonetic given name
            <para>*NOTE* Referrs to ContactsDataField.Data7</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Provider.ContactsName.PhoneticMiddleName">
            <summary>
             Contact phonetic middle name
            <para>*NOTE* Referrs to ContactsDataField.Data8</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Provider.ContactsName.PhoneticFamilyName">
            <summary>
             Contact phonetic family name
            <para>*NOTE* Referrs to ContactsDataField.Data9</para>
            </summary>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.Provider.ContactsNickname">
            <summary>
             Extended version of DataModelContactsDataField
            <para>*NOTE* Structure is based on http://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Nickname.html</para>
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Provider.ContactsNickname.#ctor(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
             Creates a new ContactsNickname object
            </summary>
            <param name="structure">raw data table row</param>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Provider.ContactsNickname.Nickname">
            <summary>
             Contact nickname
            <para>*NOTE* Referrs to ContactsDataField.Data1</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Provider.ContactsNickname.Type">
            <summary>
             Contact nickname type
            <para>*NOTE* Referrs to ContactsDataField.Data2</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Provider.ContactsNickname.Label">
            <summary>
             Contact nickname label
            <para>*NOTE* Referrs to ContactsDataField.Data3</para>
            </summary>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.Provider.ContactsNote">
            <summary>
             Extended version of ContactsDataField
            <para>*NOTE* Structure is based on http://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Note.html</para>
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Provider.ContactsNote.#ctor(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
             Creates a new ContactsNote object
            </summary>
            <param name="structure">raw data table row</param>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Provider.ContactsNote.Note">
            <summary>
             Contact note
            <para>*NOTE* Referrs to ContactsDataField.Data1</para>
            </summary>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.Provider.ContactsOrganization">
            <summary>
             Extended version of ContactsDataField
            <para>*NOTE* Structure is based on http://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Organization.html</para>
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Provider.ContactsOrganization.#ctor(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
             Creates a new ContactsOrganization object
            </summary>
            <param name="structure">raw data table row</param>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Provider.ContactsOrganization.Organization">
            <summary>
             Contact organization
            <para>*NOTE* Referrs to ContactsDataField.Data1</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Provider.ContactsOrganization.Type">
            <summary>
             Contact organization type
            <para>*NOTE* Referrs to ContactsDataField.Data2</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Provider.ContactsOrganization.Label">
            <summary>
             Contact organization label
            <para>*NOTE* Referrs to ContactsDataField.Data3</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Provider.ContactsOrganization.Title">
            <summary>
             Contact organization title
            <para>*NOTE* Referrs to ContactsDataField.Data4</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Provider.ContactsOrganization.Department">
            <summary>
             Contact organization department
            <para>*NOTE* Referrs to ContactsDataField.Data5</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Provider.ContactsOrganization.JobDescription">
            <summary>
             Contact organization job description
            <para>*NOTE* Referrs to ContactsDataField.Data6</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Provider.ContactsOrganization.Symbol">
            <summary>
             Contact organization symbol
            <para>*NOTE* Referrs to ContactsDataField.Data7</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Provider.ContactsOrganization.PhoneticName">
            <summary>
             Contact organization phonetic name
            <para>*NOTE* Referrs to ContactsDataField.Data8</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Provider.ContactsOrganization.OfficeLocation">
            <summary>
             Contact organization office location
            <para>*NOTE* Referrs to ContactsDataField.Data9</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Provider.ContactsOrganization.PhoneticNameStyle">
            <summary>
             Contact organization phonetic name style
            <para>*NOTE* Referrs to ContactsDataField.Data10</para>
            </summary>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.Provider.ContactsPhone">
            <summary>
             Extended version of ContactsDataField
            <para>*NOTE* Structure is based on http://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Phone.html</para>
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Provider.ContactsPhone.#ctor(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
             Creates a new ContactsPhone object
            </summary>
            <param name="structure">raw data table row</param>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Provider.ContactsPhone.Phone">
            <summary>
             Contact phone number
            <para>*NOTE* Referrs to ContactsDataField.Data1</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Provider.ContactsPhone.Type">
            <summary>
             Contact phone type
            <para>*NOTE* Referrs to ContactsDataField.Data2</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Provider.ContactsPhone.Label">
            <summary>
             Contact phone label
            <para>*NOTE* Referrs to ContactsDataField.Data3</para>
            </summary>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.Provider.ContactsPhoto">
            <summary>
             Extended version of ContactsDataField
            <para>*NOTE* Structure is based on http://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Photo.html</para>
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Provider.ContactsPhoto.#ctor(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
             Creates a new ContactsPhoto object
            </summary>
            <param name="structure">raw data table row</param>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Provider.ContactsPhoto.PhotoFileID">
            <summary>
             Contact photo file id
            <para>*NOTE* Referrs to ContactsDataField.Data14</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Provider.ContactsPhoto.RawPhoto">
            <summary>
             Contact raw photo
            <para>*NOTE* Referrs to ContactsDataField.Data15</para>
            </summary>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.Provider.ContactsPostalAddress">
            <summary>
             Extended version of ContactsDataField
            <para>*NOTE* Structure is based on http://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.StructuredPostal.html</para>
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Provider.ContactsPostalAddress.#ctor(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
             Creates a new ContactsPostalAddress object
            </summary>
            <param name="structure">raw data table row</param>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Provider.ContactsPostalAddress.FormattedAddress">
            <summary>
             Contact postal-address
            <para>*NOTE* Referrs to ContactsDataField.Data1</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Provider.ContactsPostalAddress.Type">
            <summary>
             Contact postal-address type
            <para>*NOTE* Referrs to ContactsDataField.Data2</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Provider.ContactsPostalAddress.Label">
            <summary>
             Contact postal-address label
            <para>*NOTE* Referrs to ContactsDataField.Data3</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Provider.ContactsPostalAddress.Street">
            <summary>
             Contact street
            <para>*NOTE* Referrs to ContactsDataField.Data4</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Provider.ContactsPostalAddress.POBox">
            <summary>
             Contact post office box number
            <para>*NOTE* Referrs to ContactsDataField.Data5</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Provider.ContactsPostalAddress.Neighborhood">
            <summary>
             Contact neighborhood
            <para>*NOTE* Referrs to ContactsDataField.Data6</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Provider.ContactsPostalAddress.City">
            <summary>
             Contact city
            <para>*NOTE* Referrs to ContactsDataField.Data7</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Provider.ContactsPostalAddress.Region">
            <summary>
             Contact region
            <para>*NOTE* Referrs to ContactsDataField.Data8</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Provider.ContactsPostalAddress.Postcode">
            <summary>
             Contact postcode
            <para>*NOTE* Referrs to ContactsDataField.Data9</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Provider.ContactsPostalAddress.Country">
            <summary>
             Contact country
            <para>*NOTE* Referrs to ContactsDataField.Data10</para>
            </summary>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.Provider.ContactsRelation">
            <summary>
             Extended version of ContactsDataField
            <para>*NOTE* Structure is based on http://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Relation.html</para>
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Provider.ContactsRelation.#ctor(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
             Creates a new ContactsRelation object
            </summary>
            <param name="structure">raw data table row</param>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Provider.ContactsRelation.Relation">
            <summary>
             Contact relation
            <para>*NOTE* Referrs to ContactsDataField.Data1</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Provider.ContactsRelation.Type">
            <summary>
             Contact relation type
            <para>*NOTE* Referrs to ContactsDataField.Data2</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Provider.ContactsRelation.Label">
            <summary>
             Contact relation label
            <para>*NOTE* Referrs to ContactsDataField.Data3</para>
            </summary>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.Provider.ContactsSipAddress">
            <summary>
             Extended version of ContactsDataField
            <para>*NOTE* Structure is based on http://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.SipAddress.html</para>
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Provider.ContactsSipAddress.#ctor(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
             Creates a new ContactsSipAddress object
            </summary>
            <param name="structure">raw data table row</param>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Provider.ContactsSipAddress.SipAddress">
            <summary>
             Contact sip-address
            <para>*NOTE* Referrs to ContactsDataField.Data1</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Provider.ContactsSipAddress.Type">
            <summary>
             Contact sip-address type
            <para>*NOTE* Referrs to ContactsDataField.Data2</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Provider.ContactsSipAddress.Label">
            <summary>
             Contact sip-address label
            <para>*NOTE* Referrs to ContactsDataField.Data3</para>
            </summary>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.Provider.ContactsWebsite">
            <summary>
             Extended version of ContactsDataField
            <para>*NOTE* Structure is based on http://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Website.html</para>
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Provider.ContactsWebsite.#ctor(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
             Creates a new ContactsWebsite object
            </summary>
            <param name="structure">raw data table row</param>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Provider.ContactsWebsite.Website">
            <summary>
             Contact website
            <para>*NOTE* Referrs to ContactsDataField.Data1</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Provider.ContactsWebsite.Type">
            <summary>
             Contact website type
            <para>*NOTE* Referrs to ContactsDataField.Data2</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Provider.ContactsWebsite.Label">
            <summary>
             Contact postal-address label
            <para>*NOTE* Referrs to ContactsDataField.Data3</para>
            </summary>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.Provider.IContactsDataField">
            <summary>
             ContactsDataField interface
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Provider.IContactsDataField.ID">
            <summary>
             Table row id
            <para>*NOTE* Can be -1, this implies null</para>
            <para>*HINT* Long story short, if this property is set to -1, this object is not usable.</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Provider.IContactsDataField.PackageID">
            <summary>
             package_id
            <para>*NOTE* Can be -1, this implies null</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Provider.IContactsDataField.MimetypeID">
            <summary>
             mimetype_id
            <para>*NOTE* Can be -1, this implies null</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Provider.IContactsDataField.RawContactID">
            <summary>
             raw_contact_id
            <para>*NOTE* Can be -1, this implies null</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Provider.IContactsDataField.IsReadOnly">
            <summary>
             is_read_only
            <para>*NOTE* Can be -1, this implies null</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Provider.IContactsDataField.IsPrimary">
            <summary>
             is_primary
            <para>*NOTE* Can be -1, this implies null</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Provider.IContactsDataField.IsSuperPrimary">
            <summary>
             is_super_primary
            <para>*NOTE* Can be -1, this implies null</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Provider.IContactsDataField.DataVersion">
            <summary>
             data_version
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Provider.IContactsDataField.Data1">
            <summary>
             data1
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Provider.IContactsDataField.Data2">
            <summary>
             data2
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Provider.IContactsDataField.Data3">
            <summary>
             data3
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Provider.IContactsDataField.Data4">
            <summary>
             data4
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Provider.IContactsDataField.Data5">
            <summary>
             data5
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Provider.IContactsDataField.Data6">
            <summary>
             data6
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Provider.IContactsDataField.Data7">
            <summary>
             data7
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Provider.IContactsDataField.Data8">
            <summary>
             data8
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Provider.IContactsDataField.Data9">
            <summary>
             data9
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Provider.IContactsDataField.Data10">
            <summary>
             data10
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Provider.IContactsDataField.Data11">
            <summary>
             data11
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Provider.IContactsDataField.Data12">
            <summary>
             data12
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Provider.IContactsDataField.Data13">
            <summary>
             data13
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Provider.IContactsDataField.Data14">
            <summary>
             data14
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Provider.IContactsDataField.Data15">
            <summary>
             data15
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Provider.IContactsDataField.DataSync1">
            <summary>
             data_sync1
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Provider.IContactsDataField.DataSync2">
            <summary>
             data_sync2
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Provider.IContactsDataField.DataSync3">
            <summary>
             data_sync3
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Provider.IContactsDataField.DataSync4">
            <summary>
             data_sync4
            </summary>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.Provider.AndroidCursor">
            <summary>
             Android cursor ids
            </summary>
            
             TODO:
             Check <see cref="M:AndroidCtrl.ADB.Device.Provider.Contacts.GetMimeType(AndroidCtrl.ADB.Device.Provider.AndroidCursor)"/> if this list changes
            
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Provider.AndroidCursor.ContactEvent">
            <summary>
             "vnd.android.cursor.item/contact_event"
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Provider.AndroidCursor.EmailV2">
            <summary>
             "vnd.android.cursor.item/email_v2"
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Provider.AndroidCursor.Group">
            <summary>
             "vnd.android.cursor.item/group_membership"
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Provider.AndroidCursor.IM">
            <summary>
             "vnd.android.cursor.item/im"
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Provider.AndroidCursor.Identity">
            <summary>
             "vnd.android.cursor.item/identity"
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Provider.AndroidCursor.Name">
            <summary>
             "vnd.android.cursor.item/name"
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Provider.AndroidCursor.Nickname">
            <summary>
             "vnd.android.cursor.item/nickname"
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Provider.AndroidCursor.None">
            <summary>
             null
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Provider.AndroidCursor.Note">
            <summary>
             "vnd.android.cursor.item/note"
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Provider.AndroidCursor.Organization">
            <summary>
             "vnd.android.cursor.item/organization"
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Provider.AndroidCursor.PhoneV2">
            <summary>
             "vnd.android.cursor.item/phone_v2"
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Provider.AndroidCursor.Photo">
            <summary>
             "vnd.android.cursor.item/photo"
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Provider.AndroidCursor.PostalAddressV2">
            <summary>
             "vnd.android.cursor.item/postal-address_v2"
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Provider.AndroidCursor.Relation">
            <summary>
             "vnd.android.cursor.item/relation"
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Provider.AndroidCursor.SipAddress">
            <summary>
             "vnd.android.cursor.item/sip_address"
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Provider.AndroidCursor.Website">
            <summary>
             "vnd.android.cursor.item/website"
            </summary>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.Provider.ContactEmailType">
            <summary>
             Android contact email type
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Provider.ContactEmailType.Custom">
            <summary>
             "custom" type
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Provider.ContactEmailType.Home">
            <summary>
             "home" type
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Provider.ContactEmailType.Work">
            <summary>
             "work" type
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Provider.ContactEmailType.Other">
            <summary>
             "other" type
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Provider.ContactEmailType.Mobile">
            <summary>
             "mobile" type
            </summary>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.Provider.ContactEventType">
            <summary>
             Android contact evet type
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Provider.ContactEventType.Custom">
            <summary>
             "custom" type
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Provider.ContactEventType.Anniversary">
            <summary>
             "anniversary" type
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Provider.ContactEventType.Other">
            <summary>
             "other" type
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Provider.ContactEventType.Birthday">
            <summary>
             "birthday" type
            </summary>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.Provider.ContactIMType">
            <summary>
             Android contact IM type
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Provider.ContactIMType.Custom">
            <summary>
             "custom" type
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Provider.ContactIMType.Home">
            <summary>
             "home" type
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Provider.ContactIMType.Work">
            <summary>
             "work" type
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Provider.ContactIMType.Other">
            <summary>
             "other" type
            </summary>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.Provider.ContactIMProtocol">
            <summary>
             Android contact IM protocols
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Provider.ContactIMProtocol.Custom">
            <summary>
             "custom" protocol
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Provider.ContactIMProtocol.AIM">
            <summary>
             "AIM" protocol
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Provider.ContactIMProtocol.MSN">
            <summary>
             "Msn" protocol
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Provider.ContactIMProtocol.Yahoo">
            <summary>
             "Yahoo" protocol
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Provider.ContactIMProtocol.Skype">
            <summary>
             "Skype" protocol
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Provider.ContactIMProtocol.QQ">
            <summary>
             "QQ" protocol
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Provider.ContactIMProtocol.GoogleTalk">
            <summary>
             "Google Talk" protocol
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Provider.ContactIMProtocol.ICQ">
            <summary>
             "ICQ" protocol
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Provider.ContactIMProtocol.Jabber">
            <summary>
             "Jabber" protocol
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Provider.ContactIMProtocol.NetMeeting">
            <summary>
             "Netmeeting" protocol
            </summary>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.Provider.ContactNicknameType">
            <summary>
             Android contact nickname type
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Provider.ContactNicknameType.Custom">
            <summary>
             "custom" type
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Provider.ContactNicknameType.Default">
            <summary>
             "default" type
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Provider.ContactNicknameType.OtherName">
            <summary>
             "other name" type
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Provider.ContactNicknameType.MaidenName">
            <summary>
             "maiden name" type
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Provider.ContactNicknameType.ShortName">
            <summary>
             "short name" type
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Provider.ContactNicknameType.Initials">
            <summary>
             "initials" type
            </summary>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.Provider.ContactOrganizationType">
            <summary>
             Android contact organization type
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Provider.ContactOrganizationType.Custom">
            <summary>
             "custom" type
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Provider.ContactOrganizationType.Work">
            <summary>
             "work" type
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Provider.ContactOrganizationType.Other">
            <summary>
             "other" type
            </summary>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.Provider.ContactPhoneType">
            <summary>
             Android contact phone type
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Provider.ContactPhoneType.Custom">
            <summary>
             "custom" type
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Provider.ContactPhoneType.Home">
            <summary>
             "home" type
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Provider.ContactPhoneType.Mobile">
            <summary>
             "mobile" type
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Provider.ContactPhoneType.Work">
            <summary>
             "work" type
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Provider.ContactPhoneType.FaxWork">
            <summary>
             "fax work" type
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Provider.ContactPhoneType.FaxHome">
            <summary>
             "fax home" type
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Provider.ContactPhoneType.Pager">
            <summary>
             "pager" type
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Provider.ContactPhoneType.Other">
            <summary>
             "other" type
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Provider.ContactPhoneType.Callback">
            <summary>
             "callback" type
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Provider.ContactPhoneType.Car">
            <summary>
             "car" type
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Provider.ContactPhoneType.CompanyMain">
            <summary>
             "company main" type
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Provider.ContactPhoneType.ISDN">
            <summary>
             "isdn" type
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Provider.ContactPhoneType.Main">
            <summary>
             "main" type
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Provider.ContactPhoneType.FaxOther">
            <summary>
             "fax other" type
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Provider.ContactPhoneType.Radio">
            <summary>
             "radio" type
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Provider.ContactPhoneType.Telex">
            <summary>
             "telex" type
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Provider.ContactPhoneType.TTYtdd">
            <summary>
             "TTY tdd" type
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Provider.ContactPhoneType.WorkMobile">
            <summary>
             "work mobile" type
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Provider.ContactPhoneType.WorkPager">
            <summary>
             "work pager" type
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Provider.ContactPhoneType.Assistant">
            <summary>
             "assistant" type
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Provider.ContactPhoneType.MMS">
            <summary>
             "MMS" type
            </summary>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.Provider.ContactRelationType">
            <summary>
             Android contact relation type
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Provider.ContactRelationType.Custom">
            <summary>
             "custom" type
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Provider.ContactRelationType.Assistant">
            <summary>
             "assistant" type
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Provider.ContactRelationType.Brother">
            <summary>
             "brother" type
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Provider.ContactRelationType.Child">
            <summary>
             "child" type
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Provider.ContactRelationType.DomesticPartner">
            <summary>
             "domestic partner" type
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Provider.ContactRelationType.Father">
            <summary>
             "father" type
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Provider.ContactRelationType.Friend">
            <summary>
             "friend" type
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Provider.ContactRelationType.Manager">
            <summary>
             "manager" type
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Provider.ContactRelationType.Mother">
            <summary>
             "mother" type
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Provider.ContactRelationType.Parent">
            <summary>
             "parent" type
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Provider.ContactRelationType.Partner">
            <summary>
             "partner" type
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Provider.ContactRelationType.ReferredBy">
            <summary>
             "referred by" type
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Provider.ContactRelationType.Relative">
            <summary>
             "relative" type
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Provider.ContactRelationType.Sister">
            <summary>
             "sister" type
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Provider.ContactRelationType.Spouse">
            <summary>
             "spouse" type
            </summary>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.Provider.ContactSipAddressType">
            <summary>
             Android contact sip-address type
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Provider.ContactSipAddressType.Custom">
            <summary>
             "custom" type
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Provider.ContactSipAddressType.Home">
            <summary>
             "home" type
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Provider.ContactSipAddressType.Work">
            <summary>
             "work" type
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Provider.ContactSipAddressType.Other">
            <summary>
             "other" type
            </summary>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.Provider.ContactPostalAddressType">
            <summary>
             Android contact postal-address type
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Provider.ContactPostalAddressType.Custom">
            <summary>
             "custom" type
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Provider.ContactPostalAddressType.Home">
            <summary>
             "home" type
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Provider.ContactPostalAddressType.Work">
            <summary>
             "work" type
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Provider.ContactPostalAddressType.Other">
            <summary>
             "other" type
            </summary>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.Provider.ContactWebsiteType">
            <summary>
             Android contact website type
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Provider.ContactWebsiteType.Custom">
            <summary>
             "custom" type
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Provider.ContactWebsiteType.Homepage">
            <summary>
             "Homepage" type
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Provider.ContactWebsiteType.Blog">
            <summary>
             "Blog" type
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Provider.ContactWebsiteType.Profile">
            <summary>
             "Profile" type
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Provider.ContactWebsiteType.Home">
            <summary>
             "Home" type
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Provider.ContactWebsiteType.Work">
            <summary>
             "Work" type
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Provider.ContactWebsiteType.FTP">
            <summary>
             "FTP" type
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Provider.ContactWebsiteType.Other">
            <summary>
             "Other" type
            </summary>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.Provider.Provider">
            <summary>
             This is the main class to interact with the device "Provider" such as contacts, sms, etc.
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Provider.Provider.Contacts">
            <summary>
             Returns and if not exist, creates the Contacts instance
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Provider.Provider.Telephony">
            <summary>
             Returns and if not exist, creates the Telephony instance
            </summary>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.Provider.Telephony">
            <summary>
             This is the main class to interact with the device telephony provider database
            <para>*NOTE* This class needs min. 6 sec. to load the needed tables from the mmssms.db on the device.</para>
            <para>*NOTE* If the device is via W-Lan/Lan connected, it can take up to 12 sec. to load the needed tables.</para>
            <para>*HINT* If u can't load the data from the device u can try to change the "TimeOut".</para>
            <para>*NOTE* This class require root access!</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Provider.Telephony.DatabasePathSmsMms">
            <summary>
             Get/Set the remote sms/mms database path
            <para>*NOTE* The default path is "/data/data/com.android.providers.telephony/databases/mmssms.db"</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Provider.Telephony.IsInitialized">
            <summary>
             Return true if all needed tables are successfully stored in it's tmp vars, otherwise it will return false.
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Provider.Telephony.Timeout">
            <summary>
             Set the response timeout in milliseconds, the default value is 500
            <para>*NOTE* This timeout defines the maximum wait time for an line of output</para>
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Provider.Telephony.GetParts">
            <summary>
             Returns the complete part table.
            </summary>
            <returns>List&lt;Dictionary&lt;string, string&gt;&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Provider.Telephony.GetSms">
            <summary>
             Returns the complete sms table.
            </summary>
            <returns>List&lt;Dictionary&lt;string, string&gt;&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Provider.Telephony.GetSmsByPhoneNumber(System.String)">
            <summary>
             Return all sms from/to the given adress (phone number).
            </summary>
            <param name="contactNumber">address (phone number)</param>
            <returns>List&lt;Dictionary&lt;string, string&gt;&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Provider.Telephony.GetSmsByRawContactID(System.Int32)">
            <summary>
             Return all sms from/to the given person (raw_contact_id).
            </summary>
            <param name="rawContactID">person (raw_contact_id)</param>
            <returns>List&lt;Dictionary&lt;string, string&gt;&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Provider.Telephony.GetSmsByRawContactID(System.Collections.Generic.List{System.Int32})">
            <summary>
             Return all sms from/to the given persons (raw_contact_ids).
            </summary>
            <param name="rawContactIDs">persons (raw_contact_ids)</param>
            <returns>List&lt;Dictionary&lt;string, string&gt;&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Provider.Telephony.GetSmsByThreadID(System.Int32)">
            <summary>
             Return all sms from/to the given thread_id.
            </summary>
            <param name="threadID">thread_id</param>
            <returns>List&lt;Dictionary&lt;string, string&gt;&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Provider.Telephony.GetThreads">
            <summary>
             Returns the complete threads table.
            </summary>
            <returns>List&lt;Dictionary&lt;string, string&gt;&gt; or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Provider.Telephony.LoadData">
            <summary>
             Loads the needed tables in it's tmp vars.
            <para>*NOTE* U need to call this method ONLY if "IsInitialized" is false</para>
            <para>*NOTE* If "IsInitialized" is still false after manually call this method pls report this issue.</para>
            <para>*REPORT VIA* http://forum.xda-developers.com/showthread.php?t=2772502</para>
            <para>*REPORT VIA* webmaster@sebastiangrinke.info</para>
            </summary>
            <returns>bool</returns>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.Provider.Contacts">
            <summary>
             This is the main class to interact with the device contacts provider database
            <para/>*NOTE*
            <para/>This class require root access!
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Provider.Contacts.DatabasePath">
            <summary>
             Get/Set the remote database path
            <para>*NOTE* The default path is "/data/data/com.android.providers.contacts/databases/contacts2.db"</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Provider.Contacts.IsInitialized">
            <summary>
             Return true if all needed tables are successfully stored in it's tmp vars, otherwise it will return false.
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Provider.Contacts.GetAddresses(System.Int64)">
            <summary>
             Returns the contact postal address based on its contact id (not raw_contact_id)
            </summary>
            <param name="contactID">contact id</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Provider.Contacts.GetDataByMimetype(System.Int64,System.String)">
            <summary>
             Returns the "unknown" contact data based on it's mimetype
            </summary>
            <param name="contactID">contact id</param>
            <param name="mimetype">android cursor</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Provider.Contacts.GetDataByMimetype(System.Int64,System.Int64)">
            <summary>
             Returns the "unknown" contact data based on it's mimetype
            </summary>
            <param name="contactID">contact id</param>
            <param name="mimetype">mimetype id</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Provider.Contacts.GetEmails(System.Int64)">
            <summary>
             Returns the contact emails based on its contact id (not raw_contact_id)
            </summary>
            <param name="contactID">contact id</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Provider.Contacts.GetEvents(System.Int64)">
            <summary>
             Returns the contact events based on its contact id (not raw_contact_id)
            </summary>
            <param name="contactID">contact id</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Provider.Contacts.GetGroupMemberships(System.Int64)">
            <summary>
             Returns the contact group ids based on its contact id (not raw_contact_id)
            </summary>
            <param name="contactID">contact id</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Provider.Contacts.GetContactIDByRawContactID(System.Int64)">
            <summary>
             Returns the contact_id which matches with the given raw_contact_id otherwise it will return -1.
            </summary>
            <param name="rawContactID">raw_contact_id</param>
            <returns><see cref="T:System.Int64"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Provider.Contacts.GetIdentities(System.Int64)">
            <summary>
             Returns the contact identities based on its contact id (not raw_contact_id)
            </summary>
            <param name="contactID">contact id</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Provider.Contacts.GetIMs(System.Int64)">
            <summary>
             Returns the contact instant messenger ids based on its contact id (not raw_contact_id)
            </summary>
            <param name="contactID">contact id</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Provider.Contacts.GetName(System.Int64)">
            <summary>
             Returns the contact name based on its contact id (not raw_contact_id)
            </summary>
            <param name="contactID">contact id</param>
            <returns><see cref="T:AndroidCtrl.ADB.Device.Provider.ContactsName"/> or <see cref="T:null"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Provider.Contacts.GetNickname(System.Int64)">
            <summary>
             Returns the contact nickname based on its contact id (not raw_contact_id)
            </summary>
            <param name="contactID">contact id</param>
            <returns><see cref="T:AndroidCtrl.ADB.Device.Provider.ContactsNickname"/> or <see cref="T:null"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Provider.Contacts.GetNote(System.Int64)">
            <summary>
             Returns the contact note based on its contact id (not raw_contact_id)
            </summary>
            <param name="contactID">contact id</param>
            <returns><see cref="T:AndroidCtrl.ADB.Device.Provider.ContactsNote"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Provider.Contacts.GetNotes(System.Int64)">
            <summary>
             Returns the contact notes based on its contact id (not raw_contact_id)
            </summary>
            <param name="contactID">contact id</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Provider.Contacts.GetOrganization(System.Int64)">
            <summary>
             Returns the contact organization based on its contact id (not raw_contact_id)
            </summary>
            <param name="contactID">contact id</param>
            <returns><see cref="T:AndroidCtrl.ADB.Device.Provider.ContactsOrganization"/> or <see cref="T:null"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Provider.Contacts.GetPhoneNumbers(System.Int64)">
            <summary>
             Returns the contact phone numbers based on its contact id (not raw_contact_id)
            </summary>
            <param name="contactID">contact id</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Provider.Contacts.GetPhoto(System.Int64)">
            <summary>
             Returns the contact photo if exists (Format should be JPEG)
            </summary>
            <param name="contactID">contact_id</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Provider.Contacts.GetPhotos(System.Int64)">
            <summary>
             Returns the contact photos if exists (Format should be JPEG)
            </summary>
            <param name="contactID">contact_id</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Provider.Contacts.GetPhotosByRawContactIDs(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
             Returns the contact photos if exists (Format should be JPEG)
            </summary>
            <param name="rawContactIDs">raw_contact_id's</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Provider.Contacts.GetRelations(System.Int64)">
            <summary>
             Returns the contact relations based on its contact id (not raw_contact_id)
            </summary>
            <param name="contactID">contact id</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Provider.Contacts.GetSipAddresses(System.Int64)">
            <summary>
             Returns the contact sip-addresses based on its contact id (not raw_contact_id)
            </summary>
            <param name="contactID">contact id</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Provider.Contacts.GetWebsites(System.Int64)">
            <summary>
             Returns the contact websites based on its contact id (not raw_contact_id)
            </summary>
            <param name="contactID">contact id</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Provider.Contacts.GetContacts">
            <summary>
             Returns the complete contacts table.
            </summary>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Provider.Contacts.GetContactIDs">
            <summary>
             Returns all contact "_id"s.
            </summary>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Provider.Contacts.GetGroup(System.String)">
            <summary>
             Return the group ID if exists otherwise it will return "-1"
            </summary>
            <param name="groupName">The group string like "family", "friends", etc.</param>
            <returns><see cref="T:System.Int64"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Provider.Contacts.GetGroup(System.Int64)">
            <summary>
             Return the group if the given ID exists otherwise it will return "null".
            </summary>
            <param name="groupID">The group long ID</param>
            <returns><see cref="T:System.String"/> or <see cref="T:null"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Provider.Contacts.GetGroups">
            <summary>
             Returns the complete groups table.
            </summary>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Provider.Contacts.GetMimeType(System.String)">
            <summary>
             Return the mimetype ID if exists otherwise it will return "-1"
            </summary>
            <param name="mimetype">The mimetype like "vnd.android.cursor.item/name"</param>
            <returns><see cref="T:System.Int64"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Provider.Contacts.GetMimeType(System.Int64)">
            <summary>
             Return the mimetype if the given ID exists otherwise it will return "null".
            </summary>
            <param name="mimetypeID">The mimetype long ID</param>
            <returns><see cref="T:System.String"/> or <see cref="T:null"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Provider.Contacts.GetMimeType(AndroidCtrl.ADB.Device.Provider.AndroidCursor)">
            <summary>
             Return the mimetype ID if exists otherwise it will return "-1".
            </summary>
            <param name="cursor"><see cref="T:AndroidCtrl.ADB.Device.Provider.AndroidCursor"/></param>
            <returns><see cref="T:System.String"/> or <see cref="T:null"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Provider.Contacts.GetMimeTypes">
            <summary>
             Returns the complete mimetypes table.
            </summary>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Provider.Contacts.GetRawContactDataByMimetype(System.Int64,System.String)">
            <summary>
             Returns the "unknown" contact data based on it's mimetype
            </summary>
            <param name="rawContactID">raw contact id</param>
            <param name="mimetype">android cursor</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Provider.Contacts.GetRawContactDataByMimetype(System.Int64,System.Int64)">
            <summary>
             Returns the "unknown" contact data based on it's mimetype
            </summary>
            <param name="rawContactID">raw contact id</param>
            <param name="mimetype">mimetype id</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Provider.Contacts.GetRawContactIDsByContactID(System.Int64)">
            <summary>
             Returns the raw_contact_id's which matches with the given website
            </summary>
            <param name="contactID">contact website</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Provider.Contacts.GetRawContactIDsByDisplayName(System.String)">
            <summary>
             Returns the raw_contact_id's which matches with the given display name
            </summary>
            <param name="contactName">contact name</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Provider.Contacts.GetRawContactIDsByEmailAdress(System.String)">
            <summary>
             Returns the raw_contact_id's which matches with the given email adress
            </summary>
            <param name="contactEmailAdress">contact email adress</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Provider.Contacts.GetRawContactIDsByGroupMembership(System.String)">
            <summary>
             Returns the raw_contact_id's which matches with the given email adress
            </summary>
            <param name="contactGroupName">contact group name</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Provider.Contacts.GetRawContactIDsByGroupMembership(System.Int64)">
            <summary>
             Returns the contact id's which matches with the given email adress
            </summary>
            <param name="contactGroupID">contact group ID</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Provider.Contacts.GetRawContactIDsByIM(System.String)">
            <summary>
             Returns the raw_contact_id's which matches with the given IM id
            </summary>
            <param name="contactIM">contact instant-messenger id</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Provider.Contacts.GetRawContactIDsByNickname(System.String)">
            <summary>
             Returns the raw_contact_id's which matches with the given nickname
            </summary>
            <param name="contactNickname">contact nickname</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Provider.Contacts.GetRawContactIDsByOrganization(System.String)">
            <summary>
             Returns the raw_contact_id's which matches with the given organization
            </summary>
            <param name="contactOrganization">contact organization</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Provider.Contacts.GetRawContactIDsByPhoneNumber(System.String)">
            <summary>
             Returns the raw_contact_id's which matches with the given phone number
            </summary>
            <param name="contactNumber">contact number</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Provider.Contacts.GetRawContactIDsByWebsite(System.String)">
            <summary>
             Returns the raw_contact_id's which matches with the given website
            </summary>
            <param name="contactWebsite">contact website</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Provider.Contacts.GetRawContacts">
            <summary>
             Returns the complete raw_contacts table.
            </summary>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Provider.Contacts.LoadData">
            <summary>
             Loads the needed tables in it's tmp vars.
            <para/>*NOTE*
            <para/>If "IsInitialized" is still false after multiple calls, pls report this issue.
            <para/>*REPORT VIA*
            <para/>http://forum.xda-developers.com/showthread.php?t=2772502
            <para/>k1ll3r8e@googlemail.com
            </summary>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.Shell.ShellMode">
            <summary>
             ADB shell versions
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Shell.ShellMode.None">
            <summary>
             None / Uninitialised
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Shell.ShellMode.CMD">
            <summary>
             Single-Command
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Shell.ShellMode.Interactive">
            <summary>
             Interactive
            </summary>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.Shell.ShellPacket">
            <summary>
             Shell v2 packet IDs
            <para/>https://android.googlesource.com/platform/system/core/+/master/adb/shell_protocol.h
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Shell.ShellPacket.StdIn">
            <summary>
             StdIn
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Shell.ShellPacket.StdOut">
            <summary>
             StdOut
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Shell.ShellPacket.StdErr">
            <summary>
             StdErr
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Shell.ShellPacket.Exit">
            <summary>
             Exit
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Shell.ShellPacket.CloseStdIn">
            <summary>
             Close subprocess stdin if possible.
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Shell.ShellPacket.WindowSizeChange">
            <summary>
             Window size change (an ASCII version of struct winsize).
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Shell.ShellPacket.Invalid">
            <summary>
             Indicates an invalid or unknown packet.
            </summary>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.Shell.ShellVersion">
            <summary>
             ADB shell versions
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Shell.ShellVersion.None">
            <summary>
             None / Uninitialised
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Shell.ShellVersion.V1">
            <summary>
             Version 1
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.Shell.ShellVersion.V2">
            <summary>
             Version 2
            </summary>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.Shell.ShellDataEventHandler">
            <summary>
             This event will be raised if new data has been received
            </summary>
            <param name="sender">error/output <see cref="T:System.String"/></param>
            <param name="e"><see cref="T:AndroidCtrl.ADB.Device.Shell.ShellDataEventArgs"/></param>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.Shell.ShellDataEventArgs">
            <summary>
             ShellDataEventArgs
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Shell.ShellDataEventArgs.Data">
            <summary>
             Response data
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Shell.ShellDataEventArgs.PID">
            <summary>
             <see cref="T:AndroidCtrl.ADB.IChannel"/> ID
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Shell.ShellDataEventArgs.#ctor(System.Int32,System.String)">
            <summary>
             ShellDataEventArgs
            </summary>
            <param name="pid">process or ADBSocket channel ID <see cref="T:System.Int32"/></param>
            <param name="data">process response <see cref="T:System.String"/></param>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.Shell.IShell">
            <summary>
             ADB shell channel interface for <see cref="F:AndroidCtrl.ADB.Device.Shell.ShellVersion.V1"/> &amp; <see cref="F:AndroidCtrl.ADB.Device.Shell.ShellVersion.V2"/>
            <para/>Represents the Shell interface for <see cref="T:AndroidCtrl.ADB.Device.Shell.Shell"/>
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Shell.IShell.ExitCode">
            <summary>
             Shell exit code
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Shell.IShell.ID">
            <summary>
             Returns the <see cref="P:AndroidCtrl.ADB.IChannel.ID"/>
            <para/>*NOTE*
            <para/>Can be -1
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Shell.IShell.IsAlive">
            <summary>
             Returns <see cref="P:AndroidCtrl.ADB.IChannel.IsConnected"/>
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Shell.IShell.Mode">
            <summary>
             Shell mode
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Shell.IShell.Version">
            <summary>
             Shell version
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Shell.IShell.Close">
            <summary>
             Frees all used resources
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Shell.IShell.Kill">
            <summary>
             Stops the underlying <see cref="T:AndroidCtrl.ADB.IChannel"/> immediately
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Shell.IShell.Start">
            <summary>
             Starts the underlying <see cref="T:AndroidCtrl.ADB.IChannel"/> as interactive
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Shell.IShell.Start(System.String)">
            <summary>
             Starts the underlying <see cref="T:AndroidCtrl.ADB.IChannel"/> as non-interactive and runs the given <paramref name="cmd"/>
            </summary>
            <param name="cmd"><see cref="T:System.String"/></param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Shell.IShell.Start(System.String,System.Boolean)">
            <summary>
             Starts the underlying <see cref="T:AndroidCtrl.ADB.IChannel"/> as non-interactive and runs the given <paramref name="cmd"/>
            </summary>
            <param name="cmd"><see cref="T:System.String"/></param>
            <param name="hres"><see cref="T:System.Boolean"/></param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Shell.IShell.WaitForExit">
            <summary>
             Waits until the <see cref="T:AndroidCtrl.ADB.IChannel"/> is done
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Shell.IShell.WaitForExit(System.Int32)">
            <summary>
             Waits X milliseconds for the <see cref="T:AndroidCtrl.ADB.IChannel"/> to close
            </summary>
            <param name="milliseconds">timeout to wait in milliseconds</param>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Shell.IShell.WriteLine(System.String)">
            <summary>
             Send the given command to the <see cref="T:AndroidCtrl.ADB.IChannel"/>
            </summary>
            <param name="cmd">command to send</param>
        </member>
        <member name="E:AndroidCtrl.ADB.Device.Shell.IShell.ErrorEventHandler">
            <summary>
             This event will be raised if any error appear
            </summary>
        </member>
        <member name="E:AndroidCtrl.ADB.Device.Shell.IShell.OutputEventHandler">
            <summary>
             This event will be raised if any output appear
            </summary>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.Shell.Shell">
            <summary>
             Shell, starts an ADB-Shell and return its output via its <see cref="E:AndroidCtrl.ADB.Device.Shell.Shell.ErrorEventHandler"/> &amp; <see cref="E:AndroidCtrl.ADB.Device.Shell.Shell.OutputEventHandler"/>, 
             u have also the ablility to send commands to the running shell via <see cref="M:AndroidCtrl.ADB.Device.Shell.Shell.WriteLine(System.String)"/>.
            <para/>This object implements <see cref="T:AndroidCtrl.ADB.Device.Shell.IShell"/>
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Shell.Shell.#ctor(AndroidCtrl.ADB.IADB)">
            <summary>
             ShellRT - Constructor
            </summary>
            <param name="adb"><see cref="T:AndroidCtrl.ADB.IADB"/></param>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Shell.Shell.#ctor(AndroidCtrl.ADB.IADB,System.Boolean)">
            <summary>
             ShellRT - Constructor
            </summary>
            <param name="adb"><see cref="T:AndroidCtrl.ADB.IADB"/></param>
            <param name="useSu"><see cref="T:System.Boolean"/> works only in conjunction with <see cref="M:AndroidCtrl.ADB.Device.Shell.Shell.Start"/></param>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Shell.Shell.Dispose">
            <summary>
             IDispose
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Shell.Shell.ExitCode">
            <summary>
             Shell exit code
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Shell.Shell.ID">
            <summary>
             Channel ID
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Shell.Shell.IsAlive">
            <summary>
             Checks if the shell is running
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Shell.Shell.Mode">
            <summary>
             Shell mode
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Shell.Shell.Version">
            <summary>
             Shell version
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Shell.Shell.Close">
            <summary>
             Frees all used resources
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Shell.Shell.Kill">
            <summary>
             Stops the underlying <see cref="T:AndroidCtrl.ADB.IChannel"/> immediately
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Shell.Shell.Start">
            <summary>
             Starts the underlying <see cref="T:AndroidCtrl.ADB.IChannel"/> as interactive 
            </summary>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Shell.Shell.Start(System.String)">
            <summary>
             Starts the underlying <see cref="T:AndroidCtrl.ADB.IChannel"/> as non-interactive and runs the given <paramref name="cmd"/>
            </summary>
            <param name="cmd"><see cref="T:System.String"/></param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Shell.Shell.Start(System.String,System.Boolean)">
            <summary>
             Starts the underlying <see cref="T:AndroidCtrl.ADB.IChannel"/> as non-interactive and runs the given <paramref name="cmd"/>
            </summary>
            <param name="cmd"><see cref="T:System.String"/></param>
            <param name="hres"><see cref="T:System.Boolean"/></param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Shell.Shell.WaitForExit">
            <summary>
             Waits until the <see cref="T:AndroidCtrl.ADB.IChannel"/> is done
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Shell.Shell.WaitForExit(System.Int32)">
            <summary>
             Waits X milliseconds for the <see cref="T:AndroidCtrl.ADB.IChannel"/> to close
            </summary>
            <param name="milliseconds">timeout to wait in milliseconds</param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Shell.Shell.WindowMetrics(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
             Sets the window metrics and cursor position
            <para/>*NOTE*
            <para/>Works only with <see cref="F:AndroidCtrl.ADB.Device.Shell.ShellVersion.V2"/>
            </summary>
            <param name="width"><see cref="T:System.Int32"/></param>
            <param name="height"><see cref="T:System.Int32"/></param>
            <param name="x"><see cref="T:System.Int32"/></param>
            <param name="y"><see cref="T:System.Int32"/></param>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Shell.Shell.WriteLine(System.String)">
            <summary>
             Send the given command the running process
            </summary>
            <param name="cmd">command to send</param>
        </member>
        <member name="E:AndroidCtrl.ADB.Device.Shell.Shell.ErrorEventHandler">
            <summary>
             This event will be raised if any error appear
            </summary>
        </member>
        <member name="E:AndroidCtrl.ADB.Device.Shell.Shell.OutputEventHandler">
            <summary>
             This event will be raised if any output appear
            </summary>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.Uptime">
            <summary>
             Uptime holds the uptime data
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Uptime.#ctor(System.Int32,System.String,System.Int32,System.String,System.Int32,System.String,System.Int32,System.String)">
            <summary>
             Creates a new Uptime
            </summary>
            <param name="days">up-days</param>
            <param name="time">up-time</param>
            <param name="idleDays">idle-days</param>
            <param name="idleTime">idle-time</param>
            <param name="sleepDays">sleep-days</param>
            <param name="sleepTime">sleep-time</param>
            <param name="users">loggedon users</param>
            <param name="load">load-average</param>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Uptime.Days">
            <summary>
             Holds the up days
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Uptime.IdleDays">
            <summary>
             Holds the idle-time
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Uptime.IdleTime">
            <summary>
             Holds the idle-time
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Uptime.Load">
            <summary>
             Holds the load-average
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Uptime.SleepDays">
            <summary>
             Holds the sleep-time
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Uptime.SleepTime">
            <summary>
             Holds the sleep-time
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Uptime.Time">
            <summary>
             Holds the up hours, minutes and seconds (if available)
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Uptime.Users">
            <summary>
             Holds the loggedon users
            </summary>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.BusyBox.CompressionTar">
            <summary>
             Tar compress IDs
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.BusyBox.CompressionTar.None">
            <summary>
             none
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.BusyBox.CompressionTar.BZIP2">
            <summary>
             bzip2
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.BusyBox.CompressionTar.GZIP">
            <summary>
             gzip
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.BusyBox.CompressionTar.LZMA">
            <summary>
             lzma
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.BusyBox.CompressionTar.TAR">
            <summary>
             tar
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.BusyBox.CompressionTar.XZ">
            <summary>
             xz
            </summary>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.BusyBox.BusyBox">
            <summary>
             BusyBox is the general class to interact with the device busybox.
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.BusyBox.BusyBox.Exists">
            <summary>
             Check if busybox is installed and working
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.BusyBox.BusyBox.PATH_BUSYBOX">
            <summary>
             Set/Get the (full/physical) remote busybox path
            <para>*NOTE* Switch this property ONLY if busybox is NOT installed and placed somewhere on the device!</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.BusyBox.BusyBox.Version">
            <summary>
             Return the current BusyBox version number
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.BusyBox.BusyBox.Find">
            <summary>
             Returns and if not exist, creates the Find instance
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.BusyBox.BusyBox.Tar">
            <summary>
             Returns and if not exist, creates the Tar instance
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.BusyBox.BusyBox.HashFile(System.String,AndroidCtrl.HashMode)">
            <summary>
             Generate a hash value from the file path and IDHash
            </summary>
            <param name="remotePath">Remote file path</param>
            <param name="hash"><see cref="T:AndroidCtrl.HashMode"/></param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.String"/> or <see cref="T:null"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.BusyBox.BusyBox.HexDump(System.String)">
            <summary>
             Gets the hexdump from the given file path
            </summary>
            <param name="remotePath">Remote file path</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.BusyBox.BusyBox.HexDump(System.String,System.Threading.CancellationToken)">
            <summary>
             Gets the hexdump from the given file path
            </summary>
            <param name="remotePath">Remote file path</param>
            <param name="cancellationToken">CancellationToken</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.BusyBox.BusyBox.ShellCmd(System.String,System.Int32)">
            <summary>
             Send an BusyBox-Shell-Command to the Device
            <para/>*NOTE*
            <para/>timeout = -1 implies infinite
            <para/>If u want send an SU-Command set <see cref="P:AndroidCtrl.ADB.IADB.UseSu"/> to true
            </summary>
            <param name="cmd">Command to send</param>
            <param name="timeout">time the process will wait for output, -1 implies infinite, 0 implies class internal <see cref="P:AndroidCtrl.ADB.IADB.CmdTimeout"/></param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.BusyBox.BusyBox.ShellCmd(System.String,System.Threading.CancellationToken,System.Int32)">
            <summary>
             Send an BusyBox-Shell-Command to the Device
            <para/>*NOTE*
            <para/>timeout = -1 implies infinite
            <para/>If u want send an SU-Command set <see cref="P:AndroidCtrl.ADB.IADB.UseSu"/> to true
            </summary>
            <param name="cmd">Command to send</param>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/></param>
            <param name="timeout">time the process will wait for output, -1 implies infinite, 0 implies class internal <see cref="P:AndroidCtrl.ADB.IADB.CmdTimeout"/></param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.BusyBox.BusyBox.ShellCmd(System.String,AndroidCtrl.ADB.Device.Shell.ShellDataEventHandler,System.Int32)">
            <summary>
             Send an BusyBox-Shell-Command to the Device
            <para/>*NOTE*
            <para/>timeout = -1 implies infinite
            <para/>If u want send an SU-Command set <see cref="P:AndroidCtrl.ADB.IADB.UseSu"/> to true
            </summary>
            <param name="cmd">Command to send</param>
            <param name="shellDataEventHandler"><see cref="T:AndroidCtrl.ADB.Device.Shell.ShellDataEventHandler"/></param>
            <param name="timeout">time the process will wait for output, -1 implies infinite, 0 implies class internal <see cref="P:AndroidCtrl.ADB.IADB.CmdTimeout"/></param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.BusyBox.BusyBox.ShellCmd(System.String,AndroidCtrl.ADB.Device.Shell.ShellDataEventHandler,System.Threading.CancellationToken,System.Int32)">
            <summary>
             Send an BusyBox-Shell-Command to the Device
            <para/>*NOTE*
            <para/>timeout = -1 implies infinite
            <para/>If u want send an SU-Command set <see cref="P:AndroidCtrl.ADB.IADB.UseSu"/> to true
            </summary>
            <param name="cmd">Command to send</param>
            <param name="shellDataEventHandler"><see cref="T:AndroidCtrl.ADB.Device.Shell.ShellDataEventHandler"/></param>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/></param>
            <param name="timeout">time the process will wait for output, -1 implies infinite, 0 implies class internal <see cref="P:AndroidCtrl.ADB.IADB.CmdTimeout"/></param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.BusyBox.BusyBox.ShellCmdHRes(System.String,System.Int32)">
            <summary>
             Send an BusyBox-Shell-Command to the Device and return the HResult
            <para/>*NOTE*
            <para/>timeout = -1 implies infinite
            <para/>If u want send an SU-Command set <see cref="P:AndroidCtrl.ADB.IADB.UseSu"/> to true
            </summary>
            <param name="cmd">Command to send</param>
            <param name="timeout">time the process will wait for output, -1 implies infinite, 0 implies class internal <see cref="P:AndroidCtrl.ADB.IADB.CmdTimeout"/></param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Int32"/> -1 (implies NULL on the shell return)</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.BusyBox.BusyBox.ShellCmdHRes(System.String,System.Threading.CancellationToken,System.Int32)">
            <summary>
             Send an BusyBox-Shell-Command to the Device and return the HResult
            <para/>*NOTE*
            <para/>timeout = -1 implies infinite
            <para/>If u want send an SU-Command set <see cref="P:AndroidCtrl.ADB.IADB.UseSu"/> to true
            </summary>
            <param name="cmd">Command to send</param>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/></param>
            <param name="timeout">time the process will wait for output, -1 implies infinite, 0 implies class internal <see cref="P:AndroidCtrl.ADB.IADB.CmdTimeout"/></param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Int32"/> -1 (implies NULL on the shell return)</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.BusyBox.BusyBox.ShellCmdHRes(System.String,AndroidCtrl.ADB.Device.Shell.ShellDataEventHandler,System.Int32)">
            <summary>
             Send an BusyBox-Shell-Command to the Device and return the HResult
            <para/>*NOTE*
            <para/>timeout = -1 implies infinite
            <para/>If u want send an SU-Command set <see cref="P:AndroidCtrl.ADB.IADB.UseSu"/> to true
            </summary>
            <param name="cmd">Command to send</param>
            <param name="shellDataEventHandler"><see cref="T:AndroidCtrl.ADB.Device.Shell.ShellDataEventHandler"/></param>
            <param name="timeout">time the process will wait for output, -1 implies infinite, 0 implies class internal <see cref="P:AndroidCtrl.ADB.IADB.CmdTimeout"/></param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Int32"/> -1 (implies NULL on the shell return)</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.BusyBox.BusyBox.ShellCmdHRes(System.String,AndroidCtrl.ADB.Device.Shell.ShellDataEventHandler,System.Threading.CancellationToken,System.Int32)">
            <summary>
             Send an BusyBox-Shell-Command to the Device and return the HResult
            <para/>*NOTE*
            <para/>timeout = -1 implies infinite
            <para/>If u want send an SU-Command set <see cref="P:AndroidCtrl.ADB.IADB.UseSu"/> to true
            </summary>
            <param name="cmd">Command to send</param>
            <param name="shellDataEventHandler"><see cref="T:AndroidCtrl.ADB.Device.Shell.ShellDataEventHandler"/></param>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/></param>
            <param name="timeout">time the process will wait for output, -1 implies infinite, 0 implies class internal <see cref="P:AndroidCtrl.ADB.IADB.CmdTimeout"/></param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Int32"/> -1 (implies NULL on the shell return)</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.BusyBox.BusyBox.Tools">
            <summary>
             Return all BusyBox included tools
            </summary>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.BusyBox.Find">
            <summary>
             Find is the general class to interact with busybox find.
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.BusyBox.Find.All(System.String,System.String)">
            <summary>
             Search everything that match the given item
            </summary>
            <param name="remoteFolder">Directory path to deep search</param>
            <param name="item">File/Folder name (case insensitiv)</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.BusyBox.Find.All(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
             Search everything that match the given item
            </summary>
            <param name="remoteFolder">Directory path to deep search</param>
            <param name="item">File/Folder name (case insensitiv)</param>
            <param name="cancellationToken">CancellationToken</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.BusyBox.Find.BlockDeviceFile(System.String,System.String)">
            <summary>
             Search block device files
            </summary>
            <param name="remoteFolder">Directory path to deep search</param>
            <param name="item">File/Folder name (case insensitiv)</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.BusyBox.Find.BlockDeviceFile(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
             Search block device files
            </summary>
            <param name="remoteFolder">Directory path to deep search</param>
            <param name="item">File/Folder name (case insensitiv)</param>
            <param name="cancellationToken">CancellationToken</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.BusyBox.Find.CharacterDeviceFile(System.String,System.String)">
            <summary>
             Search character device files
            </summary>
            <param name="remoteFolder">Directory path to deep search</param>
            <param name="item">File/Folder name (case insensitiv)</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.BusyBox.Find.CharacterDeviceFile(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
             Search character device files
            </summary>
            <param name="remoteFolder">Directory path to deep search</param>
            <param name="item">File/Folder name (case insensitiv)</param>
            <param name="cancellationToken">CancellationToken</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.BusyBox.Find.Directory(System.String,System.String)">
            <summary>
             Search directorys
            </summary>
            <param name="remoteFolder">Directory path to deep search</param>
            <param name="item">File/Folder name (case insensitiv)</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.BusyBox.Find.Directory(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
             Search directorys
            </summary>
            <param name="remoteFolder">Directory path to deep search</param>
            <param name="item">File/Folder name (case insensitiv)</param>
            <param name="cancellationToken">CancellationToken</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.BusyBox.Find.File(System.String,System.String)">
            <summary>
             Search files
            </summary>
            <param name="remoteFolder">Directory path to deep search</param>
            <param name="item">File/Folder name (case insensitiv)</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.BusyBox.Find.File(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
             Search files
            </summary>
            <param name="remoteFolder">Directory path to deep search</param>
            <param name="item">File/Folder name (case insensitiv)</param>
            <param name="cancellationToken">CancellationToken</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.BusyBox.Find.Link(System.String,System.String)">
            <summary>
             Search symlinks
            </summary>
            <param name="remoteFolder">Directory path to deep search</param>
            <param name="item">File/Folder name (case insensitiv)</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.BusyBox.Find.Link(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
             Search symlinks
            </summary>
            <param name="remoteFolder">Directory path to deep search</param>
            <param name="item">File/Folder name (case insensitiv)</param>
            <param name="cancellationToken">CancellationToken</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.BusyBox.Find.NamedPipe(System.String,System.String)">
            <summary>
             Search named pipes
            </summary>
            <param name="remoteFolder">Directory path to deep search</param>
            <param name="item">File/Folder name (case insensitiv)</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.BusyBox.Find.NamedPipe(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
             Search named pipes
            </summary>
            <param name="remoteFolder">Directory path to deep search</param>
            <param name="item">File/Folder name (case insensitiv)</param>
            <param name="cancellationToken">CancellationToken</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.BusyBox.Find.UnixDomainSocket(System.String,System.String)">
            <summary>
             Search unix domain sockets
            </summary>
            <param name="remoteFolder">Directory path to deep search</param>
            <param name="item">File/Folder name (case insensitiv)</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.BusyBox.Find.UnixDomainSocket(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
             Search unix domain sockets
            </summary>
            <param name="remoteFolder">Directory path to deep search</param>
            <param name="item">File/Folder name (case insensitiv)</param>
            <param name="cancellationToken">CancellationToken</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.BusyBox.Tar">
            <summary>
             Tar is the general class to interact with busybox tar.
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.BusyBox.Tar.CreateFromDirectory(System.String,AndroidCtrl.ADB.Device.BusyBox.CompressionTar)">
            <summary>
             Create an compressed tar from the given path
            </summary>
            <param name="remotePath">Directory to compress</param>
            <param name="compression">Compression type</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.BusyBox.Tar.CreateFromDirectory(System.String,AndroidCtrl.ADB.Device.BusyBox.CompressionTar,System.Threading.CancellationToken)">
            <summary>
             Create an compressed tar from the given path
            </summary>
            <param name="remotePath">Directory to compress</param>
            <param name="compression">Compression type</param>
            <param name="cancellationToken">CancellationToken</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.BusyBox.Tar.CreateFromDirectory(System.String,AndroidCtrl.ADB.Device.BusyBox.CompressionTar,System.String)">
            <summary>
             Create an compressed tar from the given path
            </summary>
            <param name="remotePath">Directory to compress</param>
            <param name="compression">Compression type</param>
            <param name="tarName">(optional) tar file name (without .tar, .tar.gz, etc.)</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.BusyBox.Tar.CreateFromDirectory(System.String,AndroidCtrl.ADB.Device.BusyBox.CompressionTar,System.String,System.Threading.CancellationToken)">
            <summary>
             Create an compressed tar from the given path
            </summary>
            <param name="remotePath">Directory to compress</param>
            <param name="compression">Compression type</param>
            <param name="tarName">(optional) tar file name (without .tar, .tar.gz, etc.)</param>
            <param name="cancellationToken">CancellationToken</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.BusyBox.Tar.CreateFromDirectoryList(System.String,System.Collections.Generic.IList{System.String},AndroidCtrl.ADB.Device.BusyBox.CompressionTar)">
            <summary>
             Create an compressed tar from the given file and directory names inside the given working directory
            </summary>
            <param name="remotePath">Remote working directory</param>
            <param name="paths">List with file and directory names to compress</param>
            <param name="compression">Compression type</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.BusyBox.Tar.CreateFromDirectoryList(System.String,System.Collections.Generic.IList{System.String},AndroidCtrl.ADB.Device.BusyBox.CompressionTar,System.Threading.CancellationToken)">
            <summary>
             Create an compressed tar from the given file and directory names inside the given working directory
            </summary>
            <param name="remotePath">Remote working directory</param>
            <param name="paths">List with file and directory names to compress</param>
            <param name="compression">Compression type</param>
            <param name="cancellationToken">CancellationToken</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.BusyBox.Tar.CreateFromDirectoryList(System.String,System.Collections.Generic.IList{System.String},AndroidCtrl.ADB.Device.BusyBox.CompressionTar,System.String)">
            <summary>
             Create an compressed tar from the given file and directory names inside the given working directory
            </summary>
            <param name="remotePath">Remote working directory</param>
            <param name="paths">List with file and directory names to compress</param>
            <param name="compression">Compression type</param>
            <param name="tarName">(optional) tar file name (without .tar, .tar.gz, etc.)</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.BusyBox.Tar.CreateFromDirectoryList(System.String,System.Collections.Generic.IList{System.String},AndroidCtrl.ADB.Device.BusyBox.CompressionTar,System.String,System.Threading.CancellationToken)">
            <summary>
             Create an compressed tar from the given file and directory names inside the given working directory
            </summary>
            <param name="remotePath">Remote working directory</param>
            <param name="paths">List with file and directory names to compress</param>
            <param name="compression">Compression type</param>
            <param name="tarName">(optional) tar file name (without .tar, .tar.gz, etc.)</param>
            <param name="cancellationToken">CancellationToken</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.BusyBox.Tar.CreateFromFile(System.String,AndroidCtrl.ADB.Device.BusyBox.CompressionTar)">
            <summary>
             Create an compressed tar from the given path
            </summary>
            <param name="remotePath">File to compress</param>
            <param name="compression">Compression type</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.BusyBox.Tar.CreateFromFile(System.String,AndroidCtrl.ADB.Device.BusyBox.CompressionTar,System.Threading.CancellationToken)">
            <summary>
             Create an compressed tar from the given path
            </summary>
            <param name="remotePath">File to compress</param>
            <param name="compression">Compression type</param>
            <param name="cancellationToken">CancellationToken</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.BusyBox.Tar.CreateFromFile(System.String,AndroidCtrl.ADB.Device.BusyBox.CompressionTar,System.String)">
            <summary>
             Create an compressed tar from the given path
            </summary>
            <param name="remotePath">File to compress</param>
            <param name="compression">Compression type</param>
            <param name="tarName">(optional) tar file name (without .tar, .tar.gz, etc.)</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.BusyBox.Tar.CreateFromFile(System.String,AndroidCtrl.ADB.Device.BusyBox.CompressionTar,System.String,System.Threading.CancellationToken)">
            <summary>
             Create an compressed tar from the given path
            </summary>
            <param name="remotePath">File to compress</param>
            <param name="compression">Compression type</param>
            <param name="tarName">(optional) tar file name (without .tar, .tar.gz, etc.)</param>
            <param name="cancellationToken">CancellationToken</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.BusyBox.Tar.Extract(System.String,AndroidCtrl.ADB.Device.BusyBox.CompressionTar)">
            <summary>
             Extract the content of the given tar file
            </summary>
            <param name="remotePath">Tar file path</param>
            <param name="compression">De-Compression type</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.BusyBox.Tar.Extract(System.String,AndroidCtrl.ADB.Device.BusyBox.CompressionTar,System.Threading.CancellationToken)">
            <summary>
             Extract the content of the given tar file
            </summary>
            <param name="remotePath">Tar file path</param>
            <param name="compression">De-Compression type</param>
            <param name="cancellationToken">CancellationToken</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.BusyBox.Tar.Extract(System.String,AndroidCtrl.ADB.Device.BusyBox.CompressionTar,System.String)">
            <summary>
             Extract the content of the given tar file
            </summary>
            <param name="remotePath">Tar file path</param>
            <param name="compression">De-Compression type</param>
            <param name="extractTo">Remote extraction path
            <para>*NOTE* If this variable is null a new directory will be generated and the content of the tar file will be extracted to it</para>
            </param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.BusyBox.Tar.Extract(System.String,AndroidCtrl.ADB.Device.BusyBox.CompressionTar,System.String,System.Threading.CancellationToken)">
            <summary>
             Extract the content of the given tar file
            </summary>
            <param name="remotePath">Tar file path</param>
            <param name="compression">De-Compression type</param>
            <param name="extractTo">Remote extraction path
            <para>*NOTE* If this variable is null a new directory will be generated and the content of the tar file will be extracted to it</para>
            </param>
            <param name="cancellationToken">CancellationToken</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.BusyBox.Tar.ExtractList(System.String,System.Collections.Generic.IList{System.String},AndroidCtrl.ADB.Device.BusyBox.CompressionTar)">
            <summary>
             Extract the given files/directories from the given tar file
            </summary>
            <param name="remotePath">Tar file path</param>
            <param name="paths">List with file and directory names to de-compress</param>
            <param name="compression">De-Compression type</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.BusyBox.Tar.ExtractList(System.String,System.Collections.Generic.IList{System.String},AndroidCtrl.ADB.Device.BusyBox.CompressionTar,System.Threading.CancellationToken)">
            <summary>
             Extract the given files/directories from the given tar file
            </summary>
            <param name="remotePath">Tar file path</param>
            <param name="paths">List with file and directory names to de-compress</param>
            <param name="compression">De-Compression type</param>
            <param name="cancellationToken">CancellationToken</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.BusyBox.Tar.ExtractList(System.String,System.Collections.Generic.IList{System.String},AndroidCtrl.ADB.Device.BusyBox.CompressionTar,System.String)">
            <summary>
             Extract the given files/directories from the given tar file
            </summary>
            <param name="remotePath">Tar file path</param>
            <param name="paths">List with file and directory names to de-compress</param>
            <param name="compression">De-Compression type</param>
            <param name="extractTo">Remote extraction path
            <para>*NOTE* If this variable is null a new directory will be generated and the content of the tar file will be extracted to it</para></param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.BusyBox.Tar.ExtractList(System.String,System.Collections.Generic.IList{System.String},AndroidCtrl.ADB.Device.BusyBox.CompressionTar,System.String,System.Threading.CancellationToken)">
            <summary>
             Extract the given files/directories from the given tar file
            </summary>
            <param name="remotePath">Tar file path</param>
            <param name="paths">List with file and directory names to de-compress</param>
            <param name="compression">De-Compression type</param>
            <param name="extractTo">Remote extraction path
            <para>*NOTE* If this variable is null a new directory will be generated and the content of the tar file will be extracted to it</para></param>
            <param name="cancellationToken">CancellationToken</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.BusyBox.Tar.List(System.String)">
            <summary>
             List the content of the given tar file
            </summary>
            <param name="remotePath">Tar file path</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.BusyBox.Tar.List(System.String,System.Threading.CancellationToken)">
            <summary>
             List the content of the given tar file
            </summary>
            <param name="remotePath">Tar file path</param>
            <param name="cancellationToken">CancellationToken</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.BusyBox.Tar.ShowFile(System.String,System.String,AndroidCtrl.ADB.Device.BusyBox.CompressionTar)">
            <summary>
             Decompress a single file to stdout and return it as an List string
            <para>*NOTE* This will CURRENTLY ONLY work with UTF-8 encoded files, all other encodings will be destroyed while the transfer</para>
            </summary>
            <param name="remotePath">Tar file path</param>
            <param name="viewFile">File to view (Path example: Folder/file.txt or file.txt)</param>
            <param name="compression">De-Compression type</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.BusyBox.Tar.ShowFile(System.String,System.String,AndroidCtrl.ADB.Device.BusyBox.CompressionTar,System.Threading.CancellationToken)">
            <summary>
             Decompress a single file to stdout and return it as an List string
            <para>*NOTE* This will CURRENTLY ONLY work with UTF-8 encoded files, all other encodings will be destroyed while the transfer</para>
            </summary>
            <param name="remotePath">Tar file path</param>
            <param name="viewFile">File to view (Path example: Folder/file.txt or file.txt)</param>
            <param name="compression">De-Compression type</param>
            <param name="cancellationToken">CancellationToken</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.ExtDeviceInfo">
            <summary>
             ExtDeviceInfo holds the device information
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.ExtDeviceInfo.BusyBoxExist">
            <summary>
             Holds the value from ADB.Instance().Device.BusyBox.Exist
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.ExtDeviceInfo.BusyBoxVersion">
            <summary>
             Holds the value from ADB.Instance().Device.BusyBox.Version
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.ExtDeviceInfo.BusyBoxTools">
            <summary>
             Holds the value from ADB.Instance().Device.BusyBox.Tools()
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.ExtDeviceInfo.SUExist">
            <summary>
             Holds the value from ADB.Instance().Device.SU.Exist
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.ExtDeviceInfo.SUVersion">
            <summary>
             Holds the value from ADB.Instance().Device.SU.Version
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.ExtDeviceInfo.ADBSerial">
            <summary>
             Holds the value from ADB.Instance().DeviceID if exist
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.ExtDeviceInfo.ADBSecure">
            <summary>
             Holds the value from ro.adb.secure if exist
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.ExtDeviceInfo.ADBRoot">
            <summary>
             Holds the value from service.adb.root if exist
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.ExtDeviceInfo.ADBTCPPort">
            <summary>
             Holds the value from service.adb.tcp.port if exist
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.ExtDeviceInfo.ADBQEmuD">
            <summary>
             Holds the value from ro.adb.qemud if exist
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.ExtDeviceInfo.BootHardware">
            <summary>
             Holds the value from ro.boot.hardware if exist
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.ExtDeviceInfo.BootMode">
            <summary>
             Holds the value from ro.boot.mode if exist
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.ExtDeviceInfo.BootSerialNo">
            <summary>
             Holds the value from ro.boot.serialno if exist
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.ExtDeviceInfo.BuildCharacteristics">
            <summary>
             Holds the value from ro.build.characteristics if exist
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.ExtDeviceInfo.BuildPDA">
            <summary>
             Holds the value from ro.build.PDA if exist
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.ExtDeviceInfo.BuildDate">
            <summary>
             Holds the value from ro.build.date if exist
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.ExtDeviceInfo.BuildHost">
            <summary>
             Holds the value from ro.build.host if exist
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.ExtDeviceInfo.BuildDescription">
            <summary>
             Holds the value from ro.build.description if exist
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.ExtDeviceInfo.BuildDisplayID">
            <summary>
             Holds the value from ro.build.display.id if exist
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.ExtDeviceInfo.BuildFingerprint">
            <summary>
             Holds the value from ro.build.fingerprint if exist
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.ExtDeviceInfo.BuildHiddenVer">
            <summary>
             Holds the value from ro.build.hidden_ver if exist
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.ExtDeviceInfo.BuildID">
            <summary>
             Holds the value from ro.build.id if exist
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.ExtDeviceInfo.BuildProduct">
            <summary>
             Holds the value from ro.build.product if exist
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.ExtDeviceInfo.BuildSeLinux">
            <summary>
             Holds the value from ro.build.selinux if exist
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.ExtDeviceInfo.BuildTags">
            <summary>
             Holds the value from ro.build.tags if exist
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.ExtDeviceInfo.BuildType">
            <summary>
             Holds the value from ro.build.type if exist
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.ExtDeviceInfo.BuildUser">
            <summary>
             Holds the value from ro.build.user if exist
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.ExtDeviceInfo.BuildVersion">
            <summary>
             Holds the value from ro.build.version if exist
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.ExtDeviceInfo.BuildVersionCodename">
            <summary>
             Holds the value from ro.build.version.codename if exist
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.ExtDeviceInfo.BuildVersionIncremental">
            <summary>
             Holds the value from ro.build.version.incremental if exist
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.ExtDeviceInfo.BuildVersionRelease">
            <summary>
             Holds the value from ro.build.version.release if exist
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.ExtDeviceInfo.BuildVersionSDK">
            <summary>
             Holds the value from ro.build.version.sdk if exist
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.ExtDeviceInfo.ProductName">
            <summary>
             Holds the value from ro.product.name if exist
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.ExtDeviceInfo.ProductModel">
            <summary>
             Holds the value from ro.product.model if exist
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.ExtDeviceInfo.ProductManufacturer">
            <summary>
             Holds the value from ro.product.manufacturer if exist
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.ExtDeviceInfo.ProductDevice">
            <summary>
             Holds the value from ro.product.device if exist
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.ExtDeviceInfo.ProductBoard">
            <summary>
             Holds the value from ro.product.board if exist
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.ExtDeviceInfo.ProductBrand">
            <summary>
             Holds the value from ro.product.brand if exist
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.ExtDeviceInfo.ProductCpuAbi">
            <summary>
             Holds the value from ro.product.cpu.abi if exist
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.ExtDeviceInfo.ProductCpuAbi2">
            <summary>
             Holds the value from ro.product.cpu.abi2 if exist
            </summary>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.ASDK">
            <summary>
             Android SDK ids
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.ASDK.UNKNOWN">
            <summary>
             unknown
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.ASDK.V1">
            <summary>
             Android 1.0
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.ASDK.V1_1">
            <summary>
             Android 1.1
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.ASDK.V1_5">
            <summary>
             Android 1.5
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.ASDK.V1_6">
            <summary>
             Android 1.6
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.ASDK.V2">
            <summary>
             Android 2.0
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.ASDK.V2_0_1">
            <summary>
             Android 2.0.1
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.ASDK.V2_1">
            <summary>
             Android 2.1
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.ASDK.V2_2">
            <summary>
             Android 2.2 - 2.2.2
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.ASDK.V2_3">
            <summary>
             Android 2.3 - 2.3.2
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.ASDK.V2_3_3">
            <summary>
             Android 2.3.3 - 2.3.7
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.ASDK.V3">
            <summary>
             Android 3.0
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.ASDK.V3_1">
            <summary>
             Android 3.1
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.ASDK.V3_2">
            <summary>
             Android 3.2 - 3.2.1
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.ASDK.V4">
            <summary>
             Android 4.0 - 4.0.2
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.ASDK.V4_0_x">
            <summary>
             Android 4.0.3 - 4.0.4
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.ASDK.V4_1_x">
            <summary>
             Android 4.1 - 4.1.2
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.ASDK.V4_2_x">
            <summary>
             Android 4.2 - 4.2.2
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.ASDK.V4_3_x">
            <summary>
             Android 4.3 - 4.3.1
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.ASDK.V4_4_x">
            <summary>
             Android 4.4 - 4.4.4
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.ASDK.V4_4W_2">
            <summary>
             Android 4.4W.2
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.ASDK.V5">
            <summary>
             Android 5.0 - 5.0.2
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.ASDK.V5_1_x">
            <summary>
             Android 5.1 - 5.1.1
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.ASDK.V6">
            <summary>
             Android 6.0 - 6.0.1
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.ASDK.V7">
            <summary>
             Android 7.0
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.ASDK.V7_1_x">
            <summary>
             Android 7.1 - 7.1.2
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.ASDK.V8">
            <summary>
             Android 8.0
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.ASDK.V8_1">
            <summary>
             Android 8.1
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Device.ASDK.V9">
            <summary>
             Android 9
            </summary>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.SQLite.Options">
            <summary>
             This class is designed to define the needed sqlite3 options
            <para>*NOTE* This class can only be used if u have an "Open()" connection! U can check this with the "IsOpen" parameter.</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.SQLite.Options.Bail">
            <summary>
             .bail (Stop after hitting an error.  Default OFF)
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.SQLite.Options.Echo">
            <summary>
             .echo (Turn command echo on or off)
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.SQLite.Options.Explain">
            <summary>
             .explain (Turn output mode suitable for EXPLAIN on or off.)
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.SQLite.Options.Header">
            <summary>
             .header (Turn display of headers on or off.)
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.SQLite.Options.Mode">
            <summary>
             .mode (Set output mode where Mode is one of:)
            <para>csv (Comma-separated values)</para>
            <para>column (Left-aligned columns.  (See .width))</para>
            <para>html (HTML code)</para>
            <para>insert (SQL insert statements for TABLE)</para>
            <para>line (One value per line)</para>
            <para>list (Values delimited by .separator string)</para>
            <para>tabs (Tab-separated values)</para>
            <para>tcl (TCL list elements)</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.SQLite.Options.NullValue">
            <summary>
             .nullvalue (Print STRING in place of NULL values)
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.SQLite.Options.Output">
            <summary>
             .output ("stdout" Send output to the commandline. | "/path/to/ur/file" Send the output to the give file.)
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.SQLite.Options.Separator">
            <summary>
             .separator (Change separator used by output mode and .import)
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.SQLite.Options.Stats">
            <summary>
             .stats (Turn stats on or off)
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.SQLite.Options.Timer">
            <summary>
             .timer (Turn the CPU timer measurement on or off)
            </summary>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.SQLite.QueryTools">
            <summary>
             This class give u access to some basic sql tools
            <para>*NOTE* This class is a helper class to build an sql query.</para>
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.SQLite.QueryTools.Quote(System.String)">
            <summary>
             Quote
            </summary>
            <param name="str">field to quote</param>
            <returns>string</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.SQLite.QueryTools.Replace(System.String,System.String,System.String,System.Boolean)">
            <summary>
             Replace the field-output in "field", search for "s" and replace with "r"
            </summary>
            <param name="field">field for replace</param>
            <param name="s">search string</param>
            <param name="r">replacement string</param>
            <param name="quoteSR">if true "s" and "r" will be set in single-quotes (')</param>
            <returns>string</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.SQLite.QueryTools.ReplaceNL(System.String)">
            <summary>
             Replace "\r" with "&lt;_R_&gt;" and "\n" with "&lt;_N_&gt;"
            </summary>
            <param name="field">field to replace</param>
            <returns>string</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.SQLite.QueryTools.ReplaceNL(System.String,System.String,System.String)">
            <summary>
             Replace "\r" with the given "r" string and "\n" with the given "n" string.
            </summary>
            <param name="field">field to replace</param>
            <param name="r">Replacement for "\r" (Use no single-quotes ('))</param>
            <param name="n">Replacement for "\n" (Use no single-quotes ('))</param>
            <returns>string</returns>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.SQLite.SQLite3">
            <summary>
             This is the main class to interact with the device internal SQLite3
            <para/>*NOTE*
            <para/>sqlite must be already installed on the device!
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.SQLite.SQLite3.Dispose">
            <summary>
             IDisposable
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.SQLite.SQLite3.CmdTimeout">
            <summary>
             Set the response timeout in milliseconds, the default value is 500
            <para>*NOTE* This timeout defines the maximum wait time for an line of output</para>
            <para>*NOTE* This value can only be set if there is no command in progress!</para>
            <para>*HINT* U can check this with IsDone</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.SQLite.SQLite3.Exists">
            <summary>
             Checks if SQLite3 is installed. If so, it will return true otherwise it returns false
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.SQLite.SQLite3.IsDone">
            <summary>
             Return true if the last command is done otherwise it will return false
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.SQLite.SQLite3.IsOpen">
            <summary>
             Returns true if the database connection is established otherwise it returns false
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.SQLite.SQLite3.LastError">
            <summary>
             Returns the last error
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.SQLite.SQLite3.PATH_SQLITE3">
            <summary>
             Set/Get the (full/physical) remote sqlite3 path
            <para>*NOTE* Switch this property ONLY if sqlite3 is NOT installed and placed somewhere on the device!</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.SQLite.SQLite3.UseSu">
            <summary>
             Set to true if u want to use sqlite3 with su rights
            <para>*NOTE* This value can only be set if no connection is established!</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.SQLite.SQLite3.Version">
            <summary>
             Returns the SQLite3 version number or "string.Empty"
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.SQLite.SQLite3.Cancel">
            <summary>
             Cancel the current operation
            <para>*NOTE* This method reopens the database! Because we can't "cancel" an executed command, we have to close the current sqlite3 shell instance and start a new one.</para>
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.SQLite.SQLite3.Close">
            <summary>
             Close the database connection
            </summary>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.SQLite.SQLite3.CreateKeyArrayFromLine(System.String[],System.String,System.Boolean)">
            <summary>
             Creates an Key-Array from the given data
            </summary>
            <param name="keyArr">Table header array</param>
            <param name="rawline">Raw SQL line</param>
            <param name="unQuote">Remove single-quotes (')</param>
            <returns><see cref="T:System.Collections.Generic.Dictionary`2"/> or <see cref="T:null"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.SQLite.SQLite3.CreateKeyArrayFromLine(System.String[],System.String[],System.Boolean)">
            <summary>
             Creates an Key-Array from the given data
            </summary>
            <param name="keyArr">Table header array</param>
            <param name="rawLineArr">Raw SQL line</param>
            <param name="unQuote">Remove single-quotes (')</param>
            <returns><see cref="T:System.Collections.Generic.Dictionary`2"/> or <see cref="T:null"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.SQLite.SQLite3.CreateKeyArrayFromQuery(System.String[])">
            <summary>
             Creates an List&lt;Dictionary&lt;string, string&gt;&gt; from the given query data
            <para>*NOTE* This query is auto-terminated with an ";"</para>
            <para>*NOTE* U can send an single string query like "SELECT * FROM somewhere"</para>
            <para>*NOTE* Or u can build an query like ("SELECT", "*", "FROM", "somewhere")</para>
            <para>*WARNING* Use "X'0D'" and "X'0A'" instead of "\r" and "\n" in ur requests! If u can't avoid an request with "\r" or "\n", use Execute() and parse the output ur self.</para>
            <para>*HINT* U can use QueryTools.ReplaceNL() to replace "\r" and "\n"</para>
            </summary>
            <param name="query">SQL-query</param>
            <returns><see cref="T:System.Collections.Generic.List`1"/> or <see cref="T:null"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.SQLite.SQLite3.CreateKeyArrayFromQuery(System.Boolean,System.String[])">
            <summary>
             Creates an List&lt;Dictionary&lt;string, string&gt;&gt; from the given query data
            <para>*NOTE* This query is auto-terminated with an ";"</para>
            <para>*NOTE* U can send an single string query like "SELECT * FROM somewhere"</para>
            <para>*NOTE* Or u can build an query like ("SELECT", "*", "FROM", "somewhere")</para>
            <para>*WARNING* Use "X'0D'" and "X'0A'" instead of "\r" and "\n" in ur requests! If u can't avoid an request with "\r" or "\n", use Execute() and parse the output ur self.</para>
            <para>*HINT* U can use QueryTools.ReplaceNL() to replace "\r" and "\n"</para>
            </summary>
            <param name="unQuote">Remove single-quotes (')</param>
            <param name="query">SQL-query</param>
            <returns><see cref="T:System.Collections.Generic.List`1"/> or <see cref="T:null"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.SQLite.SQLite3.CreateKeyArrayFromQuery(System.Collections.Generic.List{System.String})">
            <summary>
             Creates an List&lt;Dictionary&lt;string, string&gt;&gt; from the given output
            <para>*NOTE* "rawData" must be created with ".header ON" output (Options.Header = true) otherwise this method will fail!</para>
            <para>*IMPORTENT* The 1st line in the List&lt;string&gt; must be the table headers!</para>
            </summary>
            <param name="rawData">For example the return from ExecuteQuery()</param>
            <returns><see cref="T:System.Collections.Generic.List`1"/> or <see cref="T:null"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.SQLite.SQLite3.CreateKeyArrayFromQuery(System.Boolean,System.Collections.Generic.List{System.String})">
            <summary>
             Creates an List&lt;Dictionary&lt;string, string&gt;&gt; from the given output
            <para>*NOTE* "rawData" must be created with ".header ON" output (Options.Header = true) otherwise this method will fail!</para>
            <para>*IMPORTENT* The 1st line in the List&lt;string&gt; must be the table headers!</para>
            </summary>
            <param name="unQuote">Remove single-quotes (')</param>
            <param name="rawData">For example the return from ExecuteQuery()</param>
            <returns><see cref="T:System.Collections.Generic.List`1"/> or <see cref="T:null"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.SQLite.SQLite3.Execute(System.String)">
            <summary>
             Execute ur own sqlite3 command
            <para>*NOTE* Remember if u send an SQL-query terminate it with an ";" or simply use Query()</para>
            </summary>
            <param name="cmd">command</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.SQLite.SQLite3.ExecuteQuery(System.String[])">
            <summary>
             Send the given SQL-query to the device
            <para>*NOTE* This query is auto-terminated with an ";"</para>
            <para>*NOTE* U can send an single string query like "SELECT * FROM somewhere"</para>
            <para>*NOTE* Or u can build an query like ("SELECT", "*", "FROM", "somewhere")</para>
            <para>*WARNING* Use "X'0D'" and "X'0A'" instead of "\r" and "\n" in ur requests! If u can't avoid an request with "\r" or "\n", use Execute() and parse the output ur self.</para>
            <para>*HINT* U can use QueryTools.ReplaceNL() to replace "\r" and "\n"</para>
            <para>*REASON* This function will cut the 1st line of output to guarantee that u only get the requested output, without the query-command u send.</para>
            <para>*REASON* In addition, this feature is really relevant for internal needs.</para>
            </summary>
            <param name="query">SQL-query</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.SQLite.SQLite3.Open(System.String)">
            <summary>
             Opens the remote DB for interaction
            </summary>
            <param name="database">remote DB path</param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.SQLite.SQLite3.Options">
            <summary>
             Returns and if not exist, creates the Options instance
            </summary>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.BuildProperties">
            <summary>
             BuildProperties is the general class to manage the build.prop
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.BuildProperties.Get(System.String,System.Boolean)">
            <summary>
             Get the given build property if exists, if not it returns an empty string
            </summary>
            <param name="property">property name to get</param>
            <param name="dictionary">true for class internal dictinary search</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.String"/> or <see cref="F:System.String.Empty"/></returns>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.BuildProperties.GetProperties">
            <summary>
             Returns the class internal build property dictionary
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.BuildProperties.Refresh">
            <summary>
             Returns the build properties and set the new dictionary to the class internal dictionary
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.BuildProperties.Set(System.String,System.String)">
            <summary>
             Set a build property on the device
            </summary>
            <param name="property">Property key</param>
            <param name="val">Property value</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.Device">
            <summary>
             Device is the general class to interact with the device, here u find some pre-defined shell/busybox commands.
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Device.#ctor(AndroidCtrl.ADB.IADB)">
            <summary>
             Creates the Device instance, from here u can use a wide range of predefined functions to interact with the device.
            </summary>
            <param name="adb"><see cref="T:AndroidCtrl.ADB.IADB"/></param>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Device.BuildProperties">
            <summary>
             Returns and if not exist, creates the BuildProperties instance
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Device.BusyBox">
            <summary>
             Returns and if not exist, creates the BusyBox instance
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Device.Daemon">
            <summary>
             Returns and if not exist, creates the Daemon instance
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Device.Dumpsys">
            <summary>
             Returns and if not exist, creates the Dumpsys instance
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Device.Forensics">
            <summary>
             Returns and if not exist, creates the Forensics instance
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Device.Input">
            <summary>
             Returns and if not exist, creates the Input instance
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Device.IO">
            <summary>
             Returns and if not exist, creates the IO instance
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Device.Logcat">
            <summary>
             Returns and if not exist, creates the Logcat instance
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Device.Manager">
            <summary>
             Returns and if not exist, creates the Manager instance
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Device.OpenRecoveryScript">
            <summary>
             Returns a new OpenRecoveryScript instance
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Device.Phone">
            <summary>
             Returns and if not exist, creates the Phone instance
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Device.Provider">
            <summary>
             Returns and if not exist, creates the Provider instance
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Device.Screen">
            <summary>
             Returns and if not exist, creates the Screen instance
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Device.SQLite3">
            <summary>
             Returns a new SQLite3 instance
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Device.Su">
            <summary>
             Returns and if not exist, creates the Su instance
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Device.Wipe">
            <summary>
             Returns and if not exist, creates the Wipe instance
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Device.Dmesg">
            <summary>
             Read the dmesg from the device and return the data as list string.
            </summary>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Device.Dmesg(System.String)">
            <summary>
             Read the dmesg from the device and write it to an file on the device.
            </summary>
            <param name="remoteFilePath">Logfile device path</param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Device.GetSDK">
            <summary>
             Returns the SDK version
            </summary>
            <returns><see cref="T:AndroidCtrl.ADB.Device.ASDK"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Device.Info">
            <summary>
             Returns an extended device info
            <para/>*NOTE*
            <para/>This method needs, depending on the device, a few seconds.
            </summary>
            <returns>ExtDeviceInfo</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Device.Kmsg(System.String)">
            <summary>
             Write the kmsg or last_kmsg to an file on the device. Which one is written depends on the device.
            </summary>
            <param name="remoteFilePath">Logfile device path</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Device.Uptime">
            <summary>
             Returns the Uptime
            <para/>*NOTE*
            <para/>if busybox is not installed <see cref="P:AndroidCtrl.ADB.Device.IUptime.Load"/> will be empty
            </summary>
            <returns><see cref="T:AndroidCtrl.ADB.Device.IUptime"/> or <see cref="T:null"/></returns>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.Forensics">
            <summary>
             This class give u access to basic forensic tools
            <para>*NOTE* This class require root access!</para>
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Forensics.Kill(System.String,System.String)">
            <summary>
             This will use (kill -10 PID) to create a hprof file from the given PID
             <para>*NOTE* The file can be found at /data/misc/heap-dump-tm"timestamp"-pid"PID".hprof</para>
             <para>*NOTE* This will not work in newer versions of android, in this case i can refer to DumpHeap().</para>
            </summary>
            <param name="PID">Process id to kill</param>
            <param name="signal">Signal, default is -10</param>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Forensics.DumpHeap(System.String,System.String,System.Boolean,System.String)">
            <summary>
             This will create a heap dump of the given process.
            </summary>
            <param name="PID">Process id to snapshot</param>
            <param name="remoteFile">Remote dump file path</param>
            <param name="n">Use breaks (?)</param>
            <param name="user">User id or "current"</param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Forensics.PartitionCopy(System.String,System.String)">
            <summary>
             This will create a copy of the given mountpoint (dd if=/path/to/mountpoint of=/path/to/backup.dd)
            </summary>
            <param name="mountPoint">Mountpoint to copy</param>
            <param name="remoteBackupPath">Backup file path on the device</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Forensics.RemoveLockScreenGestureStock">
            <summary>
             Try to remove the lockscreen gesture key file on the device
            </summary>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Forensics.TryExtractData(System.String)">
            <summary>
             This will try to extract some dbs from the device to the given path
             *NOTE* Depending on the device and the size of the directories, this can take a while.
            </summary>
            <param name="localDirectoryPath">Local backup path</param>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.OpenRecoveryScript">
            <summary>
             This class creates an OpenRecoveryScript file with the defined values and write it to the device.
            <para/>*NOTE*
            <para/>The ADB-Daemon must have sufficient privilegs
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.OpenRecoveryScript.BackupAndroidSecure">
            <summary>
             Set the A = .android_secure param
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.OpenRecoveryScript.BackupBoot">
            <summary>
             Set the B = Boot (kernel) partition param
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.OpenRecoveryScript.BackupCache">
            <summary>
             Set the C = Cache partition param
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.OpenRecoveryScript.BackupData">
            <summary>
             Set the D = Data partition param
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.OpenRecoveryScript.BackupSdExt">
            <summary>
             Set the E = sd-ext partition param
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.OpenRecoveryScript.BackupNoMD5sums">
            <summary>
             Set the M = Do not create MD5sums param
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.OpenRecoveryScript.BackupCompression">
            <summary>
             Set the O = Enable backup compression param
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.OpenRecoveryScript.BackupRecovery">
            <summary>
             Set the R = Recovery partition param
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.OpenRecoveryScript.BackupSystem">
            <summary>
             Set the S = System partition param
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.OpenRecoveryScript.BackupSpecial1">
            <summary>
             Set the 1 = Special partition 1 param
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.OpenRecoveryScript.BackupSpecial2">
            <summary>
             Set the 2 = Special partition 2 param
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.OpenRecoveryScript.BackupSpecial3">
            <summary>
             Set the 3 = Special partition 3 param
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.OpenRecoveryScript.BackupDirectory">
            <summary>
             Set the foldername param (Optional) NO "/" at the beginning
             <para>*HINT* Folder name in the devices backups folder, not the full path</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.OpenRecoveryScript.WipeCache">
            <summary>
             Set the wipe cache param
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.OpenRecoveryScript.WipeDalvik">
            <summary>
             Set the wipe dalvik-cache param
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.OpenRecoveryScript.WipeData">
            <summary>
             Set the wipe data param
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.OpenRecoveryScript.RestoreAndroidSecure">
            <summary>
             Set the A = .android_secure param
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.OpenRecoveryScript.RestoreBoot">
            <summary>
             Set the B = Boot (kernel) partition param
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.OpenRecoveryScript.RestoreCache">
            <summary>
             Set the C = Cache partition param
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.OpenRecoveryScript.RestoreData">
            <summary>
             Set the D = Data partition param
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.OpenRecoveryScript.RestoreSdExt">
            <summary>
             Set the E = sd-ext partition param
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.OpenRecoveryScript.RestoreNoMD5sums">
            <summary>
             Set the M = Do not check MD5sums param
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.OpenRecoveryScript.RestoreRecovery">
            <summary>
             Set the R = Recovery partition param
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.OpenRecoveryScript.RestoreSystem">
            <summary>
             Set the S = System partition param
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.OpenRecoveryScript.RestoreSpecial1">
            <summary>
             Set the 1 = Special partition 1 param
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.OpenRecoveryScript.RestoreSpecial2">
            <summary>
             Set the 2 = Special partition 2 param
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.OpenRecoveryScript.RestoreSpecial3">
            <summary>
             Set the 3 = Special partition 3 param
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.OpenRecoveryScript.RestoreDirectory">
            <summary>
             Set the foldername param
             <para>*HINT* The full path to the backup folder (/mnt/sdcard/(Backup provider)/BACKUPS/(Device serial number)/foldername)</para>
             <para>*HINT* If u only set these path all backuped partitions will be restored.</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.OpenRecoveryScript.InstallFilePath">
            <summary>
             Set the zip file path (/path/to/romfile.zip)
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.OpenRecoveryScript.WriteScriptToDevice">
            <summary>
             Creates the openrecoveryscript file in /cache/recovery/ on the device
            </summary>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.OpenRecoveryScript.GetBackupArgs">
            <summary>
             Get the configured values into a single string
            </summary>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.OpenRecoveryScript.GetRestoreArgs">
            <summary>
             Get the configured values into a single string
            </summary>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.Phone">
            <summary>
             Phone is the general class to interact with the phone/sms part on the device
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Phone.AddContact(System.String,System.String)">
            <summary>
             Adds an new contact on the device
            <para/>*NOTE*
            <para/>If the device is locked, this function will sometimes freeze the current thread.
            </summary>
            <param name="name">Contact name</param>
            <param name="number">Contact number</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Phone.AddContact(System.String,System.String,System.String)">
            <summary>
             Adds an new contact on the device
            <para/>*NOTE*
            <para/>If the device is locked, this function will sometimes freeze the current thread.
            </summary>
            <param name="name">Contact name</param>
            <param name="number">Contact number</param>
            <param name="email">Contact email</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Phone.Call(System.String)">
            <summary>
             Calls the given number on the device
            <para/>*NOTE*
            <para/>If the device is locked, this function will sometimes freeze the current thread.
            </summary>
            <param name="number">Number to call (+49123456 or 0049123456)</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Phone.Dial(System.String)">
            <summary>
             Dials the given number on the device
            <para/>*NOTE*
            <para/>If the device is locked, this function will sometimes freeze the current thread.
            </summary>
            <param name="number">Number to dial (+49123456 or 0049123456)</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Phone.EndCall">
            <summary>
             Ends the active call
            <para/>*NOTE*
            <para/>If the device is locked, this function will sometimes freeze the current thread.
            </summary>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Phone.SendSMS(System.String,System.String)">
            <summary>
             Send the given text as SMS from the device to the given number
            <para/>*NOTE*
            <para/>This will only work if the display is on and NOT locked or if the display is off and NOT locked.
            <para/>If the device is locked, this function will sometimes freeze the current thread until its unlocked.
            </summary>
            <param name="receiver">Number of recipient (+49123456) or (0049123456)</param>
            <param name="text">Text to send *NOTE* 160 signs are 1 SMS</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.Wipe">
            <summary>
             This class give u access to some predefined wipe methods
             <para>*NOTE* Parts of these class require root access!</para>
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Wipe.Cache">
            <summary>
             Wipe the Cache directory/mount
             <para>*NOTE* This method requires root access on the device.</para>
            </summary>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Wipe.Dalvik">
            <summary>
             Wipe the Dalvik-Cache
             <para>*NOTE* This method requires root access on the device.</para>
            </summary>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Wipe.Data">
            <summary>
             Wipe the Data directory/mount
             <para>*NOTE* This method requires root access on the device.</para>
            </summary>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Wipe.Tmp">
            <summary>
             Wipe the System-Tmp directory "/data/local/tmp/"
            </summary>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.Daemon">
            <summary>
             Daemon is the general class to manage the adb daemon on the device.
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Daemon.IsRoot">
            <summary>
             Check if adbd have root rights on the device
            </summary>
            <returns>bool</returns>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Daemon.PATH_ADBD">
            <summary>
             Set/Get the (full/physical) remote busybox path
            <para/>*NOTE*
            <para/>Switch this property ONLY if adbd is NOT inside the given path!
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Daemon.Restart(System.Int32)">
            <summary>
             Restart adbd on the device
            <para/>*NOTE*
            <para/>If port is empty or 0, NO port value will be set to the device. If port is -1 the device will restart in USB mode.
            </summary>
            <param name="port">restarts the adbd on the given port</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Daemon.Root">
            <summary>
             Restart adbd with root permissions on the device
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Daemon.Stop">
            <summary>
             Stop adbd on the device
            <para/>*NOTE*
            <para/>After a call to this function adb is no longer available and u need to manually restart the daemon on the device.
            </summary>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Daemon.UnRoot">
            <summary>
             Restart adbd without root permissions on the device
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Daemon.AddBuildPropEntries">
            <summary>
             Adds "ro.adb.secure=1", "service.adb.root=0" and "service.adb.tcp.port=-1" to the "/system/build.prop" so that adbd is able to start in root mode
            <para/>*NOTE*
            <para/>This may not work on stock roms!
            </summary>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.Su">
            <summary>
             Su is the general class to interact with su rights on the device.
            <para/>*NOTE*
            <para/>This class require root access!
            <para/>If the device is in RECOVERY state, the enforcement of "su -c" will stop, until the device is back in DEVICE state.
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Su.Exists">
            <summary>
             Checks if su is installed and working
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Su.Version">
            <summary>
             Version return the current su version number (if supported)
            <para/>*NOTE*
            <para/>If the version can not be determined, su is not found or not accessable, the return is string.Empty.
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Su.ShellCmd(System.String,System.Int32)">
            <summary>
             Send an SU-Shell-Command to the Device
            <para/>*NOTE*
            <para/>timeOut = -1 implies infinite
            </summary>
            <param name="cmd">Command to send</param>
            <param name="timeout">time the process will wait for output, -1 implies infinite, 0 implies class internal timeout. timeOut = 0 use the instance default <see cref="P:AndroidCtrl.ADB.IADB.CmdTimeout"/>.</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Su.ShellCmd(System.String,System.Threading.CancellationToken,System.Int32)">
            <summary>
             Send an SU-Shell-Command to the Device
            <para/>*NOTE*
            <para/>timeOut = -1 implies infinite
            </summary>
            <param name="cmd">Command to send</param>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/></param>
            <param name="timeout">time the process will wait for output, -1 implies infinite, 0 implies class internal timeout. timeOut = 0 use the instance default <see cref="P:AndroidCtrl.ADB.IADB.CmdTimeout"/>.</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Su.ShellCmd(System.String,AndroidCtrl.ADB.Device.Shell.ShellDataEventHandler,System.Int32)">
            <summary>
             Send an SU-Shell-Command to the Device
            <para/>*NOTE*
            <para/>timeOut = -1 implies infinite
            </summary>
            <param name="cmd">Command to send</param>
            <param name="shellDataEventHandler"><see cref="T:AndroidCtrl.ADB.Device.Shell.ShellDataEventHandler"/></param>
            <param name="timeout">time the process will wait for output, -1 implies infinite, 0 implies class internal timeout. timeOut = 0 use the instance default <see cref="P:AndroidCtrl.ADB.IADB.CmdTimeout"/>.</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Su.ShellCmd(System.String,AndroidCtrl.ADB.Device.Shell.ShellDataEventHandler,System.Threading.CancellationToken,System.Int32)">
            <summary>
             Send an SU-Shell-Command to the Device
            <para/>*NOTE*
            <para/>timeOut = -1 implies infinite
            </summary>
            <param name="cmd">Command to send</param>
            <param name="shellDataEventHandler"><see cref="T:AndroidCtrl.ADB.Device.Shell.ShellDataEventHandler"/></param>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/></param>
            <param name="timeout">time the process will wait for output, -1 implies infinite, 0 implies class internal timeout. timeOut = 0 use the instance default <see cref="P:AndroidCtrl.ADB.IADB.CmdTimeout"/>.</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Su.ShellCmdHRes(System.String,System.Int32)">
            <summary>
             Send an SU-Shell-Command to the Device and return the HResult
            <para/>*NOTE* 
            <para/>timeout = -1 implies infinite
            </summary>
            <param name="cmd">Command to send</param>
            <param name="timeout">time the process will wait for output, -1 implies infinite, 0 implies class internal timeout. timeOut = 0 use the instance default <see cref="P:AndroidCtrl.ADB.IADB.CmdTimeout"/>.</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Int32"/> -1 (implies NULL on the shell return)</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Su.ShellCmdHRes(System.String,System.Threading.CancellationToken,System.Int32)">
            <summary>
             Send an SU-Shell-Command to the Device and return the HResult
            <para/>*NOTE*
            <para/>timeout = -1 implies infinite
            </summary>
            <param name="cmd">Command to send</param>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/></param>
            <param name="timeout">time the process will wait for output, -1 implies infinite, 0 implies class internal timeout. timeOut = 0 use the instance default <see cref="P:AndroidCtrl.ADB.IADB.CmdTimeout"/>.</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Int32"/> -1 (implies NULL on the shell return)</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Su.ShellCmdHRes(System.String,AndroidCtrl.ADB.Device.Shell.ShellDataEventHandler,System.Int32)">
            <summary>
             Send an SU-Shell-Command to the Device and return the HResult
            <para/>*NOTE*
            <para/>timeout = -1 implies infinite
            </summary>
            <param name="cmd">Command to send</param>
            <param name="shellDataEventHandler"><see cref="T:AndroidCtrl.ADB.Device.Shell.ShellDataEventHandler"/></param>
            <param name="timeout">time the process will wait for output, -1 implies infinite, 0 implies class internal timeout. timeOut = 0 use the instance default <see cref="P:AndroidCtrl.ADB.IADB.CmdTimeout"/>.</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Int32"/> -1 (implies NULL on the shell return)</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Su.ShellCmdHRes(System.String,AndroidCtrl.ADB.Device.Shell.ShellDataEventHandler,System.Threading.CancellationToken,System.Int32)">
            <summary>
             Send an SU-Shell-Command to the Device and return the HResult
            <para/>*NOTE*
            <para/>timeout = -1 implies infinite
            </summary>
            <param name="cmd">Command to send</param>
            <param name="shellDataEventHandler"><see cref="T:AndroidCtrl.ADB.Device.Shell.ShellDataEventHandler"/></param>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/></param>
            <param name="timeout">time the process will wait for output, -1 implies infinite, 0 implies class internal timeout. timeOut = 0 use the instance default <see cref="P:AndroidCtrl.ADB.IADB.CmdTimeout"/>.</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Int32"/> -1 (implies NULL on the shell return)</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Su.ShellCmdStack(System.Collections.Generic.IEnumerable{System.String},System.Int32)">
            <summary>
             Send an SU-Shell-Command-Stack to the Device
            <para/>*NOTE*
            <para/>Between the cmds in the stack is an delay of 150 ms
            <para/>timeout = -1 implies infinite
            </summary>
            <param name="cmdStack">Command to send to Device Shell</param>
            <param name="timeout">time the process will wait for output, -1 implies infinite and 0 implies the use of the class internal <see cref="P:AndroidCtrl.ADB.IADB.CmdTimeout"/>.</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Su.ShellCmdStack(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken,System.Int32)">
            <summary>
             Send an SU-Shell-Command-Stack to the Device
            <para/>*NOTE*
            <para/>Between the cmds in the stack is an delay of 150 ms
            <para/>timeout = -1 implies infinite
            </summary>
            <param name="cmdStack">Command to send to Device Shell</param>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/></param>
            <param name="timeout">time the process will wait for output, -1 implies infinite and 0 implies the use of the class internal <see cref="P:AndroidCtrl.ADB.IADB.CmdTimeout"/>.</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Su.ShellCmdStack(System.Collections.Generic.IEnumerable{System.String},AndroidCtrl.ADB.Device.Shell.ShellDataEventHandler,System.Int32)">
            <summary>
             Send an SU-Shell-Command-Stack to the Device
            <para/>*NOTE*
            <para/>Between the cmds in the stack is an delay of 150 ms
            <para/>timeout = -1 implies infinite
            </summary>
            <param name="cmdStack">Command to send to Device Shell</param>
            <param name="shellDataEventHandler"><see cref="T:AndroidCtrl.ADB.Device.Shell.ShellDataEventHandler"/></param>
            <param name="timeout">time the process will wait for output, -1 implies infinite and 0 implies the use of the class internal <see cref="P:AndroidCtrl.ADB.IADB.CmdTimeout"/>.</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Su.ShellCmdStack(System.Collections.Generic.IEnumerable{System.String},AndroidCtrl.ADB.Device.Shell.ShellDataEventHandler,System.Threading.CancellationToken,System.Int32)">
            <summary>
             Send an SU-Shell-Command-Stack to the Device
            <para/>*NOTE*
            <para/>Between the cmds in the stack is an delay of 150 ms
            <para/>timeout = -1 implies infinite
            </summary>
            <param name="cmdStack">Command to send to Device Shell</param>
            <param name="shellDataEventHandler"><see cref="T:AndroidCtrl.ADB.Device.Shell.ShellDataEventHandler"/></param>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/></param>
            <param name="timeout">time the process will wait for output, -1 implies infinite and 0 implies the use of the class internal <see cref="P:AndroidCtrl.ADB.IADB.CmdTimeout"/>.</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Su.GetShell">
            <summary>
             Returns a new <see cref="T:AndroidCtrl.ADB.Device.Shell.IShell"/> instance
            </summary>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.NullReferenceException"/>
            <returns><see cref="T:AndroidCtrl.ADB.Device.Shell.IShell"/> or <see cref="T:null"/></returns>
        </member>
        <member name="T:AndroidCtrl.ADB.Shared.ChannelExtensions">
            <summary>
             Includes some ADB-Protocol helper
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Shared.ChannelExtensions.GetSyncCmd(System.Byte[])">
            <summary>
             Converts 4-byte to an <see cref="T:AndroidCtrl.ADB.SyncCmd"/>
            </summary>
            <param name="bytes"><see cref="T:byte[]"/></param>
            <returns><see cref="T:AndroidCtrl.ADB.SyncCmd"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Shared.ChannelExtensions.GetSyncCmd(System.Byte[],System.Int32)">
            <summary>
             Converts 4-byte to an <see cref="T:AndroidCtrl.ADB.SyncCmd"/>
            </summary>
            <param name="bytes"><see cref="T:byte[]"/></param>
            <param name="startIndex">start index for next 4 command bytes</param>
            <returns><see cref="T:AndroidCtrl.ADB.SyncCmd"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Shared.ChannelExtensions.FromUnixTime(System.DateTime,System.Int64)">
            <summary>
             Return an <see cref="T:System.DateTime"/> object which represent the given unix seconds.
            </summary>
            <param name="dateTime"><see cref="T:System.DateTime"/></param>
            <param name="unixTimestamp"><see cref="T:System.Int64"/> unix timestamp</param>
            <returns><see cref="T:System.DateTime"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Shared.ChannelExtensions.ToUnixTime(System.DateTime)">
            <summary>
             Return an <see cref="T:System.UInt32"/> which represent the given <see cref="T:System.DateTime"/> object.
            </summary>
            <param name="dateTime">DateTime object</param>
            <returns><see cref="T:System.UInt32"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Shared.ChannelExtensions.WriteChunk(AndroidCtrl.ADB.IChannel,AndroidCtrl.ADB.SyncCmd,System.String)">
            <summary>
             Builds a sync-data chunk [<see cref="T:AndroidCtrl.ADB.SyncCmd"/>|size|<paramref name="data"/>] and writes it to the <paramref name="channel"/>
            </summary>
            <param name="channel"><see cref="T:AndroidCtrl.ADB.IChannel"/></param>
            <param name="cmd"><see cref="T:AndroidCtrl.ADB.SyncCmd"/></param>
            <param name="data"><see cref="T:System.String"/></param>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.InvalidOperationException"/>
            <exception cref="T:System.NullReferenceException"/>
            <returns><see cref="T:byte[]"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Shared.ChannelExtensions.WriteChunk(AndroidCtrl.ADB.IChannel,AndroidCtrl.ADB.SyncCmd,System.Byte[],System.Int32,System.Int32)">
            <summary>
             Builds a sync-data chunk [<see cref="T:AndroidCtrl.ADB.SyncCmd"/>|<paramref name="size"/>|<paramref name="data"/>] and writes it to the <paramref name="channel"/>
            </summary>
            <param name="channel"><see cref="T:AndroidCtrl.ADB.IChannel"/></param>
            <param name="cmd"><see cref="T:AndroidCtrl.ADB.SyncCmd"/></param>
            <param name="data"><see cref="T:byte[]"/></param>
            <param name="offset"><see cref="T:System.Int32"/></param>
            <param name="size"><see cref="T:System.Int32"/></param>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IndexOutOfRangeException"/>
            <exception cref="T:System.InvalidOperationException"/>
        </member>
        <member name="M:AndroidCtrl.ADB.Shared.ChannelExtensions.WriteFinalChunk(AndroidCtrl.ADB.IChannel,System.DateTime)">
            <summary>
             Builds the last "push" chunk [<see cref="F:AndroidCtrl.ADB.SyncCmd.DONE"/>|file-time] and writes it to the <paramref name="channel"/>
            </summary>
            <param name="channel"><see cref="T:AndroidCtrl.ADB.IChannel"/></param>
            <param name="date"><see cref="T:System.DateTime"/></param>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.InvalidOperationException"/>
            <exception cref="T:System.NullReferenceException"/>
            <returns><see cref="T:byte[]"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Shared.ChannelExtensions.WriteFinalChunk(AndroidCtrl.ADB.IChannel,System.Byte[],System.Int32,System.Int32,System.DateTime)">
            <summary>
             Builds the last "push" chunk like [<see cref="F:AndroidCtrl.ADB.SyncCmd.DATA"/>|<paramref name="size"/>|<paramref name="data"/>|<see cref="F:AndroidCtrl.ADB.SyncCmd.DONE"/>|file-time] and writes it to the <paramref name="channel"/>
            </summary>
            <param name="channel"><see cref="T:AndroidCtrl.ADB.IChannel"/></param>
            <param name="data"><see cref="T:byte[]"/></param>
            <param name="offset"><see cref="T:System.Int32"/></param>
            <param name="size"><see cref="T:System.Int32"/></param>
            <param name="date"><see cref="T:System.DateTime"/></param>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IndexOutOfRangeException"/>
            <exception cref="T:System.InvalidOperationException"/>
            <exception cref="T:System.NullReferenceException"/>
        </member>
        <member name="T:AndroidCtrl.ADB.Shared.Stat">
            <summary>
             Represents the <see cref="F:AndroidCtrl.ADB.SyncCmd.STAT"/>/<see cref="F:AndroidCtrl.ADB.SyncCmd.STA2"/> response
            <para/>Base struct can be found here: https://android.googlesource.com/platform/system/core/+/master/adb/file_sync_protocol.h
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Shared.Stat.#ctor(System.Byte[])">
            <summary>
             Stat <see cref="T:byte[]"/> constructor
            </summary>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="P:AndroidCtrl.ADB.Shared.Stat.ID">
            <summary>
             Stat type <see cref="F:AndroidCtrl.ADB.SyncCmd.STAT"/> or <see cref="F:AndroidCtrl.ADB.SyncCmd.STA2"/>
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Shared.Stat.Error">
            <summary>
             Error code
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Shared.Stat.Dev">
            <summary>
             Dev
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Shared.Stat.INode">
            <summary>
             INode
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Shared.Stat.Mode">
            <summary>
             Mode (chmod)
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Shared.Stat.NLink">
            <summary>
             NLink
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Shared.Stat.UID">
            <summary>
             User-ID
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Shared.Stat.GID">
            <summary>
             Group-ID
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Shared.Stat.Size">
            <summary>
             Size
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Shared.Stat.ATime">
            <summary>
             Last-Access time
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Shared.Stat.MTime">
            <summary>
             Last-Modify time
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Shared.Stat.CTime">
            <summary>
             Creation time
            </summary>
        </member>
        <member name="T:AndroidCtrl.ADB.Shared.ADBExtensions">
            <summary>
             Shared helper for <see cref="T:AndroidCtrl.ADB.Binary.ADB"/> &amp; <see cref="T:AndroidCtrl.ADB.Socket.ADB"/>
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Shared.ADBExtensions.CopyDirectory(AndroidCtrl.ADB.IADB,System.String,AndroidCtrl.ADB.IADB,AndroidCtrl.ADB.Device.IO.Directories,AndroidCtrl.ADB.Device.IO.FileTransferEventHandler,System.Threading.CancellationToken)">
            <summary>
             Copy the given <paramref name="srcPath"/> to the given <paramref name="destPath"/> on the provided <paramref name="destDevice"/>
            </summary>
            <param name="adb"><see cref="T:AndroidCtrl.ADB.IADB"/></param>
            <param name="srcPath">Remote source</param>
            <param name="destDevice"><see cref="T:AndroidCtrl.ADB.IADB"/></param>
            <param name="destPath"><see cref="T:AndroidCtrl.ADB.Device.IO.Directories"/></param>
            <param name="transferEventHandler"><see cref="T:AndroidCtrl.ADB.Device.IO.FileTransferEventHandler"/></param>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/></param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Shared.ADBExtensions.CopyFile(AndroidCtrl.ADB.IADB,System.String,AndroidCtrl.ADB.IADB,System.String,AndroidCtrl.ADB.Device.IO.FileTransferEventHandler,System.Threading.CancellationToken)">
            <summary>
             Copy the given <paramref name="srcPath"/> to the given <paramref name="destPath"/> on the provided <paramref name="destDevice"/>
            <para/>Working:
            <para/><see cref="T:AndroidCtrl.ADB.Binary.ADB"/> &lt;-&gt; <see cref="T:AndroidCtrl.ADB.Binary.ADB"/>
            <para/><see cref="T:AndroidCtrl.ADB.Binary.ADB"/> &lt;-- <see cref="T:AndroidCtrl.ADB.Socket.ADB"/>
            <para/><see cref="T:AndroidCtrl.ADB.Socket.ADB"/> &lt;-&gt; <see cref="T:AndroidCtrl.ADB.Socket.ADB"/>
            <para/>NOT-Working:
            <para/><see cref="T:AndroidCtrl.ADB.Binary.ADB"/> --&gt; <see cref="T:AndroidCtrl.ADB.Socket.ADB"/>
            </summary>
            <param name="adb"><see cref="T:AndroidCtrl.ADB.IADB"/> source device</param>
            <param name="srcPath">Remote source</param>
            <param name="destDevice"><see cref="T:AndroidCtrl.ADB.IADB"/> destination device</param>
            <param name="destPath">Remote destination</param>
            <param name="transferEventHandler"><see cref="T:AndroidCtrl.ADB.Device.IO.FileTransferEventHandler"/></param>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/></param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Shared.ADBExtensions.__ExecIn(AndroidCtrl.ADB.IADB,System.String,System.IO.Stream,System.Threading.CancellationToken,System.Int32)">
            <summary>
            ExecIn is a kind of shell for binary transaction
            </summary>
            <param name="adb"><see cref="T:AndroidCtrl.ADB.IADB"/></param>
            <param name="cmd">Command to run</param>
            <param name="stream">input <see cref="T:System.IO.Stream"/></param>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/></param>
            <param name="timeout">time the method will process the input stream, 0 implies class internal timeout</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Shared.ADBExtensions.__ExecOut(AndroidCtrl.ADB.IADB,System.String,System.IO.Stream,System.Threading.CancellationToken,System.Int32)">
            <summary>
            ExecOut is a kind of shell for binary transaction
            </summary>
            <param name="adb"><see cref="T:AndroidCtrl.ADB.IADB"/></param>
            <param name="cmd">Command to run</param>
            <param name="stream">output <see cref="T:System.IO.Stream"/></param>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/></param>
            <param name="timeout">time the process will wait for output, 0 implies class internal timeout</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Shared.ADBExtensions.PullDirectory(AndroidCtrl.ADB.IADB,System.String,System.IO.DirectoryInfo,AndroidCtrl.ADB.Device.IO.FileTransferEventHandler,System.Threading.CancellationToken)">
            <summary>
             Pull the given remote directory to the given local location
            </summary>
            <param name="adb"><see cref="T:AndroidCtrl.ADB.IADB"/></param>
            <param name="srcPath">Remote path</param>
            <param name="destPath"><see cref="T:System.IO.DirectoryInfo"/></param>
            <param name="transferEventHandler"><see cref="T:AndroidCtrl.ADB.Device.IO.FileTransferEventHandler"/></param>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/></param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Shared.ADBExtensions.PullFile(AndroidCtrl.ADB.IADB,System.String,System.IO.FileInfo,AndroidCtrl.ADB.Device.IO.FileTransferEventHandler,System.Threading.CancellationToken)">
            <summary>
             Pull the given remote file to the given local location
            </summary>
            <param name="adb"><see cref="T:AndroidCtrl.ADB.IADB"/></param>
            <param name="srcPath">Remote path</param>
            <param name="destPath"><see cref="T:System.IO.FileInfo"/></param>
            <param name="transferEventHandler"><see cref="T:AndroidCtrl.ADB.Device.IO.FileTransferEventHandler"/></param>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/></param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Shared.ADBExtensions.PushDirectory(AndroidCtrl.ADB.IADB,System.IO.DirectoryInfo,System.String,AndroidCtrl.ADB.Device.IO.FileTransferEventHandler,System.Threading.CancellationToken)">
            <summary>
             Push the given directory to the given remote location
            </summary>
            <param name="adb"><see cref="T:AndroidCtrl.ADB.IADB"/></param>
            <param name="srcPath"><see cref="T:System.IO.DirectoryInfo"/></param>
            <param name="destPath">Remote path</param>
            <param name="transferEventHandler"><see cref="T:AndroidCtrl.ADB.Device.IO.FileTransferEventHandler"/></param>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/></param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Shared.ADBExtensions.PushFile(AndroidCtrl.ADB.IADB,System.IO.FileInfo,System.String,AndroidCtrl.ADB.Device.IO.FileTransferEventHandler,System.Threading.CancellationToken)">
            <summary>
             Push the given file to the given remote location
            </summary>
            <param name="adb"><see cref="T:AndroidCtrl.ADB.IADB"/></param>
            <param name="srcPath"><see cref="T:System.IO.FileInfo"/></param>
            <param name="destPath">Remote path</param>
            <param name="transferEventHandler"><see cref="T:AndroidCtrl.ADB.Device.IO.FileTransferEventHandler"/></param>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/></param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Shared.ADBExtensions.__ShellCmd(AndroidCtrl.ADB.IADB,System.String,AndroidCtrl.ADB.Device.Shell.ShellDataEventHandler,System.Threading.CancellationToken,System.Int32)">
            <summary>
             Send an Shell-Command to the Device
            </summary>
            <param name="adb"><see cref="T:AndroidCtrl.ADB.IADB"/></param>
            <param name="cmd">Command to send</param>
            <param name="responseEventHandler"><see cref="T:AndroidCtrl.ADB.Device.Shell.ShellDataEventHandler"/></param>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/></param>
            <param name="timeout">time the process will wait for output, -1 implies infinite, 0 implies class internal timeout</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Shared.ADBExtensions.__ShellCmdHRes(AndroidCtrl.ADB.IADB,System.String,AndroidCtrl.ADB.Device.Shell.ShellDataEventHandler,System.Threading.CancellationToken,System.Int32)">
            <summary>
             Send an Shell-Command to the Device and return the HResult
            </summary>
            <param name="adb"><see cref="T:AndroidCtrl.ADB.IADB"/></param>
            <param name="cmd">Command to send</param>
            <param name="responseEventHandler"><see cref="T:AndroidCtrl.ADB.Device.Shell.ShellDataEventHandler"/></param>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/></param>
            <param name="timeout">time the process will wait for output, -1 implies infinite, 0 implies class internal timeout</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns>Exit code or -1 (implies NULL on the shell return)</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Shared.ADBExtensions.__ShellCmdStack(AndroidCtrl.ADB.IADB,System.Collections.Generic.IEnumerable{System.String},AndroidCtrl.ADB.Device.Shell.ShellDataEventHandler,System.Threading.CancellationToken,System.Int32)">
            <summary>
             Send an Shell-Command-Stack to the Device
            </summary>
            <param name="adb"><see cref="T:AndroidCtrl.ADB.IADB"/></param>
            <param name="cmdStack">Commands to send to the device Shell</param>
            <param name="responseEventHandler"><see cref="T:AndroidCtrl.ADB.Device.Shell.ShellDataEventHandler"/></param>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/></param>
            <param name="timeout">time the process will wait for output, -1 implies infinite and 0 implies the use of the class internal CmdTimeOut.</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="T:AndroidCtrl.ADB.Shared.Monitor">
            <summary>
             Manage the <see cref="T:AndroidCtrl.ADB.IADB"/>-Device-Monitor
            <para/>This object implements <see cref="T:AndroidCtrl.IMonitor"/>
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Shared.Monitor.#ctor(AndroidCtrl.DeviceMode)">
            <summary>
             Monitor - Constructor
            </summary>
            <param name="mode"><see cref="T:AndroidCtrl.DeviceMode"/></param>
        </member>
        <member name="P:AndroidCtrl.ADB.Shared.Monitor.Interval">
            <summary>
             Time to wait between checks
            <para/>*NOTE*
            <para/>Default are 10000 ms = 10 sec
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Shared.Monitor.IsStarted">
            <summary>
             Check if the monitor is running
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Shared.Monitor.ForceScan">
            <summary>
             Force the monitor to scan for new devices
            </summary>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Shared.Monitor.ForceScan(System.Boolean)">
            <summary>
             Force the monitor to scan for new devices
            </summary>
            <param name="resetCache"><see cref="T:System.Boolean"/></param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Shared.Monitor.Start">
            <summary>
             Starts a thread which checks every <see cref="P:AndroidCtrl.ADB.Shared.Monitor.Interval"/> sec for changes
            </summary>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Shared.Monitor.Stop(System.Boolean)">
            <summary>
             Stops the Monitor Thread.
            </summary>
            <param name="resetEvents">If true the notify-events will be set to null. In this case u have to set all defined callbacks again!</param>
            <returns>true if stop successfull else false</returns>
        </member>
        <member name="E:AndroidCtrl.ADB.Shared.Monitor.Added">
            <summary>
             This event will be raised if a new device is detected
            </summary>
        </member>
        <member name="E:AndroidCtrl.ADB.Shared.Monitor.Changed">
            <summary>
             This event will be raised if some changes on a specific device are detected
            <para/>*NOTE* This callback will be raised if the device "state" has been changed e.g. from device to recovery
            </summary>
        </member>
        <member name="E:AndroidCtrl.ADB.Shared.Monitor.Removed">
            <summary>
             This event will be raised if a device is not longer detected
            </summary>
        </member>
        <member name="E:AndroidCtrl.ADB.Shared.Monitor.Started">
            <summary>
             This event will be raised when the monitor gets started
            </summary>
        </member>
        <member name="E:AndroidCtrl.ADB.Shared.Monitor.Stopped">
            <summary>
             This event will be raised when the monitor gets stopped
            </summary>
        </member>
        <member name="T:AndroidCtrl.ADB.BridgeMode">
            <summary>
             ADB-Bridge mode
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.BridgeMode.None">
            <summary>
             not supported, like fastboot
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.BridgeMode.Binary">
            <summary>
             <see cref="T:AndroidCtrl.ADB.Binary.ADB"/>
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.BridgeMode.Socket">
            <summary>
             <see cref="T:AndroidCtrl.ADB.Socket.ADB"/>
            </summary>
        </member>
        <member name="T:AndroidCtrl.ADB.DMVerity">
            <summary>
             dm-verity modes
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.DMVerity.Enable">
            <summary>
             Enable dm-verity
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.DMVerity.Disable">
            <summary>
             Disable dm-verity
            </summary>
        </member>
        <member name="T:AndroidCtrl.ADB.FRPortType">
            <summary>
             ADB forward/reverse port IDs
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.FRPortType.Dev">
            <summary>
             dev
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.FRPortType.JDWP">
            <summary>
             jdwp (remote only)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.FRPortType.LocalAbstract">
            <summary>
             localabstract
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.FRPortType.LocalReserved">
            <summary>
             localreserved
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.FRPortType.LocalFileSystem">
            <summary>
             localfilesystem
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.FRPortType.TCP">
            <summary>
             tcp
            </summary>
        </member>
        <member name="T:AndroidCtrl.ADB.Reconnect">
            <summary>
             ADB reconnect ids
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Reconnect.Device">
            <summary>
             Kick from device side
            <para/>*NOTE* This mode is not supportet by older Android versions
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Reconnect.Host">
            <summary>
             Kick from host side
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Reconnect.Offline">
            <summary>
             Reset offline/unauthorized devices
            </summary>
        </member>
        <member name="T:AndroidCtrl.ADB.SyncCmd">
            <summary>
             ADB protocol sync commands
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.SyncCmd.DATA">
            <summary>
             DATA (0x41544144)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.SyncCmd.DENT">
            <summary>
             DENT (0x544e4544)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.SyncCmd.DONE">
            <summary>
             DONE (0x454e4f44)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.SyncCmd.FAIL">
            <summary>
             FAIL (0x4c494146)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.SyncCmd.LIST">
            <summary>
             LIST (0x5453494c)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.SyncCmd.LST2">
            <summary>
             List v2 (0x3254534c)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.SyncCmd.NONE">
            <summary>
             NONE
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.SyncCmd.OKAY">
            <summary>
             OKAY (0x59414b4f)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.SyncCmd.QUIT">
            <summary>
             QUIT (0x54495551)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.SyncCmd.RECV">
            <summary>
             RECV (0x56434552)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.SyncCmd.SEND">
            <summary>
             SEND (0x444e4553)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.SyncCmd.STA2">
            <summary>
             STAT v2 (0x32415453)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.SyncCmd.STAT">
            <summary>
             STAT v1 (0x54415453)
            </summary>
        </member>
        <member name="T:AndroidCtrl.ADB.Transport">
            <summary>
             ADB transport ids
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Transport.Any">
            <summary>
             any
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Transport.Local">
            <summary>
             local
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Transport.USB">
            <summary>
             USB
            </summary>
        </member>
        <member name="T:AndroidCtrl.ADB.Socket.ADBSocket">
            <summary>
             ADB-RAW-Socket
            <para/>*NOTE*
            <para/>U should only use this socket if u know what u do and how to deal with the ADB-RAW-Protocol
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Socket.ADBSocket.#ctor(System.Net.IPEndPoint)">
            <summary>
             Creates an ADB-RAW-Socket
            </summary>
            <param name="ipEndPoint">IPEndPoint</param>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:AndroidCtrl.ADB.Socket.ADBSocket.#ctor(System.String,System.Int32)">
            <summary>
             Creates an ADB-RAW-Socket
            </summary>
            <param name="address">Device IP</param>
            <param name="port">Port</param>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
            <exception cref="T:System.FormatException"/>
        </member>
        <member name="M:AndroidCtrl.ADB.Socket.ADBSocket.#ctor(System.Net.IPAddress,System.Int32)">
            <summary>
             Creates an ADB-RAW-Socket
            </summary>
            <param name="ipAddress">Device IP</param>
            <param name="port">Port</param>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
        </member>
        <member name="M:AndroidCtrl.ADB.Socket.ADBSocket.Dispose">
            <summary>
             IDisposable
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Socket.ADBSocket.ChunkSize">
            <summary>
             Get/Set the chunk size
            <para/>*NOTE*
            <para/>The given size gets ALWAYS decreased by 24 (packet header)
            <para/>Default is 1024kb, older clients may have 4096 byte hardcoded. This class will switch in that case to 4096 byte chunks.
            <para/>This property can only be changed if <see cref="P:AndroidCtrl.ADB.Socket.ADBSocket.Connected"/> is false!
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Socket.ADBSocket.Connected">
            <summary>
             True if the client is connected otherwise false
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Socket.ADBSocket.Device">
            <summary>
             Returns the device informations
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Socket.ADBSocket.Features">
            <summary>
             Returns the device features
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Socket.ADBSocket.IPEndPoint">
            <summary>
             Get/Set the IPEndPoint
            <para/>*NOTE*
            <para/>This property can only be changed if the socket is disconnected!
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Socket.ADBSocket.InputEncoding">
            <summary>
             Get/Set the InputEncoding
            <para/>*NOTE*
            <para/>Default is UTF8
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Socket.ADBSocket.OutputEncoding">
            <summary>
             Get/Set the OutputEncoding
            <para/>*NOTE*
            <para/>Default is UTF8
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Socket.ADBSocket.Connect">
            <summary>
             Connect to the EndPoint
            <para/>*NOTE*
            <para/>U'll get no <see cref="T:System.Net.Sockets.SocketException"/> if something fails on connect. If u get frequently connections fails, check ur firewall settings!
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Socket.ADBSocket.Disconnect(System.Boolean)">
            <summary>
             Disconnect
            </summary>
            <param name="reUseSocket">true to reuse the socket otherwise false</param>
        </member>
        <member name="M:AndroidCtrl.ADB.Socket.ADBSocket.GetChannel">
            <summary>
             Returns a fresh data channel
            </summary>
            <returns><see cref="T:AndroidCtrl.ADB.IChannel"/> or <see cref="T:null"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Socket.ADBSocket.GetChannel(System.Int32)">
            <summary>
             Returns a fresh data channel
            <para/>*NOTE*
            <para/>The value are milliseconds 30 sec = 30 000 ms, "0" will be changed to "-1" which implies infinite
            </summary>
            <param name="timeout"><see cref="T:System.Int32"/> ms</param>
            <returns><see cref="T:AndroidCtrl.ADB.IChannel"/> or <see cref="T:null"/></returns>
        </member>
        <member name="E:AndroidCtrl.ADB.Socket.ADBSocket.Closing">
            <summary>
             This event will be raised if <see cref="M:AndroidCtrl.ADB.Socket.ADBSocket.Disconnect(System.Boolean)"/> is called
            <para/>*NOTE*
            <para/>All <see cref="T:AndroidCtrl.ADB.IChannel"/> (created by <see cref="M:AndroidCtrl.ADB.Socket.ADBSocket.GetChannel"/> or <see cref="M:AndroidCtrl.ADB.Socket.ADBSocket.GetChannel(System.Int32)"/>) are linked to this event and will dispose them self.
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Socket.ADBSocket.ReadPacket">
            <summary>
             Reads the next packet from the stream/socket
            </summary>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Socket.ADBSocket.TryGetIPAddress(System.String)">
            <summary>
             Try to get an <see cref="T:System.Net.IPAddress"/> based on the <paramref name="address"/>
            </summary>
            <param name="address">address like (192.168.2.1 or my-device)</param>
            <returns><see cref="T:System.Net.IPAddress"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Socket.ADBSocket.RemoveChannel(AndroidCtrl.ADB.IChannel)">
            <summary>
             Removes the given channel from the Dictionary
            </summary>
            <param name="chan"><see cref="T:AndroidCtrl.ADB.IChannel"/></param>
        </member>
        <member name="M:AndroidCtrl.ADB.Socket.ADBSocket.Send(AndroidCtrl.ADB.Socket.Cmd,System.UInt32,System.UInt32)">
            <summary>
             Forms a packet and writes it to the socket
            </summary>
            <param name="cmd"><see cref="T:AndroidCtrl.ADB.Socket.Cmd"/></param>
            <param name="arg1">1st argument</param>
            <param name="arg2">2cd argument</param>
            <exception cref="T:System.Net.Sockets.SocketException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Socket.ADBSocket.Send(AndroidCtrl.ADB.Socket.Cmd,System.UInt32,System.UInt32,System.String)">
            <summary>
             Forms a packet and writes it to the socket
            <para/>*NOTE*
            <para/>data will be \0 terminated
            </summary>
            <param name="cmd"><see cref="T:AndroidCtrl.ADB.Socket.Cmd"/></param>
            <param name="arg1">1st argument</param>
            <param name="arg2">2cd argument</param>
            <param name="data"><see cref="T:System.String"/></param>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
            <exception cref="T:System.Net.Sockets.SocketException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Socket.ADBSocket.Send(AndroidCtrl.ADB.Socket.Cmd,System.UInt32,System.UInt32,System.Byte[])">
            <summary>
             Forms a packet and writes it to the socket
            </summary>
            <param name="cmd"><see cref="T:AndroidCtrl.ADB.Socket.Cmd"/></param>
            <param name="arg1">1st argument</param>
            <param name="arg2">2cd argument</param>
            <param name="data"><see cref="T:byte[]"/></param>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
            <exception cref="T:System.Net.Sockets.SocketException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="T:AndroidCtrl.ADB.Socket.ADB">
            <summary>
             .NET 4.x (Thread-Safe) ADB-Client, to interact with an Android device via the (A)ndroid (D)ebug (B)ridge - Protocol.
            <para/>*WARNING*
            <para/>This ADB-Client is ONLY for IP based devices! For USB devices, pls use <see cref="T:AndroidCtrl.ADB.Binary.ADB"/>.
            <para/>This client includes currently not all what <see cref="T:AndroidCtrl.ADB.Binary.ADB"/> can offer u. (11 calls are missing) So read the comments and check them for a "NOT-Implemented" mark.
            <para/>*NOTE*
            <para/>ALL local and remote paths, special variables, etc. will be set in quotes ("), so there is no need to quote anything.
            <para/>Exceptions are nested commands, these u have to quote ur self.
            <para/>All functions in this and some sub-classes are designed to work primary without root.
            <para/>If u want to use all functions with root rights, u have to restart the ADB-Daemon on the device with root rights.
            <para/>U can restart the ADB-Daemon by using <see cref="M:AndroidCtrl.ADB.Device.Daemon.Root"/> or <see cref="M:AndroidCtrl.ADB.Socket.ADB.Root"/>.
            <para/>Otherwise, u can set <see cref="P:AndroidCtrl.ADB.Socket.ADB.UseSu"/> to true and force the use of (su -c) for the most sub-classes.
            <para/>This object implements <see cref="T:AndroidCtrl.ADB.IADB"/>
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Socket.ADB.Instance(System.String)">
            <summary>
             Returns the choosen ADB device instance if exists, otherwise the return is <see cref="T:null"/>
            <para/>*NOTE*
            <para/>This is the basic interactor in this class, via this var u MUST get every device instance.
            <para/>Via device u can get/create the device specific instance. If device is empty, the return is ever the class selected device.
            </summary>
            <param name="device">The device id/serialnumber or empty</param>
            <returns><see cref="T:AndroidCtrl.ADB.Socket.ADB"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Socket.ADB.Instance(AndroidCtrl.IDeviceInfo)">
            <summary>
             Returns the choosen ADB device instance if exists, otherwise the return is <see cref="T:null"/>
            <para/>*NOTE*
            <para/>This is the basic interactor in this class, via this var u MUST get/create every device instance.
            <para/>Via device u can get/create the device specific instance. If device is null, the return is ever the class selected device.
            </summary>
            <param name="device"><see cref="T:AndroidCtrl.IDeviceInfo"/></param>
            <returns><see cref="T:AndroidCtrl.ADB.Socket.ADB"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Socket.ADB.Remove(System.String)">
            <summary>
             Remove the given device from the instance dictionary.
            </summary>
            <param name="device">Device ID</param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Socket.ADB.Remove(AndroidCtrl.IDeviceInfo)">
            <summary>
             Remove the given device from the instance dictionary.
            </summary>
            <param name="device"><see cref="T:AndroidCtrl.IDeviceInfo"/></param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Socket.ADB.Select(System.String)">
            <summary>
             Select the given device serial in the static class var.
            <para/>*NOTE*
            <para/>U can reach the selected device instance from everywhere in ur code via ADB.Instance().
            </summary>
            <param name="device">Device ID</param>
        </member>
        <member name="M:AndroidCtrl.ADB.Socket.ADB.Select(AndroidCtrl.IDeviceInfo)">
            <summary>
             Select the given device in the static class var.
            <para/>*NOTE*
            <para/>U can reach the selected device instance from everywhere in ur code via ADB.Instance().
            </summary>
            <param name="device"><see cref="T:AndroidCtrl.IDeviceInfo"/></param>
        </member>
        <member name="M:AndroidCtrl.ADB.Socket.ADB.Update(AndroidCtrl.IDeviceInfo)">
            <summary>
             Updates an existing instance of the given device object.
            <para/>*NOTE*
            <para/>Currently only the State gets updated, so the instance know, how to handle su requests.
            </summary>
            <param name="device"><see cref="T:AndroidCtrl.IDeviceInfo"/></param>
        </member>
        <member name="P:AndroidCtrl.ADB.Socket.ADB.Monitor">
            <summary>
             Returns and if not exist, creates the Monitor instance
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Socket.ADB.Version">
            <summary>
             Get ADBSocket version
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Socket.ADB.Connect(System.String,System.Int32)">
            <summary>
             Try to connect to the given device
            </summary>
            <param name="ip">e.g. 0.0.0.0 <see cref="T:System.String"/></param>
            <param name="port">default is 5555 <see cref="T:System.Int32"/></param>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Socket.ADB.Connect(AndroidCtrl.IDeviceInfo)">
            <summary>
             Connect the given device
            </summary>
            <param name="device"><see cref="T:AndroidCtrl.IDeviceInfo"/></param>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Socket.ADB.Devices">
            <summary>
             List all connected Devices
            </summary>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Socket.ADB.Disconnect(System.String,System.Int32)">
            <summary>
             Disconnect a single or all ip devices
            </summary>
            <param name="ip">e.g. 0.0.0.0 <see cref="T:System.String"/></param>
            <param name="port">default is 5555 <see cref="T:System.Int32"/></param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Socket.ADB.Disconnect(AndroidCtrl.IDeviceInfo)">
            <summary>
             Disconnect the given device
            </summary>
            <param name="device"><see cref="T:AndroidCtrl.IDeviceInfo"/></param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Socket.ADB.Dispose">
            <summary>
             This is not a real IDisposable but it will act like one
            <para/>It will reset the whole ADB class to null, everything in this class will be deleted, stopped, closed, etc...
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Socket.ADB.Manufacturer">
            <summary>
             Open "developers.ddns.net" in the default browser
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Socket.ADB.Start">
            <summary>
             Mimic <see cref="M:AndroidCtrl.ADB.Binary.ADB.Start"/> but does nothing except raising the <see cref="E:AndroidCtrl.ADB.Socket.ADB.Started"/> event
            </summary>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Socket.ADB.Stop">
            <summary>
             Stop all clients
            </summary>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="E:AndroidCtrl.ADB.Socket.ADB.Removed">
            <summary>
             This event will be raised if a device is removed from the instance dictionary
            </summary>
        </member>
        <member name="E:AndroidCtrl.ADB.Socket.ADB.Selected">
            <summary>
             This event will be raised if a device is selected
            </summary>
        </member>
        <member name="E:AndroidCtrl.ADB.Socket.ADB.Started">
            <summary>
             This event will be raised when the ADB-Server gets started
            </summary>
        </member>
        <member name="E:AndroidCtrl.ADB.Socket.ADB.Stopped">
            <summary>
             This event will be raised when the ADB-Server gets stopped
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Socket.ADB.CmdTimeout">
            <summary>
             CmdTimeout define for the whole instance how long Xecute() will wait for the given process to responde.
            <para/>*NOTE*
            <para/>Instance default is "-1", it implies infinite
            <para/>The value are milliseconds 30 sec = 30 000 ms
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Socket.ADB.DeviceID">
            <summary>
             DeviceID return the DeviceID for this class instance
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Socket.ADB.DeviceState">
            <summary>
             Return the last known device state e.g. ADB/RECOVERY/OFFLINE etc.
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Socket.ADB.IsBooted">
            <summary>
             Checks if the device is booted
            <para/>*NOTE*
            <para/>This will return true when android finished the complete boot procedure
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Socket.ADB.IsRoot">
            <summary>
             IsRoot checks if ADB is running as root in this instance
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Socket.ADB.UseBusyBox">
            <summary>
             UseBusyBox de-/activate BusyBox for the whole instance. Set false for unset.
            <para/>*NOTE*
            <para/>If no BusyBox is installed on the device, this parameter can't be set to true it will always return false!
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Socket.ADB.UseSu">
            <summary>
             UseSu, force ALL subclasses to act with (su -c) commands
            <para/>*NOTE*
            <para/>If su is not installed on the device, this parameter can't be changed and will always return false!
            <para/>This property will not affect the ADB base class, but the most subclasses that interact with the shell. Except these which needs root to interact with the device.
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Socket.ADB.ADBSocket">
            <summary>
             Returns the underlying <see cref="T:AndroidCtrl.ADB.Socket.ADBSocket"/>
            <para/>*NOTE*
            <para/>If the <see cref="P:AndroidCtrl.ADB.Socket.ADB.DeviceState"/> is <see cref="F:AndroidCtrl.DeviceState.OFFLINE"/> the <see cref="P:AndroidCtrl.ADB.Socket.ADB.ADBSocket"/> is <see cref="T:null"/>
            <para/>*WARNING*
            <para/>Changing settings on this layer can cause heavy data-loss and screw up the whole connection!
            <para/>If u need a special function and know how to deal with the ADB-Protocol, u can get u a <see cref="T:AndroidCtrl.ADB.IChannel"/> via <see cref="M:AndroidCtrl.ADB.Socket.ADB.GetChannel"/> or <see cref="M:AndroidCtrl.ADB.Socket.ADB.GetChannel(System.Int32)"/> where u can write ur own control code.
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Socket.ADB.Device">
            <summary>
             Returns and if not exist, creates the Device instance
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Socket.ADB.GetChannel">
            <summary>
             Returns a fresh RAW-Data channel
            </summary>
            <returns><see cref="T:AndroidCtrl.ADB.IChannel"/> or <see cref="T:null"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Socket.ADB.GetChannel(System.Int32)">
            <summary>
             Returns a fresh RAW-Data channel
            <para/>*NOTE*
            <para/>The value are milliseconds 30 sec = 30 000 ms, "0" will be changed to "-1" which implies infinite
            </summary>
            <param name="timeout"><see cref="T:System.Int32"/> milliseconds</param>
            <returns><see cref="T:AndroidCtrl.ADB.IChannel"/> or <see cref="T:null"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Socket.ADB.GetFramebuffer">
            <summary>
             Returns a fresh <see cref="T:AndroidCtrl.ADB.Device.Screen.IFramebuffer"/> if the device is connected, otherwise the return is <see cref="T:null"/>
            </summary>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:AndroidCtrl.ADB.Device.Screen.IFramebuffer"/> or <see cref="T:null"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Socket.ADB.GetShell">
            <summary>
             Returns a fresh <see cref="T:AndroidCtrl.ADB.Device.Shell.IShell"/> instance
            </summary>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.NullReferenceException"/>
            <returns><see cref="T:AndroidCtrl.ADB.Device.Shell.IShell"/> or <see cref="T:null"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Socket.ADB.Backup(System.String,System.String)">
            <summary>
            <para>NOT-Implemented</para>
             Backup the device with given arguments.
            </summary>
            <param name="localPath">File path</param>
            <param name="args">Backup arguments</param>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.NullReferenceException"/>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Socket.ADB.BugReport">
            <summary>
             BugReport returns all information from the device that should be included in a bug report
            </summary>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Socket.ADB.BugReport(System.String)">
            <summary>
             Write the bugreport to the given path (bugreport.zip)
            <para/>*NOTE*
            <para/>If path is a directory, the bug report is saved in that directory. devices that don't support zipped bug reports output to stdout.
            <para/>Work only on devices running android 7.0++
            </summary>
            <param name="remotePath">bugreport storage location</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Socket.ADB.Copy(System.String,AndroidCtrl.IDeviceInfo,System.String)">
            <summary>
             Copy the given <paramref name="sourcePath"/> to the given <paramref name="destPath"/> on the provided <paramref name="device"/>
            <para/>File usage: /sdcard/tmp.apk /sdcard/ - tmp.apk to /sdcard/
            <para/>File usage: /sdcard/tmp.apk /sdcard/new_tmp.apk - renamed new_tmp.apk to /sdcard/
            <para/>Directory usage: /sdcard/tmp/ /sdcard/ - content from tmp to /sdcard/
            <para/>Directory usage: /sdcard/tmp/ /sdcard/tmp/ - tmp to /sdcard/
            </summary>
            <param name="sourcePath">Remote source</param>
            <param name="device"><see cref="T:AndroidCtrl.IDeviceInfo"/> destination device</param>
            <param name="destPath">Remote destination</param>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NullReferenceException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Socket.ADB.Copy(System.String,AndroidCtrl.IDeviceInfo,System.String,System.Threading.CancellationToken)">
            <summary>
             Copy the given <paramref name="sourcePath"/> to the given <paramref name="destPath"/> on the provided <paramref name="device"/>
            <para/>File usage: /sdcard/tmp.apk /sdcard/ - tmp.apk to /sdcard/
            <para/>File usage: /sdcard/tmp.apk /sdcard/new_tmp.apk - renamed new_tmp.apk to /sdcard/
            <para/>Directory usage: /sdcard/tmp/ /sdcard/ - content from tmp to /sdcard/
            <para/>Directory usage: /sdcard/tmp/ /sdcard/tmp/ - tmp to /sdcard/
            </summary>
            <param name="sourcePath">Remote source</param>
            <param name="device"><see cref="T:AndroidCtrl.IDeviceInfo"/></param>
            <param name="destPath">Remote destination</param>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/></param>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NullReferenceException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Socket.ADB.Copy(System.String,AndroidCtrl.IDeviceInfo,System.String,AndroidCtrl.ADB.Device.IO.FileTransferEventHandler)">
            <summary>
             Copy the given <paramref name="sourcePath"/> to the given <paramref name="destPath"/> on the provided <paramref name="device"/>
            <para/>File usage: /sdcard/tmp.apk /sdcard/ - tmp.apk to /sdcard/
            <para/>File usage: /sdcard/tmp.apk /sdcard/new_tmp.apk - renamed new_tmp.apk to /sdcard/
            <para/>Directory usage: /sdcard/tmp/ /sdcard/ - content from tmp to /sdcard/
            <para/>Directory usage: /sdcard/tmp/ /sdcard/tmp/ - tmp to /sdcard/
            </summary>
            <param name="sourcePath">Remote source</param>
            <param name="device"><see cref="T:AndroidCtrl.IDeviceInfo"/></param>
            <param name="destPath">Remote destination</param>
            <param name="transferEventHandler"><see cref="T:AndroidCtrl.ADB.Device.IO.FileTransferEventHandler"/></param>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NullReferenceException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Socket.ADB.Copy(System.String,AndroidCtrl.IDeviceInfo,System.String,AndroidCtrl.ADB.Device.IO.FileTransferEventHandler,System.Threading.CancellationToken)">
            <summary>
             Copy the given <paramref name="sourcePath"/> to the given <paramref name="destPath"/> on the provided <paramref name="device"/>
            <para/>File usage: /sdcard/tmp.apk /sdcard/ - tmp.apk to /sdcard/
            <para/>File usage: /sdcard/tmp.apk /sdcard/new_tmp.apk - renamed new_tmp.apk to /sdcard/
            <para/>Directory usage: /sdcard/tmp/ /sdcard/ - content from tmp to /sdcard/
            <para/>Directory usage: /sdcard/tmp/ /sdcard/tmp/ - tmp to /sdcard/
            </summary>
            <param name="sourcePath">Remote source</param>
            <param name="device"><see cref="T:AndroidCtrl.IDeviceInfo"/></param>
            <param name="destPath">Remote destination</param>
            <param name="transferEventHandler"><see cref="T:AndroidCtrl.ADB.Device.IO.FileTransferEventHandler"/></param>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/></param>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NullReferenceException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Socket.ADB.Emu(System.String,System.Int32)">
            <summary>
            <para>NOT-Implemented</para>
             Run emulator console command
            <para/>*NOTE*
            <para/>timeOut = -1 implies infinite
            </summary>
            <param name="cmd">Command to run</param>
            <param name="timeout">time the process will wait for output, -1 implies infinite, 0 implies class internal timeout</param>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.NullReferenceException"/>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Socket.ADB.Emu(System.String,AndroidCtrl.ProcessModels.ProcessResponseEventHandler,System.Int32)">
            <summary>
            <para>NOT-Implemented</para>
             Run emulator console command
            <para/>*NOTE*
            <para/>timeOut = -1 implies infinite
            </summary>
            <param name="cmd">Command to run</param>
            <param name="responseEventHandler">Defines the callback to raise for any output/error response during the operation.</param>
            <param name="timeout">time the process will wait for output, -1 implies infinite, 0 implies class internal timeout</param>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.NullReferenceException"/>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Socket.ADB.ExecIn(System.String,System.IO.Stream,System.Int32)">
            <summary>
            ExecIn is a kind of shell for binary transaction
            <para/>*NOTE*
            <para/>timeOut = -1 implies infinite/process end
            </summary>
            <param name="cmd">Command to run</param>
            <param name="stream">input <see cref="T:System.IO.Stream"/></param>
            <param name="timeout">time the method will process the input stream, 0 implies class internal timeout</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Socket.ADB.ExecIn(System.String,System.IO.Stream,System.Threading.CancellationToken,System.Int32)">
            <summary>
            ExecIn is a kind of shell for binary transaction
            <para/>*NOTE*
            <para/>timeOut = -1 implies infinite/process end
            </summary>
            <param name="cmd">Command to run</param>
            <param name="stream">input <see cref="T:System.IO.Stream"/></param>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/></param>
            <param name="timeout">time the method will process the input stream, 0 implies class internal timeout</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Socket.ADB.ExecOut(System.String,System.IO.Stream,System.Int32)">
            <summary>
            ExecOut is a kind of shell for binary transaction
            <para/>*NOTE*
            <para/>timeOut = -1 implies infinite
            </summary>
            <param name="cmd">Command to run</param>
            <param name="stream">output <see cref="T:System.IO.Stream"/></param>
            <param name="timeout">time the process will wait for output, 0 implies class internal timeout</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Socket.ADB.ExecOut(System.String,System.IO.Stream,System.Threading.CancellationToken,System.Int32)">
            <summary>
            ExecOut is a kind of shell for binary transaction
            <para/>*NOTE*
            <para/>timeOut = -1 implies infinite
            </summary>
            <param name="cmd">Command to run</param>
            <param name="stream">output <see cref="T:System.IO.Stream"/></param>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/></param>
            <param name="timeout">time the process will wait for output, 0 implies class internal timeout</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Socket.ADB.Forward(System.String)">
            <summary>
            <para>NOT-Implemented</para>
             Forward a port, list or remove them
            </summary>
            <param name="args">null, --list, --no-rebind, --remove, --remove-all</param>
            <exception cref="T:System.NullReferenceException"/>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Socket.ADB.Forward(System.String,AndroidCtrl.ADB.FRPortType,System.String)">
            <summary>
            <para>NOT-Implemented</para>
             Forward a port, list or remove them
            </summary>
            <param name="args">null, --list, --no-rebind, --remove, --remove-all</param>
            <param name="localPortType">IDFRPortType</param>
            <param name="localPort">Remote port</param>
            <exception cref="T:System.NullReferenceException"/>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Socket.ADB.Forward(AndroidCtrl.ADB.FRPortType,System.String,AndroidCtrl.ADB.FRPortType,System.String)">
            <summary>
            <para>NOT-Implemented</para>
             Forward a port, list or remove them
            </summary>
            <param name="localPortType">IDFRPortType</param>
            <param name="localPort">Local port</param>
            <param name="remotePortType">IDFRPortType</param>
            <param name="remotePort">Remote port</param>
            <exception cref="T:System.NullReferenceException"/>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Socket.ADB.Forward(System.String,AndroidCtrl.ADB.FRPortType,System.String,AndroidCtrl.ADB.FRPortType,System.String)">
            <summary>
            <para>NOT-Implemented</para>
             Forward a port, list or remove them
            </summary>
            <param name="args">--list, --no-rebind, --remove, --remove-all</param>
            <param name="localPortType">IDFRPortType</param>
            <param name="localPort">Local port</param>
            <param name="remotePortType">IDFRPortType</param>
            <param name="remotePort">Remote port</param>
            <exception cref="T:System.NullReferenceException"/>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Socket.ADB.GetDevPath">
            <summary>
            <para>NOT-Implemented</para>
             Return the devpath or an empty string
            </summary>
            <returns>StateID</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Socket.ADB.GetSerial">
            <summary>
             Return the Device serialnumber or ip:port
            </summary>
            <returns>string</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Socket.ADB.GetState">
            <summary>
             Returns the device state and refresh the DeviceState property
            </summary>
            <returns><see cref="T:AndroidCtrl.DeviceState"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Socket.ADB.Install(System.String,System.String)">
            <summary>
             Install an APK on the Device
            <para/>*HINT*
            <para/>-d allow version downgrade
            <para/>-g grant all runtime permissions
            <para/>-l forward-lock the app
            <para/>-r reinstall the app and keep its data
            <para/>-p partial application install
            <para/>-s install the app on SD-Card instead of the internal storage
            <para/>-t allow test package
            <para/>the rest of the arguments u can use, u can find in the adb help
            </summary>
            <param name="localPath">File path</param>
            <param name="args">Installer arguments or null</param>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Socket.ADB.Install(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
             Install an APK on the Device
            <para/>*HINT*
            <para/>-d allow version downgrade
            <para/>-g grant all runtime permissions
            <para/>-l forward-lock the app
            <para/>-r reinstall the app and keep its data
            <para/>-p partial application install
            <para/>-s install the app on SD-Card instead of the internal storage
            <para/>-t allow test package
            <para/>the rest of the arguments u can use, u can find in the adb help
            </summary>
            <param name="localPaths">File paths</param>
            <param name="args">Installer arguments or null</param>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Socket.ADB.JDWP">
            <summary>
             JDWP list PIDs of processes hosting a JDWP transport
            </summary>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Socket.ADB.JDWP(System.Int32)">
            <summary>
             Connects to the JDWP thread running in the VM of the given process ID
            </summary>
            <param name="pid">The remote process ID</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Socket.ADB.Keygen(System.String)">
            <summary>
            <para>NOT-Implemented</para>
             Keygen generate adb public/private key.
            <para/>*NOTE*
            <para/>The private key is stored in (the/given/path), and the public key is stored in (the/given/path.pub). Any existing files will be overwritten.
            </summary>
            <param name="localKeyPath">local key file path</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Socket.ADB.Pull(System.String,System.String)">
            <summary>
             Pull the given remote object to the given local location
            <para/>File usage: /sdcard/tmp.apk C:\\ - tmp.apk to C:\\
            <para/>File usage: /sdcard/tmp.apk C:\\new_tmp.apk - renamed new_tmp.apk to C:\\
            <para/>Directory usage: /sdcard/tmp/ C:\\ - content from tmp to C:\\
            <para/>Directory usage: /sdcard/tmp/ C:\\tmp\\ - tmp to C:\\
            </summary>
            <param name="remotePath">Remote path</param>
            <param name="localPath">Local path</param>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
            <exception cref="T:System.IO.IOException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Socket.ADB.Pull(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
             Pull the given remote object to the given local location
            <para/>File usage: /sdcard/tmp.apk C:\\ - tmp.apk to C:\\
            <para/>File usage: /sdcard/tmp.apk C:\\new_tmp.apk - renamed new_tmp.apk to C:\\
            <para/>Directory usage: /sdcard/tmp/ C:\\ - content from tmp to C:\\
            <para/>Directory usage: /sdcard/tmp/ C:\\tmp\\ - tmp to C:\\
            </summary>
            <param name="remotePath">Remote path</param>
            <param name="localPath">Local path</param>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/></param>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
            <exception cref="T:System.IO.IOException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Socket.ADB.Pull(System.String,System.String,AndroidCtrl.ADB.Device.IO.FileTransferEventHandler)">
            <summary>
             Pull the given remote object to the given local location
            <para/>File usage: /sdcard/tmp.apk C:\\ - tmp.apk to C:\\
            <para/>File usage: /sdcard/tmp.apk C:\\new_tmp.apk - renamed new_tmp.apk to C:\\
            <para/>Directory usage: /sdcard/tmp/ C:\\ - content from tmp to C:\\
            <para/>Directory usage: /sdcard/tmp/ C:\\tmp\\ - tmp to C:\\
            </summary>
            <param name="remotePath">Remote path</param>
            <param name="localPath">Local path</param>
            <param name="transferEventHandler"><see cref="T:AndroidCtrl.ADB.Device.IO.FileTransferEventHandler"/></param>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
            <exception cref="T:System.IO.IOException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Socket.ADB.Pull(System.String,System.String,AndroidCtrl.ADB.Device.IO.FileTransferEventHandler,System.Threading.CancellationToken)">
            <summary>
             Pull the given remote object to the given local location
            <para/>File usage: /sdcard/tmp.apk C:\\ - tmp.apk to C:\\
            <para/>File usage: /sdcard/tmp.apk C:\\new_tmp.apk - renamed new_tmp.apk to C:\\
            <para/>Directory usage: /sdcard/tmp/ C:\\ - content from tmp to C:\\
            <para/>Directory usage: /sdcard/tmp/ C:\\tmp\\ - tmp to C:\\
            </summary>
            <param name="remotePath">Remote path</param>
            <param name="localPath">Local path</param>
            <param name="transferEventHandler"><see cref="T:AndroidCtrl.ADB.Device.IO.FileTransferEventHandler"/></param>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/></param>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
            <exception cref="T:System.IO.IOException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Socket.ADB.Push(System.String,System.String)">
            <summary>
             Push the given local object to the given remote location
            <para/>File usage: C:\\tmp.apk /sdcard/ - tmp.apk to sdcard
            <para/>File usage: C:\\tmp.apk /sdcard/new_tmp.apk - renamed new_tmp.apk to sdcard
            <para/>Directory usage: C:\\tmp\\ /sdcard/ - content from tmp to sdcard
            <para/>Directory usage: C:\\tmp\\ /sdcard/tmp/ - tmp to sdcard
            </summary>
            <param name="localPath">Local path</param>
            <param name="remotePath">Remote path</param>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
            <exception cref="T:System.IO.IOException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Socket.ADB.Push(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
             Push the given local object to the given remote location
            <para/>File usage: C:\\tmp.apk /sdcard/ - tmp.apk to sdcard
            <para/>File usage: C:\\tmp.apk /sdcard/new_tmp.apk - renamed new_tmp.apk to sdcard
            <para/>Directory usage: C:\\tmp\\ /sdcard/ - content from tmp to sdcard
            <para/>Directory usage: C:\\tmp\\ /sdcard/tmp/ - tmp to sdcard
            </summary>
            <param name="localPath">Local path</param>
            <param name="remotePath">Remote path</param>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/></param>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
            <exception cref="T:System.IO.IOException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Socket.ADB.Push(System.String,System.String,AndroidCtrl.ADB.Device.IO.FileTransferEventHandler)">
            <summary>
             Push the given local object to the given remote location
            <para/>File usage: C:\\tmp.apk /sdcard/ - tmp.apk to sdcard
            <para/>File usage: C:\\tmp.apk /sdcard/new_tmp.apk - renamed new_tmp.apk to sdcard
            <para/>Directory usage: C:\\tmp\\ /sdcard/ - content from tmp to sdcard
            <para/>Directory usage: C:\\tmp\\ /sdcard/tmp/ - tmp to sdcard
            </summary>
            <param name="localPath">Local path</param>
            <param name="remotePath">Remote path</param>
            <param name="transferEventHandler"><see cref="T:AndroidCtrl.ADB.Device.IO.FileTransferEventHandler"/></param>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
            <exception cref="T:System.IO.IOException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Socket.ADB.Push(System.String,System.String,AndroidCtrl.ADB.Device.IO.FileTransferEventHandler,System.Threading.CancellationToken)">
            <summary>
             Push the given local object to the given remote location
            <para/>File usage: C:\\tmp.apk /sdcard/ - tmp.apk to sdcard
            <para/>File usage: C:\\tmp.apk /sdcard/new_tmp.apk - renamed new_tmp.apk to sdcard
            <para/>Directory usage: C:\\tmp\\ /sdcard/ - content from tmp to sdcard
            <para/>Directory usage: C:\\tmp\\ /sdcard/tmp/ - tmp to sdcard
            </summary>
            <param name="localPath">Local path</param>
            <param name="remotePath">Remote path</param>
            <param name="transferEventHandler"><see cref="T:AndroidCtrl.ADB.Device.IO.FileTransferEventHandler"/></param>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/></param>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
            <exception cref="T:System.IO.IOException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Socket.ADB.Reboot(AndroidCtrl.BootMode)">
            <summary>
             Reboot the device to given mode
            </summary>
            <param name="mode"><see cref="T:AndroidCtrl.BootMode"/></param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Socket.ADB.Reconnect(AndroidCtrl.ADB.Reconnect)">
            <summary>
            <para>NOT-Implemented</para>
             Initiate a reconnect based on the given IDReconnect
            </summary>
            <param name="mode">IDReconnect</param>
            <exception cref="T:System.NullReferenceException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Socket.ADB.Remount">
            <summary>
             Remount the device partitions
            </summary>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Socket.ADB.Restore(System.String)">
            <summary>
            <para>NOT-Implemented</para>
             Restore the backup to the device.
            </summary>
            <param name="localPath">File path</param>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.NullReferenceException"/>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Socket.ADB.Reverse(System.String)">
            <summary>
            <para>NOT-Implemented</para>
             Reverse a port, list or remove them
            </summary>
            <param name="args">--list, --no-rebind, --remove, --remove-all </param>
            <exception cref="T:System.NullReferenceException"/>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Socket.ADB.Reverse(System.String,AndroidCtrl.ADB.FRPortType,System.String)">
            <summary>
            <para>NOT-Implemented</para>
             Reverse a port, list or remove them
            </summary>
            <param name="args">--list, --no-rebind, --remove, --remove-all </param>
            <param name="remotePortType">IDFRPortType</param>
            <param name="remotePort">Remote port</param>
            <exception cref="T:System.NullReferenceException"/>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Socket.ADB.Reverse(AndroidCtrl.ADB.FRPortType,System.String,AndroidCtrl.ADB.FRPortType,System.String)">
            <summary>
            <para>NOT-Implemented</para>
             Reverse a port, list or remove them
            </summary>
            <param name="remotePortType">IDFRPortType</param>
            <param name="remotePort">Remote port</param>
            <param name="localPortType">IDFRPortType</param>
            <param name="localPort">Local port</param>
            <exception cref="T:System.NullReferenceException"/>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Socket.ADB.Reverse(System.String,AndroidCtrl.ADB.FRPortType,System.String,AndroidCtrl.ADB.FRPortType,System.String)">
            <summary>
            <para>NOT-Implemented</para>
             Reverse a port, list or remove them
            </summary>
            <param name="args">--list, --no-rebind, --remove, --remove-all </param>
            <param name="remotePortType">IDFRPortType</param>
            <param name="remotePort">Remote port</param>
            <param name="localPortType">IDFRPortType</param>
            <param name="localPort">Local port</param>
            <exception cref="T:System.NullReferenceException"/>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Socket.ADB.Root">
            <summary>
             Restarts adb daemon with root permissions on the device
            <para/>*HINT*
            <para/>The device must be rooted
            </summary>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Socket.ADB.ShellCmd(System.String,System.Int32)">
            <summary>
             Send an Shell-Command to the Device
            <para/>*NOTE*
            <para/>timeout = -1 implies infinite
            <para/>If u want send an SU-Command use <see cref="M:AndroidCtrl.ADB.Device.Su.ShellCmd(System.String,System.Int32)"/>
            </summary>
            <param name="cmd">Command to send</param>
            <param name="timeout">time the process will wait for output, -1 implies infinite, 0 implies class internal <see cref="P:AndroidCtrl.ADB.Socket.ADB.CmdTimeout"/></param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Socket.ADB.ShellCmd(System.String,System.Threading.CancellationToken,System.Int32)">
            <summary>
             Send an Shell-Command to the Device
            <para/>*NOTE*
            <para/>timeout = -1 implies infinite
            <para/>If u want send an SU-Command use <see cref="M:AndroidCtrl.ADB.Device.Su.ShellCmd(System.String,System.Threading.CancellationToken,System.Int32)"/>
            </summary>
            <param name="cmd">Command to send</param>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/></param>
            <param name="timeout">time the process will wait for output, -1 implies infinite, 0 implies class internal <see cref="P:AndroidCtrl.ADB.Socket.ADB.CmdTimeout"/></param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Socket.ADB.ShellCmd(System.String,AndroidCtrl.ADB.Device.Shell.ShellDataEventHandler,System.Int32)">
            <summary>
             Send an Shell-Command to the Device
            <para/>*NOTE*
            <para/>timeout = -1 implies infinite
            <para/>If u want send an SU-Command use <see cref="M:AndroidCtrl.ADB.Device.Su.ShellCmd(System.String,AndroidCtrl.ADB.Device.Shell.ShellDataEventHandler,System.Int32)"/>
            </summary>
            <param name="cmd">Command to send</param>
            <param name="shellDataEventHandler"><see cref="T:AndroidCtrl.ADB.Device.Shell.ShellDataEventHandler"/></param>
            <param name="timeout">time the process will wait for output, -1 implies infinite, 0 implies class internal <see cref="P:AndroidCtrl.ADB.Socket.ADB.CmdTimeout"/></param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Socket.ADB.ShellCmd(System.String,AndroidCtrl.ADB.Device.Shell.ShellDataEventHandler,System.Threading.CancellationToken,System.Int32)">
            <summary>
             Send an Shell-Command to the Device
            <para/>*NOTE*
            <para/>timeout = -1 implies infinite
            <para/>If u want send an SU-Command use <see cref="M:AndroidCtrl.ADB.Device.Su.ShellCmd(System.String,AndroidCtrl.ADB.Device.Shell.ShellDataEventHandler,System.Threading.CancellationToken,System.Int32)"/>
            </summary>
            <param name="cmd">Command to send</param>
            <param name="shellDataEventHandler"><see cref="T:AndroidCtrl.ADB.Device.Shell.ShellDataEventHandler"/></param>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/></param>
            <param name="timeout">time the process will wait for output, -1 implies infinite, 0 implies class internal <see cref="P:AndroidCtrl.ADB.Socket.ADB.CmdTimeout"/></param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Socket.ADB.ShellCmdHRes(System.String,System.Int32)">
            <summary>
             Send an Shell-Command to the Device and return the HResult
            <para/>*NOTE*
            <para/>timeout = -1 implies infinite
            <para/>If u want send an SU-Command use <see cref="M:AndroidCtrl.ADB.Device.Su.ShellCmdHRes(System.String,System.Int32)"/>
            </summary>
            <param name="cmd">Command to send</param>
            <param name="timeout">time the process will wait for output, -1 implies infinite, 0 implies class internal <see cref="P:AndroidCtrl.ADB.Socket.ADB.CmdTimeout"/></param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Int32"/> -1 (implies NULL on the shell return)</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Socket.ADB.ShellCmdHRes(System.String,System.Threading.CancellationToken,System.Int32)">
            <summary>
             Send an Shell-Command to the Device and return the HResult
            <para/>*NOTE*
            <para/>timeout = -1 implies infinite
            <para/>If u want send an SU-Command use <see cref="M:AndroidCtrl.ADB.Device.Su.ShellCmdHRes(System.String,System.Threading.CancellationToken,System.Int32)"/>
            </summary>
            <param name="cmd">Command to send</param>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/></param>
            <param name="timeout">time the process will wait for output, -1 implies infinite, 0 implies class internal <see cref="P:AndroidCtrl.ADB.Socket.ADB.CmdTimeout"/></param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Int32"/> -1 (implies NULL on the shell return)</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Socket.ADB.ShellCmdHRes(System.String,AndroidCtrl.ADB.Device.Shell.ShellDataEventHandler,System.Int32)">
            <summary>
             Send an Shell-Command to the Device and return the HResult
            <para/>*NOTE*
            <para/>timeout = -1 implies infinite
            <para/>If u want send an SU-Command use <see cref="M:AndroidCtrl.ADB.Device.Su.ShellCmdHRes(System.String,AndroidCtrl.ADB.Device.Shell.ShellDataEventHandler,System.Int32)"/>
            </summary>
            <param name="cmd">Command to send</param>
            <param name="shellDataEventHandler"><see cref="T:AndroidCtrl.ADB.Device.Shell.ShellDataEventHandler"/></param>
            <param name="timeout">time the process will wait for output, -1 implies infinite, 0 implies class internal <see cref="P:AndroidCtrl.ADB.Socket.ADB.CmdTimeout"/></param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Int32"/> -1 (implies NULL on the shell return)</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Socket.ADB.ShellCmdHRes(System.String,AndroidCtrl.ADB.Device.Shell.ShellDataEventHandler,System.Threading.CancellationToken,System.Int32)">
            <summary>
             Send an Shell-Command to the Device and return the HResult
            <para/>*NOTE*
            <para/>timeout = -1 implies infinite
            <para/>If u want send an SU-Command use <see cref="M:AndroidCtrl.ADB.Device.Su.ShellCmdHRes(System.String,AndroidCtrl.ADB.Device.Shell.ShellDataEventHandler,System.Threading.CancellationToken,System.Int32)"/>
            </summary>
            <param name="cmd">Command to send</param>
            <param name="shellDataEventHandler"><see cref="T:AndroidCtrl.ADB.Device.Shell.ShellDataEventHandler"/></param>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/></param>
            <param name="timeout">time the process will wait for output, -1 implies infinite, 0 implies class internal <see cref="P:AndroidCtrl.ADB.Socket.ADB.CmdTimeout"/></param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Int32"/> -1 (implies NULL on the shell return)</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Socket.ADB.ShellCmdStack(System.Collections.Generic.IEnumerable{System.String},System.Int32)">
            <summary>
             Send an Shell-Command-Stack to the Device
            <para/>*NOTE*
            <para/>Between the cmds in the stack is an delay of 150 ms
            <para/>timeout = -1 implies infinite
            <para/>If u want send an SU-Command-Stack use <see cref="M:AndroidCtrl.ADB.Device.Su.ShellCmdStack(System.Collections.Generic.IEnumerable{System.String},System.Int32)"/>
            </summary>
            <param name="cmdStack">Commands to send to the device Shell</param>
            <param name="timeout">time the process will wait for output, -1 implies infinite and 0 implies the use of the class internal <see cref="P:AndroidCtrl.ADB.Socket.ADB.CmdTimeout"/>.</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Socket.ADB.ShellCmdStack(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken,System.Int32)">
            <summary>
             Send an Shell-Command-Stack to the Device
            <para/>*NOTE*
            <para/>Between the cmds in the stack is an delay of 150 ms
            <para/>timeout = -1 implies infinite
            <para/>If u want send an SU-Command-Stack use <see cref="M:AndroidCtrl.ADB.Device.Su.ShellCmdStack(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken,System.Int32)"/>
            </summary>
            <param name="cmdStack">Commands to send to the device Shell</param>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/></param>
            <param name="timeout">time the process will wait for output, -1 implies infinite and 0 implies the use of the class internal <see cref="P:AndroidCtrl.ADB.Socket.ADB.CmdTimeout"/>.</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Socket.ADB.ShellCmdStack(System.Collections.Generic.IEnumerable{System.String},AndroidCtrl.ADB.Device.Shell.ShellDataEventHandler,System.Int32)">
            <summary>
             Send an Shell-Command-Stack to the Device
            <para/>*NOTE*
            <para/>Between the cmds in the stack is an delay of 150 ms
            <para/>timeout = -1 implies infinite
            <para/>If u want send an SU-Command-Stack use <see cref="M:AndroidCtrl.ADB.Device.Su.ShellCmdStack(System.Collections.Generic.IEnumerable{System.String},AndroidCtrl.ADB.Device.Shell.ShellDataEventHandler,System.Int32)"/>
            </summary>
            <param name="cmdStack">Commands to send to the device Shell</param>
            <param name="shellDataEventHandler"><see cref="T:AndroidCtrl.ADB.Device.Shell.ShellDataEventHandler"/></param>
            <param name="timeout">time the process will wait for output, -1 implies infinite and 0 implies the use of the class internal <see cref="P:AndroidCtrl.ADB.Socket.ADB.CmdTimeout"/>.</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Socket.ADB.ShellCmdStack(System.Collections.Generic.IEnumerable{System.String},AndroidCtrl.ADB.Device.Shell.ShellDataEventHandler,System.Threading.CancellationToken,System.Int32)">
            <summary>
             Send an Shell-Command-Stack to the Device
            <para/>*NOTE*
            <para/>Between the cmds in the stack is an delay of 150 ms
            <para/>timeout = -1 implies infinite
            <para/>If u want send an SU-Command-Stack use <see cref="M:AndroidCtrl.ADB.Device.Su.ShellCmdStack(System.Collections.Generic.IEnumerable{System.String},AndroidCtrl.ADB.Device.Shell.ShellDataEventHandler,System.Threading.CancellationToken,System.Int32)"/>
            </summary>
            <param name="cmdStack">Commands to send to the device Shell</param>
            <param name="shellDataEventHandler"><see cref="T:AndroidCtrl.ADB.Device.Shell.ShellDataEventHandler"/></param>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/></param>
            <param name="timeout">time the process will wait for output, -1 implies infinite and 0 implies the use of the class internal <see cref="P:AndroidCtrl.ADB.Socket.ADB.CmdTimeout"/>.</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Socket.ADB.Sideload(System.String,System.Int32)">
            <summary>
            <para>NOT-Implemented</para>
             Sideloads a rom
            <para/>*NOTE*
            <para/>timeOut = -1 implies infinite
            <para/>The recovery must support this function
            </summary>
            <param name="localPath">Local path (c:\path\to\rom.zip)</param>
            <param name="timeout">time the process will wait for output, -1 implies infinite, 0 implies class internal timeout</param>
            <exception cref="T:System.NullReferenceException"/>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Socket.ADB.TCPIP(System.Int32)">
            <summary>
             Restart adbd daemon listen on given tcp port
            </summary>
            <param name="port">port 5555</param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Socket.ADB.UnInstall(System.String,System.Boolean)">
            <summary>
             UnInstall an APK on the Device
            </summary>
            <param name="package">package name e.g. com.example.package</param>
            <param name="keepData">keeps the cache and userdata</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Socket.ADB.UnRoot">
            <summary>
             Restarts adb daemon without root permissions on the device
            <para/>*HINT*
            <para/>The device must be rooted
            </summary>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Socket.ADB.USB">
            <summary>
             Restart adbd daemon listen on USB
            </summary>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Socket.ADB.Verity(AndroidCtrl.ADB.DMVerity)">
            <summary>
            <para>NOT-Implemented</para>
             Dis-/Enable dm-verity on USERDEBUG builds
            </summary>
            <exception cref="T:System.NullReferenceException"/>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Socket.ADB.WaitForDevice">
            <summary>
            <para>NOT-Implemented</para>
             Wait until the device connects with <see cref="F:AndroidCtrl.ADB.Transport.Any"/> and <see cref="F:AndroidCtrl.DeviceState.DEVICE"/>
            <para/>*NOTE*
            <para/>This will freeze the current thread until a device is connected
            <para/>Put functions which need this kind of wait procedure in a separate thread.
            </summary>
            <exception cref="T:System.NullReferenceException"/>
        </member>
        <member name="M:AndroidCtrl.ADB.Socket.ADB.WaitForDevice(System.Threading.CancellationToken)">
            <summary>
            <para>NOT-Implemented</para>
             Wait until the device connects with <see cref="F:AndroidCtrl.ADB.Transport.Any"/> and <see cref="F:AndroidCtrl.DeviceState.DEVICE"/>
            <para/>*NOTE*
            <para/>This will freeze the current thread until a device is connected
            <para/>Put functions which need this kind of wait procedure in a separate thread.
            </summary>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/></param>
            <exception cref="T:System.NullReferenceException"/>
        </member>
        <member name="M:AndroidCtrl.ADB.Socket.ADB.WaitFor(AndroidCtrl.ADB.Transport,AndroidCtrl.DeviceState)">
            <summary>
            <para>NOT-Implemented</para>
             Wait until the device connects with the given trasport ID and state to adb
            <para/>This will freeze the current thread until a device is connected
            <para/>Put functions which need this kind of wait procedure in a separate thread.
            </summary>
            <param name="transport"><see cref="T:AndroidCtrl.ADB.Transport"/></param>
            <param name="state"><see cref="T:AndroidCtrl.DeviceState"/></param>
            <exception cref="T:System.NullReferenceException"/>
        </member>
        <member name="M:AndroidCtrl.ADB.Socket.ADB.WaitFor(AndroidCtrl.ADB.Transport,AndroidCtrl.DeviceState,System.Threading.CancellationToken)">
            <summary>
            <para>NOT-Implemented</para>
             Wait until the device connects with the given trasport ID and state to adb
            <para/>This will freeze the current thread until a device is connected
            <para/>Put functions which need this kind of wait procedure in a separate thread.
            </summary>
            <param name="transport"><see cref="T:AndroidCtrl.ADB.Transport"/></param>
            <param name="state"><see cref="T:AndroidCtrl.DeviceState"/></param>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/></param>
            <exception cref="T:System.NullReferenceException"/>
        </member>
        <member name="M:AndroidCtrl.ADB.Socket.ADB.SetOffline(System.Boolean)">
            <summary>
             Sets this device offline
            </summary>
        </member>
        <member name="T:AndroidCtrl.ADB.Socket.Channel">
            <summary>
             ADB raw data channel
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Socket.Channel.#ctor(AndroidCtrl.ADB.Socket.ADBSocket,System.UInt32,System.Int32)">
            <summary>
             Channel - Constructor
            </summary>
            <param name="socket"><see cref="T:AndroidCtrl.ADB.Socket.ADBSocket"/></param>
            <param name="localID">local channel ID</param>
            <param name="timeout"><see cref="T:System.Int32"/> ms</param>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:AndroidCtrl.ADB.Socket.Channel.Dispose">
            <summary>
             IDisposable
            <para/>*NOTE*
            <para/>The ADBSocket instance will not be disposed
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Socket.Channel.Available">
            <summary>
             Returns the amount of data which is ready to read
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Socket.Channel.DeviceID">
            <summary>
             Returns the assigned device ID
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Socket.Channel.Features">
            <summary>
             Returns the device features
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Socket.Channel.ID">
            <summary>
             Returns the local channel ID
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Socket.Channel.InputEncoding">
            <summary>
             Get the InputEncoding (UTF-8 by default)
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Socket.Channel.IsConnected">
            <summary>
             True if connection is open otherwise false
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Socket.Channel.OutputEncoding">
            <summary>
             Get the OutputEncoding (UTF-8 by default)
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Socket.Channel.Close">
            <summary>
             Close this <see cref="T:AndroidCtrl.ADB.IChannel"/>
            <para/>*NOTE*
            <para/>This will not close the main connection
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Socket.Channel.Open(System.String)">
            <summary>
             Spawns a new thread on the device
            </summary>
            <param name="type">connection type</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Socket.Channel.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
             Read the given <paramref name="size"/> of bytes into the provided <paramref name="buffer"/>, staring at the given <paramref name="offset"/>
            <para/>*NOTE*
            <para/>This method will block the current thread until this <see cref="T:AndroidCtrl.ADB.IChannel"/> received any data.
            </summary>
            <param name="buffer"><see cref="T:byte[]"/></param>
            <param name="offset"><see cref="T:System.Int32"/></param>
            <param name="size"><see cref="T:System.Int32"/></param>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IndexOutOfRangeException"/>
            <exception cref="T:System.InvalidOperationException"/>
            <returns><see cref="T:System.Int32"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Socket.Channel.Write(AndroidCtrl.ADB.SyncCmd)">
            <summary>
             Writes the given <see cref="T:AndroidCtrl.ADB.SyncCmd"/> to the socket
            <para/>*NOTE*
            <para/>This method will block the current thread until this <see cref="T:AndroidCtrl.ADB.IChannel"/> becomes writable.
            </summary>
            <param name="cmd"><see cref="T:AndroidCtrl.ADB.SyncCmd"/></param>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.InvalidOperationException"/>
        </member>
        <member name="M:AndroidCtrl.ADB.Socket.Channel.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
             Writes the given <paramref name="size"/> of the <see cref="T:byte[]"/> to the socket, starting at the <paramref name="offset"/>
            <para/>*NOTE*
            <para/>This method will block the current thread until this <see cref="T:AndroidCtrl.ADB.IChannel"/> becomes writable.
            </summary>
            <param name="data"><see cref="T:byte[]"/></param>
            <param name="offset"><see cref="T:System.Int32"/></param>
            <param name="size"><see cref="T:System.Int32"/></param>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IndexOutOfRangeException"/>
            <exception cref="T:System.InvalidOperationException"/>
        </member>
        <member name="E:AndroidCtrl.ADB.Socket.Channel.Closing">
            <summary>
             This event will be raised if <see cref="M:AndroidCtrl.ADB.Socket.Channel.Close"/> is called
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Socket.Channel.Received(System.UInt32,System.UInt32,System.Byte[])">
            <summary>
             Adds the given packet to the cache
            </summary>
            <param name="rID">remote channel ID</param>
            <param name="cmd">command</param>
            <param name="data"><see cref="T:byte[]"/></param>
        </member>
        <member name="T:AndroidCtrl.ADB.Socket.Cmd">
            <summary>
             ADB protocol commands
            <para>*NOTE* All commands are formatted as uint (little-endian byte order)</para>
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Socket.Cmd.AUTH">
            <summary>
             AUTH (0x48545541)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Socket.Cmd.CLSE">
            <summary>
             CLSE (0x45534c43)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Socket.Cmd.CNXN">
            <summary>
             CNXN (0x4e584e43)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Socket.Cmd.None">
            <summary>
             NONE
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Socket.Cmd.OKAY">
            <summary>
             OKAY (0x59414b4f)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Socket.Cmd.OPEN">
            <summary>
             OPEN (0x4e45504f)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Socket.Cmd.SYNC">
            <summary>
             SYNC (0x434e5953)
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Socket.Cmd.WRTE">
            <summary>
             WRTE (0x45545257)
            </summary>
        </member>
        <member name="T:AndroidCtrl.ADB.Socket.ProtocolVersion">
            <summary>
             ADB protocol version
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Socket.ProtocolVersion.None">
            <summary>
             NONE
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Socket.ProtocolVersion.V1">
            <summary>
             Version 1
            </summary>
        </member>
        <member name="F:AndroidCtrl.ADB.Socket.ProtocolVersion.V2">
            <summary>
             Version 2
            </summary>
        </member>
        <member name="T:AndroidCtrl.ADB.IChannel">
            <summary>
             ADB raw data channel interface
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.IChannel.Available">
            <summary>
             Returns the amount of data which is ready to read
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.IChannel.DeviceID">
            <summary>
             Returns the assigned device ID
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.IChannel.Features">
            <summary>
             Returns the device features
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.IChannel.ID">
            <summary>
             Returns the local channel ID
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.IChannel.InputEncoding">
            <summary>
             Get the InputEncoding (UTF-8 by default)
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.IChannel.IsConnected">
            <summary>
             True if connection is open otherwise false
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.IChannel.OutputEncoding">
            <summary>
             Get the OutputEncoding (UTF-8 by default)
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.IChannel.Close">
            <summary>
             Close this <see cref="T:AndroidCtrl.ADB.IChannel"/>
            <para/>*NOTE*
            <para/>This will not close the main connection
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.IChannel.Open(System.String)">
            <summary>
             Spawns a new thread on the device
            </summary>
            <param name="type">connection type</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.IChannel.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
             Read the given <paramref name="size"/> of bytes into the provided <paramref name="buffer"/>, staring at the given <paramref name="offset"/>
            <para/>*NOTE*
            <para/>This method will block the current thread until this <see cref="T:AndroidCtrl.ADB.IChannel"/> received any data.
            </summary>
            <param name="buffer"><see cref="T:byte[]"/></param>
            <param name="offset"><see cref="T:System.Int32"/></param>
            <param name="size"><see cref="T:System.Int32"/></param>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IndexOutOfRangeException"/>
            <exception cref="T:System.InvalidOperationException"/>
            <returns><see cref="T:System.Int32"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.IChannel.Write(AndroidCtrl.ADB.SyncCmd)">
            <summary>
             Writes the given <see cref="T:AndroidCtrl.ADB.SyncCmd"/> to the socket
            <para/>*NOTE*
            <para/>This method will block the current thread until this <see cref="T:AndroidCtrl.ADB.IChannel"/> becomes writable.
            </summary>
            <param name="cmd"><see cref="T:AndroidCtrl.ADB.SyncCmd"/></param>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.InvalidOperationException"/>
        </member>
        <member name="M:AndroidCtrl.ADB.IChannel.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
             Writes the given <paramref name="size"/> of the <see cref="T:byte[]"/> to the socket, starting at the <paramref name="offset"/>
            <para/>*NOTE*
            <para/>This method will block the current thread until this <see cref="T:AndroidCtrl.ADB.IChannel"/> becomes writable.
            </summary>
            <param name="data"><see cref="T:byte[]"/></param>
            <param name="offset"><see cref="T:System.Int32"/></param>
            <param name="size"><see cref="T:System.Int32"/></param>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IndexOutOfRangeException"/>
            <exception cref="T:System.InvalidOperationException"/>
        </member>
        <member name="E:AndroidCtrl.ADB.IChannel.Closing">
            <summary>
             This event will be raised if <see cref="M:AndroidCtrl.ADB.IChannel.Close"/> is called
            </summary>
        </member>
        <member name="T:AndroidCtrl.ADB.ADBridgeAfterSwitchEventHandler">
            <summary>
             This event will be raised after the bridge switched between <see cref="T:AndroidCtrl.ADB.Binary.ADB"/> &amp; <see cref="T:AndroidCtrl.ADB.Socket.ADB"/>
            </summary>
            <param name="sender"><see cref="T:AndroidCtrl.ADB.ADBridge"/></param>
            <param name="e"><see cref="T:AndroidCtrl.ADB.ADBridgeAfterSwitchEventArgs"/></param>
        </member>
        <member name="T:AndroidCtrl.ADB.ADBridgeAfterSwitchEventArgs">
            <summary>
             ADBridgeAfterSwitchEventArgs
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.ADBridgeAfterSwitchEventArgs.OldMode">
            <summary>
             Returns the old bridge mode before the switch
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.ADBridgeAfterSwitchEventArgs.NewMode">
            <summary>
             Returns the new bridge mode after the switch
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.ADBridgeAfterSwitchEventArgs.Source">
            <summary>
             Returns the <see cref="T:AndroidCtrl.ADB.ADBridge"/> where the switch occured
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.ADBridgeAfterSwitchEventArgs.#ctor(AndroidCtrl.ADB.ADBridge,AndroidCtrl.ADB.BridgeMode,AndroidCtrl.ADB.BridgeMode)">
            <summary>
             ADBridgeAfterSwitchEventArgs
            </summary>
            <param name="source"><see cref="T:AndroidCtrl.ADB.ADBridge"/></param>
            <param name="oldMode"><see cref="T:AndroidCtrl.ADB.BridgeMode"/></param>
            <param name="newMode"><see cref="T:AndroidCtrl.ADB.BridgeMode"/></param>
        </member>
        <member name="T:AndroidCtrl.ADB.ADBridgeBeforeSwitchEventHandler">
            <summary>
             This event will be raised before the bridge switch between <see cref="T:AndroidCtrl.ADB.Binary.ADB"/> &amp; <see cref="T:AndroidCtrl.ADB.Socket.ADB"/>
            </summary>
            <param name="sender"><see cref="T:AndroidCtrl.ADB.ADBridge"/></param>
            <param name="e"><see cref="T:AndroidCtrl.ADB.ADBridgeBeforeSwitchEventArgs"/></param>
        </member>
        <member name="T:AndroidCtrl.ADB.ADBridgeBeforeSwitchEventArgs">
            <summary>
             ADBridgeBeforeSwitchEventArgs
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.ADBridgeBeforeSwitchEventArgs.OldMode">
            <summary>
             Returns the old bridge mode before the switch
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.ADBridgeBeforeSwitchEventArgs.NewMode">
            <summary>
             Returns the new bridge mode after the switch
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.ADBridgeBeforeSwitchEventArgs.Source">
            <summary>
             Returns the <see cref="T:AndroidCtrl.ADB.ADBridge"/> where the switch occured
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.ADBridgeBeforeSwitchEventArgs.#ctor(AndroidCtrl.ADB.ADBridge,AndroidCtrl.ADB.BridgeMode,AndroidCtrl.ADB.BridgeMode)">
            <summary>
             ADBridgeBeforeSwitchEventArgs
            </summary>
            <param name="source"><see cref="T:AndroidCtrl.ADB.ADBridge"/></param>
            <param name="oldMode"><see cref="T:AndroidCtrl.ADB.BridgeMode"/></param>
            <param name="newMode"><see cref="T:AndroidCtrl.ADB.BridgeMode"/></param>
        </member>
        <member name="T:AndroidCtrl.ADB.ADBStartedEventHandler">
            <summary>
             This event will be raised when the ADB-Server gets started
            </summary>
            <param name="sender"><see cref="T:AndroidCtrl.DeviceMode"/> as <see cref="T:System.String"/></param>
            <param name="e"><see cref="T:System.EventArgs"/></param>
        </member>
        <member name="T:AndroidCtrl.ADB.ADBStoppedEventHandler">
            <summary>
             This event will be raised when the ADB-Server gets stopped
            </summary>
            <param name="sender"><see cref="T:AndroidCtrl.DeviceMode"/> as <see cref="T:System.String"/></param>
            <param name="e"><see cref="T:System.EventArgs"/></param>
        </member>
        <member name="T:AndroidCtrl.ADB.IADB">
            <summary>
             IADB interface
            <para/>Represents the ADB interface for <see cref="T:AndroidCtrl.ADB.Binary.ADB"/> &amp; <see cref="T:AndroidCtrl.ADB.Socket.ADB"/>
            <para/> Implements <see cref="T:System.ComponentModel.INotifyPropertyChanged"/>
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.IADB.CmdTimeout">
            <summary>
             Defines for the whole instance how long Xecute() will wait for the given process to responde.
            <para/>*NOTE*
            <para/>Instance default is "-1", it implies infinite
            <para/>The value are milliseconds 30 sec = 30 000 ms
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.IADB.DeviceID">
            <summary>
             Returns the DeviceID for this class instance
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.IADB.DeviceState">
            <summary>
             Returs the last known device state e.g. DEVICE/RECOVERY/OFFLINE etc.
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.IADB.IsBooted">
            <summary>
             Checks if the device is booted
            <para/>*NOTE*
            <para/>This will return true when android finished the complete boot procedure
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.IADB.IsRoot">
            <summary>
             IsRoot checks if ADB is running as root in this instance
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.IADB.UseBusyBox">
            <summary>
             UseBusyBox de-/activate BusyBox for the whole instance. Set false for unset.
            <para/>*NOTE*
            <para/>If no BusyBox is installed on the device, this parameter can't be set to true it will always return false!
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.IADB.UseSu">
            <summary>
             UseSu manage the su use for shell requests.
            <para/>*NOTE*
            <para/>If su is not installed on the device, this parameter can't be changed and will always return false!
            <para/>This property will not affect the ADB base class, but the most subclasses that interact with the shell. Except these which needs root to interact with the device.
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.IADB.Device">
            <summary>
             Returns and if not exist, creates the Device instance
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.IADB.GetChannel">
            <summary>
             Returns a fresh RAW-Data channel
            </summary>
            <returns><see cref="T:AndroidCtrl.ADB.IChannel"/> or <see cref="T:null"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.IADB.GetChannel(System.Int32)">
            <summary>
             Returns a fresh RAW-Data channel
            <para/>*NOTE*
            <para/>The value are milliseconds 30 sec = 30 000 ms, "0" will be changed to "-1" which implies infinite
            </summary>
            <param name="timeout"><see cref="T:System.Int32"/> milliseconds</param>
            <returns><see cref="T:AndroidCtrl.ADB.IChannel"/> or <see cref="T:null"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.IADB.GetFramebuffer">
            <summary>
             Returns a fresh <see cref="T:AndroidCtrl.ADB.Device.Screen.IFramebuffer"/> if the device is connected, otherwise the return is <see cref="T:null"/>
            </summary>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:AndroidCtrl.ADB.Device.Screen.IFramebuffer"/> or <see cref="T:null"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.IADB.GetShell">
            <summary>
             Returns a fresh <see cref="T:AndroidCtrl.ADB.Device.Shell.IShell"/> instance
            </summary>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.NullReferenceException"/>
            <returns><see cref="T:AndroidCtrl.ADB.Device.Shell.IShell"/> or <see cref="T:null"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.IADB.Backup(System.String,System.String)">
            <summary>
            Backup the Device with given arguments.
            </summary>
            <param name="localPath">File path</param>
            <param name="args">Backup arguments</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.IADB.BugReport">
            <summary>
             Write the bugreport to stdout
            </summary>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.IADB.BugReport(System.String)">
            <summary>
             Write the bugreport to the given remotePath (bugreport.zip)
            <para/>*NOTE*
            <para/>If remotePath is a directory, the bug report is saved in that directory. devices that don't support zipped bug reports output to stdout.
            <para/>Work only on devices running android 7.0++
            </summary>
            <param name="remotePath">bugreport storage location</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.IADB.Copy(System.String,AndroidCtrl.IDeviceInfo,System.String)">
            <summary>
             Copy the given <paramref name="sourcePath"/> to the given <paramref name="destPath"/> on the provided <paramref name="device"/>
            <para/>File usage: /sdcard/tmp.apk /sdcard/ - tmp.apk to /sdcard/
            <para/>File usage: /sdcard/tmp.apk /sdcard/new_tmp.apk - renamed new_tmp.apk to /sdcard/
            <para/>Directory usage: /sdcard/tmp/ /sdcard/ - content from tmp to /sdcard/
            <para/>Directory usage: /sdcard/tmp/ /sdcard/tmp/ - tmp to /sdcard/
            </summary>
            <param name="sourcePath">Remote source</param>
            <param name="device"><see cref="T:AndroidCtrl.IDeviceInfo"/></param>
            <param name="destPath">Remote destination</param>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NullReferenceException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.IADB.Copy(System.String,AndroidCtrl.IDeviceInfo,System.String,System.Threading.CancellationToken)">
            <summary>
             Copy the given <paramref name="sourcePath"/> to the given <paramref name="destPath"/> on the provided <paramref name="device"/>
            <para/>File usage: /sdcard/tmp.apk /sdcard/ - tmp.apk to /sdcard/
            <para/>File usage: /sdcard/tmp.apk /sdcard/new_tmp.apk - renamed new_tmp.apk to /sdcard/
            <para/>Directory usage: /sdcard/tmp/ /sdcard/ - content from tmp to /sdcard/
            <para/>Directory usage: /sdcard/tmp/ /sdcard/tmp/ - tmp to /sdcard/
            </summary>
            <param name="sourcePath">Remote source</param>
            <param name="device"><see cref="T:AndroidCtrl.IDeviceInfo"/></param>
            <param name="destPath">Remote destination</param>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/></param>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NullReferenceException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.IADB.Copy(System.String,AndroidCtrl.IDeviceInfo,System.String,AndroidCtrl.ADB.Device.IO.FileTransferEventHandler)">
            <summary>
             Copy the given <paramref name="sourcePath"/> to the given <paramref name="destPath"/> on the provided <paramref name="device"/>
            <para/>File usage: /sdcard/tmp.apk /sdcard/ - tmp.apk to /sdcard/
            <para/>File usage: /sdcard/tmp.apk /sdcard/new_tmp.apk - renamed new_tmp.apk to /sdcard/
            <para/>Directory usage: /sdcard/tmp/ /sdcard/ - content from tmp to /sdcard/
            <para/>Directory usage: /sdcard/tmp/ /sdcard/tmp/ - tmp to /sdcard/
            </summary>
            <param name="sourcePath">Remote source</param>
            <param name="device"><see cref="T:AndroidCtrl.IDeviceInfo"/></param>
            <param name="destPath">Remote destination</param>
            <param name="transferEventHandler"><see cref="T:AndroidCtrl.ADB.Device.IO.FileTransferEventHandler"/></param>
            <exception cref="T:System.ArgumentNullException"/>
            v<exception cref="T:System.ArgumentOutOfRangeException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NullReferenceException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.IADB.Copy(System.String,AndroidCtrl.IDeviceInfo,System.String,AndroidCtrl.ADB.Device.IO.FileTransferEventHandler,System.Threading.CancellationToken)">
            <summary>
             Copy the given <paramref name="sourcePath"/> to the given <paramref name="destPath"/> on the provided <paramref name="device"/>
            <para/>File usage: /sdcard/tmp.apk /sdcard/ - tmp.apk to /sdcard/
            <para/>File usage: /sdcard/tmp.apk /sdcard/new_tmp.apk - renamed new_tmp.apk to /sdcard/
            <para/>Directory usage: /sdcard/tmp/ /sdcard/ - content from tmp to /sdcard/
            <para/>Directory usage: /sdcard/tmp/ /sdcard/tmp/ - tmp to /sdcard/
            </summary>
            <param name="sourcePath">Remote source</param>
            <param name="device"><see cref="T:AndroidCtrl.IDeviceInfo"/></param>
            <param name="destPath">Remote destination</param>
            <param name="transferEventHandler"><see cref="T:AndroidCtrl.ADB.Device.IO.FileTransferEventHandler"/></param>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/></param>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.NullReferenceException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.IADB.Emu(System.String,System.Int32)">
            <summary>
             Run emulator console command
            <para/>*NOTE*
            <para/>timeOut = -1 implies infinite
            </summary>
            <param name="cmd">Command to run</param>
            <param name="timeout">time the process will wait for output, -1 implies infinite, 0 implies class internal timeout</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.IADB.Emu(System.String,AndroidCtrl.ProcessModels.ProcessResponseEventHandler,System.Int32)">
            <summary>
             Run emulator console command
            <para/>*NOTE*
            <para/>timeOut = -1 implies infinite
            </summary>
            <param name="cmd">Command to run</param>
            <param name="responseEventHandler">Defines the callback to raise for any output/error response during the operation.</param>
            <param name="timeout">time the process will wait for output, -1 implies infinite, 0 implies class internal timeout</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.IADB.ExecIn(System.String,System.IO.Stream,System.Int32)">
            <summary>
            ExecIn is a kind of shell for binary transaction
            <para/>*NOTE*
            <para/>timeOut = -1 implies infinite/process end
            </summary>
            <param name="cmd">Command to run</param>
            <param name="stream">input <see cref="T:System.IO.Stream"/></param>
            <param name="timeout">time the method will process the input stream, 0 implies class internal timeout</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.IADB.ExecIn(System.String,System.IO.Stream,System.Threading.CancellationToken,System.Int32)">
            <summary>
            ExecIn is a kind of shell for binary transaction
            <para/>*NOTE*
            <para/>timeOut = -1 implies infinite/process end
            </summary>
            <param name="cmd">Command to run</param>
            <param name="stream">input <see cref="T:System.IO.Stream"/></param>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/></param>
            <param name="timeout">time the method will process the input stream, 0 implies class internal timeout</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.IADB.ExecOut(System.String,System.IO.Stream,System.Int32)">
            <summary>
             ExecOut is a kind of shell for binary transaction
            <para/>*NOTE*
            <para/>timeOut = -1 implies infinite
            </summary>
            <param name="cmd">Command to run</param>
            <param name="stream">output <see cref="T:System.IO.Stream"/></param>
            <param name="timeout">time the process will wait for output, 0 implies class internal timeout</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.IADB.ExecOut(System.String,System.IO.Stream,System.Threading.CancellationToken,System.Int32)">
            <summary>
             ExecOut is a kind of shell for binary transaction
            <para/>*NOTE*
            <para/>timeOut = -1 implies infinite
            </summary>
            <param name="cmd">Command to run</param>
            <param name="stream">output <see cref="T:System.IO.Stream"/></param>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/></param>
            <param name="timeout">time the process will wait for output, 0 implies class internal timeout</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.IADB.Forward(System.String)">
            <summary>
             Forward a port, list or remove them
            </summary>
            <param name="args">--list, --no-rebind, --remove, --remove-all </param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.IADB.Forward(System.String,AndroidCtrl.ADB.FRPortType,System.String)">
            <summary>
             Forward a port, list or remove them
            </summary>
            <param name="args">null, --list, --no-rebind, --remove, --remove-all</param>
            <param name="localPortType">IDFRPortType</param>
            <param name="localPort">Local port</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.IADB.Forward(AndroidCtrl.ADB.FRPortType,System.String,AndroidCtrl.ADB.FRPortType,System.String)">
            <summary>
             Forward a port, list or remove them
            </summary>
            <param name="localPortType">IDFRPortType</param>
            <param name="localPort">Local port</param>
            <param name="remotePortType">IDFRPortType</param>
            <param name="remotePort">Remote port</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.IADB.Forward(System.String,AndroidCtrl.ADB.FRPortType,System.String,AndroidCtrl.ADB.FRPortType,System.String)">
            <summary>
             Forward a port, list or remove them
            </summary>
            <param name="args">--list, --no-rebind, --remove, --remove-all </param>
            <param name="localPortType">IDFRPortType</param>
            <param name="localPort">Local port</param>
            <param name="remotePortType">IDFRPortType</param>
            <param name="remotePort">Remote port</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.IADB.GetDevPath">
            <summary>
             Return the devpath or an empty string
            </summary>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.IADB.GetSerial">
            <summary>
             Return the Device serialnumber or an empty string
            </summary>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.IADB.GetState">
            <summary>
             Returns the device state and refresh the DeviceState property
            </summary>
            <returns><see cref="T:AndroidCtrl.DeviceState"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.IADB.Install(System.String,System.String)">
            <summary>
             Install an APK on the Device
            <para/>*HINT*
            <para/>-d allow version downgrade
            <para/>-g grant all runtime permissions
            <para/>-l forward-lock the app
            <para/>-r reinstall the app and keep its data
            <para/>-p partial application install
            <para/>-s install the app on SD-Card instead of the internal storage
            <para/>-t allow test package
            <para/>the rest of the arguments u can use, u can find in the adb help
            </summary>
            <param name="localPath">File path</param>
            <param name="args">Installer arguments or null</param>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.IADB.Install(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
             Install an APK on the Device
            <para/>*HINT*
            <para/>-d allow version downgrade
            <para/>-g grant all runtime permissions
            <para/>-l forward-lock the app
            <para/>-r reinstall the app and keep its data
            <para/>-p partial application install
            <para/>-s install the app on SD-Card instead of the internal storage
            <para/>-t allow test package
            <para/>the rest of the arguments u can use, u can find in the adb help
            </summary>
            <param name="localPaths">File paths</param>
            <param name="args">Installer arguments or null</param>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.IADB.JDWP">
            <summary>
             JDWP list PIDs of processes hosting a JDWP transport
            </summary>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.IADB.JDWP(System.Int32)">
            <summary>
             Connects to the JDWP thread running in the VM of the given process ID
            </summary>
            <param name="pid">The remote process ID</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.IADB.Keygen(System.String)">
            <summary>
             Keygen generate adb public/private key.
            <para/>*NOTE*
            <para/>The private key is stored in (the/given/path), and the public key is stored in (the/given/path.pub). Any existing files will be overwritten.
            </summary>
            <param name="localKeyPath">local key file path</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.IADB.Pull(System.String,System.String)">
            <summary>
             Pull the given remote object to the given local location
            <para/>File usage: /sdcard/tmp.apk C:\\ - tmp.apk to C:\\
            <para/>File usage: /sdcard/tmp.apk C:\\new_tmp.apk - renamed new_tmp.apk to C:\\
            <para/>Directory usage: /sdcard/tmp/ C:\\ - content from tmp to C:\\
            <para/>Directory usage: /sdcard/tmp/ C:\\tmp\\ - tmp to C:\\
            </summary>
            <param name="remotePath">Remote path</param>
            <param name="localPath">Local path</param>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
            <exception cref="T:System.IO.IOException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.IADB.Pull(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
             Pull the given remote object to the given local location
            <para/>File usage: /sdcard/tmp.apk C:\\ - tmp.apk to C:\\
            <para/>File usage: /sdcard/tmp.apk C:\\new_tmp.apk - renamed new_tmp.apk to C:\\
            <para/>Directory usage: /sdcard/tmp/ C:\\ - content from tmp to C:\\
            <para/>Directory usage: /sdcard/tmp/ C:\\tmp\\ - tmp to C:\\
            </summary>
            <param name="remotePath">Remote path</param>
            <param name="localPath">Local path</param>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/></param>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
            <exception cref="T:System.IO.IOException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.IADB.Pull(System.String,System.String,AndroidCtrl.ADB.Device.IO.FileTransferEventHandler)">
            <summary>
             Pull the given remote object to the given local location
            <para/>File usage: /sdcard/tmp.apk C:\\ - tmp.apk to C:\\
            <para/>File usage: /sdcard/tmp.apk C:\\new_tmp.apk - renamed new_tmp.apk to C:\\
            <para/>Directory usage: /sdcard/tmp/ C:\\ - content from tmp to C:\\
            <para/>Directory usage: /sdcard/tmp/ C:\\tmp\\ - tmp to C:\\
            </summary>
            <param name="remotePath">Remote path</param>
            <param name="localPath">Local path</param>
            <param name="transferEventHandler"><see cref="T:AndroidCtrl.ADB.Device.IO.FileTransferEventHandler"/></param>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
            <exception cref="T:System.IO.IOException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.IADB.Pull(System.String,System.String,AndroidCtrl.ADB.Device.IO.FileTransferEventHandler,System.Threading.CancellationToken)">
            <summary>
             Pull the given remote object to the given local location
            <para/>File usage: /sdcard/tmp.apk C:\\ - tmp.apk to C:\\
            <para/>File usage: /sdcard/tmp.apk C:\\new_tmp.apk - renamed new_tmp.apk to C:\\
            <para/>Directory usage: /sdcard/tmp/ C:\\ - content from tmp to C:\\
            <para/>Directory usage: /sdcard/tmp/ C:\\tmp\\ - tmp to C:\\
            </summary>
            <param name="remotePath">Remote path</param>
            <param name="localPath">Local path</param>
            <param name="transferEventHandler"><see cref="T:AndroidCtrl.ADB.Device.IO.FileTransferEventHandler"/></param>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/></param>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
            <exception cref="T:System.IO.IOException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.IADB.Push(System.String,System.String)">
            <summary>
             Push the given local object to the given remote location
            <para/>File usage: C:\\tmp.apk /sdcard/ - tmp.apk to sdcard
            <para/>File usage: C:\\tmp.apk /sdcard/new_tmp.apk - renamed new_tmp.apk to sdcard
            <para/>Directory usage: C:\\tmp\\ /sdcard/ - content from tmp to sdcard
            <para/>Directory usage: C:\\tmp\\ /sdcard/tmp/ - tmp to sdcard
            </summary>
            <param name="localPath">Local path</param>
            <param name="remotePath">Remote path</param>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
            <exception cref="T:System.IO.IOException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.IADB.Push(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
             Push the given local object to the given remote location
            <para/>File usage: C:\\tmp.apk /sdcard/ - tmp.apk to sdcard
            <para/>File usage: C:\\tmp.apk /sdcard/new_tmp.apk - renamed new_tmp.apk to sdcard
            <para/>Directory usage: C:\\tmp\\ /sdcard/ - content from tmp to sdcard
            <para/>Directory usage: C:\\tmp\\ /sdcard/tmp/ - tmp to sdcard
            </summary>
            <param name="localPath">Local path</param>
            <param name="remotePath">Remote path</param>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/></param>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
            <exception cref="T:System.IO.IOException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.IADB.Push(System.String,System.String,AndroidCtrl.ADB.Device.IO.FileTransferEventHandler)">
            <summary>
             Push the given local object to the given remote location
            <para/>File usage: C:\\tmp.apk /sdcard/ - tmp.apk to sdcard
            <para/>File usage: C:\\tmp.apk /sdcard/new_tmp.apk - renamed new_tmp.apk to sdcard
            <para/>Directory usage: C:\\tmp\\ /sdcard/ - content from tmp to sdcard
            <para/>Directory usage: C:\\tmp\\ /sdcard/tmp/ - tmp to sdcard
            </summary>
            <param name="localPath">Local path</param>
            <param name="remotePath">Remote path</param>
            <param name="transferEventHandler"><see cref="T:AndroidCtrl.ADB.Device.IO.FileTransferEventHandler"/></param>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
            <exception cref="T:System.IO.IOException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.IADB.Push(System.String,System.String,AndroidCtrl.ADB.Device.IO.FileTransferEventHandler,System.Threading.CancellationToken)">
            <summary>
             Push the given local object to the given remote location
            <para/>File usage: C:\\tmp.apk /sdcard/ - tmp.apk to sdcard
            <para/>File usage: C:\\tmp.apk /sdcard/new_tmp.apk - renamed new_tmp.apk to sdcard
            <para/>Directory usage: C:\\tmp\\ /sdcard/ - content from tmp to sdcard
            <para/>Directory usage: C:\\tmp\\ /sdcard/tmp/ - tmp to sdcard
            </summary>
            <param name="localPath">Local path</param>
            <param name="remotePath">Remote path</param>
            <param name="transferEventHandler"><see cref="T:AndroidCtrl.ADB.Device.IO.FileTransferEventHandler"/></param>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/></param>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
            <exception cref="T:System.IO.IOException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.IADB.Reboot(AndroidCtrl.BootMode)">
            <summary>
             Reboot the device to given mode
            </summary>
            <param name="mode"><see cref="T:AndroidCtrl.BootMode"/></param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.IADB.Reconnect(AndroidCtrl.ADB.Reconnect)">
            <summary>
             Initiate a reconnect to/from the device
            </summary>
            <param name="mode">IDReconnect</param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.IADB.Remount">
            <summary>
             Remounts the Device system partition to read-write
            </summary>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.IADB.Restore(System.String)">
            <summary>
             Restore backup to Device.
            </summary>
            <param name="localPath">File path</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.IADB.Reverse(System.String)">
            <summary>
             Reverse a port, list or remove them
            </summary>
            <param name="args">--list, --no-rebind, --remove, --remove-all</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.IADB.Reverse(System.String,AndroidCtrl.ADB.FRPortType,System.String)">
            <summary>
             Reverse a port, list or remove them
            </summary>
            <param name="args">--list, --no-rebind, --remove, --remove-all</param>
            <param name="remotePortType">IDFRPortType</param>
            <param name="remotePort">Remote port</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.IADB.Reverse(AndroidCtrl.ADB.FRPortType,System.String,AndroidCtrl.ADB.FRPortType,System.String)">
            <summary>
             Reverse a port, list or remove them
            </summary>
            <param name="remotePortType">IDFRPortType</param>
            <param name="remotePort">Remote port</param>
            <param name="localPortType">IDFRPortType</param>
            <param name="localPort">Local port</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.IADB.Reverse(System.String,AndroidCtrl.ADB.FRPortType,System.String,AndroidCtrl.ADB.FRPortType,System.String)">
            <summary>
             Reverse a port, list or remove them
            </summary>
            <param name="args">--list, --no-rebind, --remove, --remove-all</param>
            <param name="remotePortType">IDFRPortType</param>
            <param name="remotePort">Remote port</param>
            <param name="localPortType">IDFRPortType</param>
            <param name="localPort">Local port</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.IADB.Root">
            <summary>
             Restarts adb daemon with root permissions on the device
            <para/>*HINT*
            <para/>The device must be rooted
            </summary>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.IADB.ShellCmd(System.String,System.Int32)">
            <summary>
             Send an Shell-Command to the Device
            <para/>*NOTE*
            <para/>timeout = -1 implies infinite
            <para/>If u want send an SU-Command use <see cref="M:AndroidCtrl.ADB.Device.Su.ShellCmd(System.String,System.Int32)"/>
            </summary>
            <param name="cmd">Command to send</param>
            <param name="timeout">time the process will wait for output, -1 implies infinite, 0 implies class internal <see cref="P:AndroidCtrl.ADB.IADB.CmdTimeout"/></param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.IADB.ShellCmd(System.String,System.Threading.CancellationToken,System.Int32)">
            <summary>
             Send an Shell-Command to the Device
            <para/>*NOTE*
            <para/>timeout = -1 implies infinite
            <para/>If u want send an SU-Command use <see cref="M:AndroidCtrl.ADB.Device.Su.ShellCmd(System.String,System.Threading.CancellationToken,System.Int32)"/>
            </summary>
            <param name="cmd">Command to send</param>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/></param>
            <param name="timeout">time the process will wait for output, -1 implies infinite, 0 implies class internal <see cref="P:AndroidCtrl.ADB.IADB.CmdTimeout"/></param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.IADB.ShellCmd(System.String,AndroidCtrl.ADB.Device.Shell.ShellDataEventHandler,System.Int32)">
            <summary>
             Send an Shell-Command to the Device
            <para/>*NOTE*
            <para/>timeout = -1 implies infinite
            <para/>If u want send an SU-Command use <see cref="M:AndroidCtrl.ADB.Device.Su.ShellCmd(System.String,AndroidCtrl.ADB.Device.Shell.ShellDataEventHandler,System.Int32)"/>
            </summary>
            <param name="cmd">Command to send</param>
            <param name="responseEventHandler"><see cref="T:AndroidCtrl.ADB.Device.Shell.ShellDataEventHandler"/></param>
            <param name="timeout">time the process will wait for output, -1 implies infinite, 0 implies class internal <see cref="P:AndroidCtrl.ADB.IADB.CmdTimeout"/></param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.IADB.ShellCmd(System.String,AndroidCtrl.ADB.Device.Shell.ShellDataEventHandler,System.Threading.CancellationToken,System.Int32)">
            <summary>
             Send an Shell-Command to the Device
            <para/>*NOTE*
            <para/>timeout = -1 implies infinite
            <para/>If u want send an SU-Command use <see cref="M:AndroidCtrl.ADB.Device.Su.ShellCmd(System.String,AndroidCtrl.ADB.Device.Shell.ShellDataEventHandler,System.Threading.CancellationToken,System.Int32)"/>
            </summary>
            <param name="cmd">Command to send</param>
            <param name="responseEventHandler"><see cref="T:AndroidCtrl.ADB.Device.Shell.ShellDataEventHandler"/></param>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/></param>
            <param name="timeout">time the process will wait for output, -1 implies infinite, 0 implies class internal <see cref="P:AndroidCtrl.ADB.IADB.CmdTimeout"/></param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.IADB.ShellCmdHRes(System.String,System.Int32)">
            <summary>
             Send an Shell-Command to the Device and return the HResult
            <para/>*NOTE*
            <para/>timeout = -1 implies infinite
            <para/>If u want send an SU-Command use <see cref="M:AndroidCtrl.ADB.Device.Su.ShellCmdHRes(System.String,System.Int32)"/>
            </summary>
            <param name="cmd">Command to send</param>
            <param name="timeout">time the process will wait for output, -1 implies infinite, 0 implies class internal <see cref="P:AndroidCtrl.ADB.IADB.CmdTimeout"/></param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Int32"/> -1 (implies NULL on the shell return)</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.IADB.ShellCmdHRes(System.String,System.Threading.CancellationToken,System.Int32)">
            <summary>
             Send an Shell-Command to the Device and return the HResult
            <para/>*NOTE*
            <para/>timeout = -1 implies infinite
            <para/>If u want send an SU-Command use <see cref="M:AndroidCtrl.ADB.Device.Su.ShellCmdHRes(System.String,System.Threading.CancellationToken,System.Int32)"/>
            </summary>
            <param name="cmd">Command to send</param>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/></param>
            <param name="timeout">time the process will wait for output, -1 implies infinite, 0 implies class internal <see cref="P:AndroidCtrl.ADB.IADB.CmdTimeout"/></param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Int32"/> -1 (implies NULL on the shell return)</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.IADB.ShellCmdHRes(System.String,AndroidCtrl.ADB.Device.Shell.ShellDataEventHandler,System.Int32)">
            <summary>
             Send an Shell-Command to the Device and return the HResult
            <para/>*NOTE*
            <para/>timeout = -1 implies infinite
            <para/>If u want send an SU-Command use <see cref="M:AndroidCtrl.ADB.Device.Su.ShellCmdHRes(System.String,AndroidCtrl.ADB.Device.Shell.ShellDataEventHandler,System.Int32)"/>
            </summary>
            <param name="cmd">Command to send</param>
            <param name="responseEventHandler"><see cref="T:AndroidCtrl.ADB.Device.Shell.ShellDataEventHandler"/></param>
            <param name="timeout">time the process will wait for output, -1 implies infinite, 0 implies class internal <see cref="P:AndroidCtrl.ADB.IADB.CmdTimeout"/></param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Int32"/> -1 (implies NULL on the shell return)</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.IADB.ShellCmdHRes(System.String,AndroidCtrl.ADB.Device.Shell.ShellDataEventHandler,System.Threading.CancellationToken,System.Int32)">
            <summary>
             Send an Shell-Command to the Device and return the HResult
            <para/>*NOTE*
            <para/>timeout = -1 implies infinite
            <para/>If u want send an SU-Command use <see cref="M:AndroidCtrl.ADB.Device.Su.ShellCmdHRes(System.String,AndroidCtrl.ADB.Device.Shell.ShellDataEventHandler,System.Threading.CancellationToken,System.Int32)"/>
            </summary>
            <param name="cmd">Command to send</param>
            <param name="responseEventHandler"><see cref="T:AndroidCtrl.ADB.Device.Shell.ShellDataEventHandler"/></param>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/></param>
            <param name="timeout">time the process will wait for output, -1 implies infinite, 0 implies class internal <see cref="P:AndroidCtrl.ADB.IADB.CmdTimeout"/></param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Int32"/> -1 (implies NULL on the shell return)</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.IADB.ShellCmdStack(System.Collections.Generic.IEnumerable{System.String},System.Int32)">
            <summary>
             Send an Shell-Command-Stack to the Device
            <para/>*NOTE*
            <para/>Between the cmds in the stack is an delay of 150 ms
            <para/>timeout = -1 implies infinite
            <para/>If u want send an SU-Command-Stack use <see cref="M:AndroidCtrl.ADB.Device.Su.ShellCmdStack(System.Collections.Generic.IEnumerable{System.String},System.Int32)"/>
            </summary>
            <param name="cmdStack">Commands to send to the device Shell</param>
            <param name="timeout">time the process will wait for output, -1 implies infinite and 0 implies the use of the class internal <see cref="P:AndroidCtrl.ADB.IADB.CmdTimeout"/>.</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.IADB.ShellCmdStack(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken,System.Int32)">
            <summary>
             Send an Shell-Command-Stack to the Device
            <para/>*NOTE*
            <para/>Between the cmds in the stack is an delay of 150 ms
            <para/>timeout = -1 implies infinite
            <para/>If u want send an SU-Command-Stack use <see cref="M:AndroidCtrl.ADB.Device.Su.ShellCmdStack(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken,System.Int32)"/>
            </summary>
            <param name="cmdStack">Commands to send to the device Shell</param>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/></param>
            <param name="timeout">time the process will wait for output, -1 implies infinite and 0 implies the use of the class internal <see cref="P:AndroidCtrl.ADB.IADB.CmdTimeout"/>.</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.IADB.ShellCmdStack(System.Collections.Generic.IEnumerable{System.String},AndroidCtrl.ADB.Device.Shell.ShellDataEventHandler,System.Int32)">
            <summary>
             Send an Shell-Command-Stack to the Device
            <para/>*NOTE*
            <para/>Between the cmds in the stack is an delay of 150 ms
            <para/>timeout = -1 implies infinite
            <para/>If u want send an SU-Command-Stack use <see cref="M:AndroidCtrl.ADB.Device.Su.ShellCmdStack(System.Collections.Generic.IEnumerable{System.String},AndroidCtrl.ADB.Device.Shell.ShellDataEventHandler,System.Int32)"/>
            </summary>
            <param name="cmdStack">Commands to send to the device Shell</param>
            <param name="responseEventHandler"><see cref="T:AndroidCtrl.ADB.Device.Shell.ShellDataEventHandler"/></param>
            <param name="timeout">time the process will wait for output, -1 implies infinite and 0 implies the use of the class internal <see cref="P:AndroidCtrl.ADB.IADB.CmdTimeout"/>.</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.IADB.ShellCmdStack(System.Collections.Generic.IEnumerable{System.String},AndroidCtrl.ADB.Device.Shell.ShellDataEventHandler,System.Threading.CancellationToken,System.Int32)">
            <summary>
             Send an Shell-Command-Stack to the Device
            <para/>*NOTE*
            <para/>Between the cmds in the stack is an delay of 150 ms
            <para/>timeout = -1 implies infinite
            <para/>If u want send an SU-Command-Stack use <see cref="M:AndroidCtrl.ADB.Device.Su.ShellCmdStack(System.Collections.Generic.IEnumerable{System.String},AndroidCtrl.ADB.Device.Shell.ShellDataEventHandler,System.Threading.CancellationToken,System.Int32)"/>
            </summary>
            <param name="cmdStack">Commands to send to the device Shell</param>
            <param name="responseEventHandler"><see cref="T:AndroidCtrl.ADB.Device.Shell.ShellDataEventHandler"/></param>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/></param>
            <param name="timeout">time the process will wait for output, -1 implies infinite and 0 implies the use of the class internal <see cref="P:AndroidCtrl.ADB.IADB.CmdTimeout"/>.</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.IADB.Sideload(System.String,System.Int32)">
            <summary>
             Sideloads a rom
            <para/>*NOTE*
            <para/>timeOut = -1 implies infinite
            <para/>The recovery must support this function
            </summary>
            <param name="localPath">Local path (c:\path\to\rom.zip)</param>
            <param name="timeout">time the process will wait for output, -1 implies infinite, 0 implies class internal timeout</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.IADB.TCPIP(System.Int32)">
            <summary>
             Restart adbd daemon listen on given tcp port
            </summary>
            <param name="port">port</param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.IADB.UnInstall(System.String,System.Boolean)">
            <summary>
             UnInstall an APK on the Device
            </summary>
            <param name="package">package name e.g. com.example.package</param>
            <param name="keepData">keeps the cache and userdata</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.IADB.UnRoot">
            <summary>
             Restarts adb daemon without root permissions on the device
            <para/>*HINT*
            <para/>The device must be rooted
            </summary>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.IADB.USB">
            <summary>
             Restart adbd daemon listen on USB
            </summary>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.IADB.Verity(AndroidCtrl.ADB.DMVerity)">
            <summary>
             Dis-/Enable dm-verity on USERDEBUG builds
            </summary>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.IADB.WaitForDevice">
            <summary>
             Wait until the device connects with <see cref="F:AndroidCtrl.ADB.Transport.Any"/> and <see cref="F:AndroidCtrl.DeviceState.DEVICE"/>
            <para/>*NOTE*
            <para/>This will freeze the current thread until a device is connected
            <para/>Put functions which need this kind of wait procedure in a separate thread.
            </summary>
            <exception cref="T:System.NullReferenceException"/>
        </member>
        <member name="M:AndroidCtrl.ADB.IADB.WaitForDevice(System.Threading.CancellationToken)">
            <summary>
             Wait until the device connects with <see cref="F:AndroidCtrl.ADB.Transport.Any"/> and <see cref="F:AndroidCtrl.DeviceState.DEVICE"/>
            <para/>*NOTE*
            <para/>This will freeze the current thread until a device is connected
            <para/>Put functions which need this kind of wait procedure in a separate thread.
            </summary>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/></param>
            <exception cref="T:System.NullReferenceException"/>
        </member>
        <member name="M:AndroidCtrl.ADB.IADB.WaitFor(AndroidCtrl.ADB.Transport,AndroidCtrl.DeviceState)">
            <summary>
             Wait until the device connects with the given trasport ID and state to adb
            <para/>This will freeze the current thread until a device is connected
            <para/>Put functions which need this kind of wait procedure in a separate thread.
            </summary>
            <param name="transport"><see cref="T:AndroidCtrl.ADB.Transport"/></param>
            <param name="state"><see cref="T:AndroidCtrl.DeviceState"/></param>
            <exception cref="T:System.NullReferenceException"/>
        </member>
        <member name="M:AndroidCtrl.ADB.IADB.WaitFor(AndroidCtrl.ADB.Transport,AndroidCtrl.DeviceState,System.Threading.CancellationToken)">
            <summary>
             Wait until the device connects with the given trasport ID and state to adb
            <para/>This will freeze the current thread until a device is connected
            <para/>Put functions which need this kind of wait procedure in a separate thread.
            </summary>
            <param name="transport"><see cref="T:AndroidCtrl.ADB.Transport"/></param>
            <param name="state"><see cref="T:AndroidCtrl.DeviceState"/></param>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/></param>
            <exception cref="T:System.NullReferenceException"/>
        </member>
        <member name="T:AndroidCtrl.ADB.ADBridge">
            <summary>
             This class is a helper, to unify the access on <see cref="T:AndroidCtrl.ADB.Binary.ADB"/> &amp; <see cref="T:AndroidCtrl.ADB.Socket.ADB"/>
            <para/>*NOTE*
            <para/>If u try to initialize the <see cref="T:AndroidCtrl.ADB.ADBridge"/> with <see cref="F:AndroidCtrl.ADB.BridgeMode.None"/> u'll get an exception!
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.ADBridge.#ctor(AndroidCtrl.ADB.BridgeMode)">
            <summary>
             Initialize the <see cref="T:AndroidCtrl.ADB.ADBridge"/>
            </summary>
            <param name="mode"><see cref="T:AndroidCtrl.ADB.BridgeMode"/></param>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="M:AndroidCtrl.ADB.ADBridge.Dispose">
            <summary>
             IDispose
            <para/>*NOTE*
            <para/>This will NOT call <see cref="M:AndroidCtrl.ADB.Binary.ADB.Dispose(System.Boolean)"/> nor <see cref="M:AndroidCtrl.ADB.Socket.ADB.Dispose"/>! Only this <see cref="T:AndroidCtrl.ADB.ADBridge"/> instance gets disposed.
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.ADBridge.CreateFromDevice(AndroidCtrl.IDeviceInfo)">
            <summary>
             Creates an <see cref="T:AndroidCtrl.ADB.ADBridge"/> based on the provided <see cref="T:AndroidCtrl.IDeviceInfo"/>
            </summary>
            <param name="device"><see cref="T:AndroidCtrl.IDeviceInfo"/></param>
            <returns><see cref="T:AndroidCtrl.ADB.ADBridge"/> or <see cref="T:null"/> if the <see cref="T:AndroidCtrl.IDeviceInfo"/> was from <see cref="T:AndroidCtrl.Fastboot.Fastboot"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.ADBridge.CreateFromDevice(AndroidCtrl.IDeviceInfo,AndroidCtrl.ADB.BridgeMode)">
            <summary>
             Creates an <see cref="T:AndroidCtrl.ADB.ADBridge"/> based on the provided <see cref="T:AndroidCtrl.IDeviceInfo"/> or <see cref="T:AndroidCtrl.ADB.BridgeMode"/>
            </summary>
            <param name="device"><see cref="T:AndroidCtrl.IDeviceInfo"/></param>
            <param name="fallback"><see cref="T:AndroidCtrl.ADB.BridgeMode"/></param>
            <exception cref="T:System.ArgumentException"></exception>
            <returns><see cref="T:AndroidCtrl.ADB.ADBridge"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.ADBridge.GetBridgeModeOfDevice(AndroidCtrl.IDeviceInfo)">
            <summary>
             Returns an <see cref="T:AndroidCtrl.ADB.BridgeMode"/> based on the provided <see cref="T:AndroidCtrl.IDeviceInfo"/>
            </summary>
            <param name="device"><see cref="T:AndroidCtrl.IDeviceInfo"/></param>
            <returns>If the return is <see cref="F:AndroidCtrl.ADB.BridgeMode.None"/>, u can't use the <see cref="T:AndroidCtrl.ADB.ADBridge"/> for this device... Because the <see cref="T:AndroidCtrl.IDeviceInfo"/> was from <see cref="T:AndroidCtrl.Fastboot.Fastboot"/>.</returns>
        </member>
        <member name="P:AndroidCtrl.ADB.ADBridge.BridgeMode">
            <summary>
             Returns the current bridging mode
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.ADBridge.Switch(AndroidCtrl.IDeviceInfo)">
            <summary>
             This will switch the bridge mode only if needed, if the new <see cref="T:AndroidCtrl.ADB.BridgeMode"/> equals to <see cref="P:AndroidCtrl.ADB.ADBridge.BridgeMode"/> there is nothing done and the return is false
            <para/>*NOTE*
            <para/>This method uses the both events <see cref="E:AndroidCtrl.ADB.ADBridge.OnAfterSwitch"/> &amp; <see cref="E:AndroidCtrl.ADB.ADBridge.OnBeforeSwitch"/>, so u can subscribe to those if u need to change something before and after the switch is done. (Like adding, removing event handler etc.)
            </summary>
            <param name="device"><see cref="T:AndroidCtrl.IDeviceInfo"/></param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.ADBridge.Switch(AndroidCtrl.ADB.BridgeMode)">
            <summary>
             This will switch the bridge mode only if needed, if the new <see cref="T:AndroidCtrl.ADB.BridgeMode"/> equals to <see cref="P:AndroidCtrl.ADB.ADBridge.BridgeMode"/> there is nothing done and the return is false
            <para/>*NOTE*
            <para/>This method uses the both events <see cref="E:AndroidCtrl.ADB.ADBridge.OnAfterSwitch"/> &amp; <see cref="E:AndroidCtrl.ADB.ADBridge.OnBeforeSwitch"/>, so u can subscribe to those if u need to change something before and after the switch is done. (Like adding, removing event handler etc.)
            </summary>
            <param name="newMode"><see cref="T:AndroidCtrl.ADB.BridgeMode"/></param>
            <returns>bool</returns>
        </member>
        <member name="E:AndroidCtrl.ADB.ADBridge.OnAfterSwitch">
            <summary>
             This event will be raised after the bridge switched between <see cref="T:AndroidCtrl.ADB.Binary.ADB"/> &amp; <see cref="T:AndroidCtrl.ADB.Socket.ADB"/>
            </summary>
        </member>
        <member name="E:AndroidCtrl.ADB.ADBridge.OnBeforeSwitch">
            <summary>
             This event will be raised before the bridge switch between <see cref="T:AndroidCtrl.ADB.Binary.ADB"/> &amp; <see cref="T:AndroidCtrl.ADB.Socket.ADB"/>
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.ADBridge.Instance(System.String)">
            <summary>
             Returns and if not exists creates, the choosen ADB device instance
            <para/>*NOTE*
            <para/>This is the basic interactor in this class, via this var u MUST get/create every device instance.
            <para/>Via device u can get/create the device specific instance. If device is empty, the return is ever the class selected device.
            </summary>
            <param name="device">The device id/serialnumber <see cref="T:System.String"/> or <see cref="T:null"/></param>
            <returns><see cref="T:AndroidCtrl.ADB.IADB"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.ADBridge.Instance(AndroidCtrl.IDeviceInfo)">
            <summary>
             Returns and if not exists creates, the choosen ADB device instance
            <para/>*NOTE*
            <para/>This is the basic interactor in this class, via this var u MUST get/create every device instance.
            <para/>Via device u can get/create the device specific instance. If device is null, the return is ever the class selected device.
            </summary>
            <param name="device"><see cref="T:AndroidCtrl.IDeviceInfo"/></param>
            <returns><see cref="T:AndroidCtrl.ADB.IADB"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.ADBridge.Remove(System.String)">
            <summary>
             Remove the given device from the instance dictionary.
            </summary>
            <param name="device">Device ID <see cref="T:System.String"/></param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.ADBridge.Remove(AndroidCtrl.IDeviceInfo)">
            <summary>
             Remove the given device from the instance dictionary.
            </summary>
            <param name="device"><see cref="T:AndroidCtrl.IDeviceInfo"/></param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.ADBridge.Select(System.String)">
            <summary>
             Select the given device serial in the static class var.
            </summary>
            <param name="device">Device ID <see cref="T:System.String"/></param>
        </member>
        <member name="M:AndroidCtrl.ADB.ADBridge.Select(AndroidCtrl.IDeviceInfo)">
            <summary>
             Select the given device in the static class var.
            </summary>
            <param name="device"><see cref="T:AndroidCtrl.IDeviceInfo"/></param>
        </member>
        <member name="M:AndroidCtrl.ADB.ADBridge.Update(AndroidCtrl.IDeviceInfo)">
            <summary>
             Updates an existing instance of the given device object.
            <para/>*NOTE*
            <para/>Currently only the State gets updated, so the instance know, how to handle su requests.
            </summary>
            <param name="device"><see cref="T:AndroidCtrl.IDeviceInfo"/></param>
        </member>
        <member name="P:AndroidCtrl.ADB.ADBridge.Monitor">
            <summary>
             Returns and if not exist, creates the Monitor instance
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.ADBridge.IsStarted">
            <summary>
             Check if ADB process is running
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.ADBridge.Version">
            <summary>
             Get ADB version
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.ADBridge.Connect(System.String,System.Int32)">
            <summary>
             Connect a single devices via ip
            </summary>
            <param name="deviceIP">e.g. 0.0.0.0 <see cref="T:System.String"/></param>
            <param name="port">default is 5555 <see cref="T:System.Int32"/></param>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.ADBridge.Connect(AndroidCtrl.IDeviceInfo)">
            <summary>
             Connect the given device
            </summary>
            <param name="device"><see cref="T:AndroidCtrl.IDeviceInfo"/></param>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.ADBridge.Devices">
            <summary>
             List all connected Devices
            </summary>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.ADBridge.Disconnect(System.String,System.Int32)">
            <summary>
             Disconnect a single or all ip devices
            </summary>
            <param name="deviceIP">e.g. 0.0.0.0 <see cref="T:System.String"/></param>
            <param name="port">default is 5555 y<see cref="T:System.Int32"/></param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.ADBridge.Disconnect(AndroidCtrl.IDeviceInfo)">
            <summary>
             Disconnect the given device
            </summary>
            <param name="device"><see cref="T:AndroidCtrl.IDeviceInfo"/></param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.ADBridge.Dispose(System.Boolean)">
            <summary>
             This is not a real IDisposable but it will act like one
            <para/>It will reset the underlying <see cref="T:AndroidCtrl.ADB.Binary.ADB"/> or <see cref="T:AndroidCtrl.ADB.Socket.ADB"/>. For more info see: <see cref="M:AndroidCtrl.ADB.Binary.ADB.Dispose(System.Boolean)"/> or <see cref="M:AndroidCtrl.ADB.Socket.ADB.Dispose"/>
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.ADBridge.IntegrityCheck">
            <summary>
             Checks if all needed files exists
            <para/>Checks for:
            <para/>adb.exe
            <para/>AdbWinApi.dll
            <para/>AdbWinUsbApi.dll
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.ADBridge.IntegrityVersionCheck">
            <summary>
             Checks if a possible running server has a mismatching version
            <para/>Test:
            <para/>adb start-server to check for outdated or mismatching server 
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.ADBridge.Manufacturer">
            <summary>
             Open "developer.android.com" in the default browser
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.ADBridge.Start">
            <summary>
             Start the ADB-Server
            </summary>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.ADBridge.Stop(System.Boolean)">
            <summary>
             Stop the ADB-Server
            </summary>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ADB.ADBridge.WaitForAnyDevice">
            <summary>
             Wait until a RANDOM device is connected
            <para/>*NOTE*
            <para/>This will freeze the current thread until a device is connected
            <para/>Put functions which need this kind of wait procedure in a separate thread.
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.ADBridge.WaitForAnyDevice(AndroidCtrl.ADB.Transport,AndroidCtrl.DeviceState)">
            <summary>
             Wait until a RANDOM device with the given trasport ID and state connects to adb
            <para/>This will freeze the current thread until a device is connected
            <para/>Put functions which need this kind of wait procedure in a separate thread.
            </summary>
            <param name="transport"><see cref="T:AndroidCtrl.ADB.Transport"/></param>
            <param name="state"><see cref="T:AndroidCtrl.DeviceState"/></param>
        </member>
        <member name="M:AndroidCtrl.ADB.ADBridge.WaitForAnyDevice(AndroidCtrl.ADB.Transport,AndroidCtrl.DeviceState,System.Threading.CancellationToken)">
            <summary>
             Wait until a RANDOM device with the given trasport ID and state connects to adb
            <para/>This will freeze the current thread until a device is connected
            <para/>Put functions which need this kind of wait procedure in a separate thread.
            </summary>
            <param name="transport"><see cref="T:AndroidCtrl.ADB.Transport"/></param>
            <param name="state"><see cref="T:AndroidCtrl.DeviceState"/></param>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/></param>
        </member>
        <member name="E:AndroidCtrl.ADB.ADBridge.Removed">
            <summary>
             This event will be raised if a device is removed from the instance dictionary
            </summary>
        </member>
        <member name="E:AndroidCtrl.ADB.ADBridge.Selected">
            <summary>
             This event will be raised if a device is selected
            </summary>
        </member>
        <member name="E:AndroidCtrl.ADB.ADBridge.Started">
            <summary>
             This event will be raised when the ADB-Server gets started
            </summary>
        </member>
        <member name="E:AndroidCtrl.ADB.ADBridge.Stopped">
            <summary>
             This event will be raised when the ADB-Server gets stopped
            </summary>
        </member>
        <member name="T:AndroidCtrl.IDeviceInfo">
            <summary>
             DeviceInfo interface
            </summary>
        </member>
        <member name="P:AndroidCtrl.IDeviceInfo.Device">
            <summary>
             (ADB) deviceid
            <para>*NOTE* Can be null</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.IDeviceInfo.IP">
            <summary>
             IP-Address
            <para>*NOTE* Can be null</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.IDeviceInfo.Mode">
            <summary>
             Device mode
            </summary>
        </member>
        <member name="P:AndroidCtrl.IDeviceInfo.Model">
            <summary>
             (ADB) model name
            <para>*NOTE* Can be null</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.IDeviceInfo.Port">
            <summary>
             Port
            <para>*NOTE* Can be null</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.IDeviceInfo.Product">
            <summary>
             (ADB) product name
            <para>*NOTE* Can be null</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.IDeviceInfo.Serial">
            <summary>
             (ADB/Fastboot) serialnumber
            </summary>
        </member>
        <member name="P:AndroidCtrl.IDeviceInfo.State">
            <summary>
             (ADB/Fastboot) state
            </summary>
        </member>
        <member name="P:AndroidCtrl.IDeviceInfo.TransportID">
            <summary>
             (ADB) transport ID
            </summary>
        </member>
        <member name="M:AndroidCtrl.Internal.Helper.FixLine(System.String)">
            <summary>
             Fix invalid sequence of CR-LF
            </summary>
            <param name="line"><see cref="T:System.String"/></param>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="T:AndroidCtrl.Internal.INotify">
            <summary>
             Base implementation of <see cref="T:System.ComponentModel.INotifyPropertyChanged"/>
            </summary>
        </member>
        <member name="E:AndroidCtrl.Internal.INotify.PropertyChanged">
            <summary>
             PropertyChanged event handler
            </summary>
        </member>
        <member name="M:AndroidCtrl.Internal.INotify.OnPropertyChanged(System.String)">
            <summary>
             Notify the UI for changes
            </summary>
        </member>
        <member name="M:AndroidCtrl.Internal.Extensions.GetInt16(System.Byte[],System.Int32)">
            <summary>
             Reads an <see cref="T:System.Int16"/> (2-bytes little-endian) from the given position
            </summary>
            <param name="b"><see cref="T:byte[]"/></param>
            <param name="pos"><see cref="T:System.Int32"/></param>
            <returns><see cref="T:System.Int16"/></returns>
        </member>
        <member name="M:AndroidCtrl.Internal.Extensions.GetInt32(System.Byte[],System.Int32)">
            <summary>
             Reads an <see cref="T:System.Int32"/> (4-bytes little-endian) from the given position
            </summary>
            <param name="b"><see cref="T:byte[]"/></param>
            <param name="pos"><see cref="T:System.Int32"/></param>
            <returns><see cref="T:System.Int32"/></returns>
        </member>
        <member name="M:AndroidCtrl.Internal.Extensions.GetInt64(System.Byte[],System.Int32)">
            <summary>
             Reads an <see cref="T:System.Int64"/> (8-bytes little-endian) from the given position
            </summary>
            <param name="b"><see cref="T:byte[]"/></param>
            <param name="pos"><see cref="T:System.Int32"/></param>
            <returns><see cref="T:System.Int64"/></returns>
        </member>
        <member name="M:AndroidCtrl.Internal.Extensions.GetUInt16(System.Byte[],System.Int32)">
            <summary>
             Reads an <see cref="T:System.UInt16"/> (2-bytes little-endian) from the given position
            </summary>
            <param name="b"><see cref="T:byte[]"/></param>
            <param name="pos"><see cref="T:System.Int32"/></param>
            <returns><see cref="T:System.UInt16"/></returns>
        </member>
        <member name="M:AndroidCtrl.Internal.Extensions.GetUInt32(System.Byte[],System.Int32)">
            <summary>
             Reads an <see cref="T:System.UInt32"/> (4-bytes little-endian) from the given position
            </summary>
            <param name="b"><see cref="T:byte[]"/></param>
            <param name="pos"><see cref="T:System.Int32"/></param>
            <returns><see cref="T:System.UInt32"/></returns>
        </member>
        <member name="M:AndroidCtrl.Internal.Extensions.GetUInt64(System.Byte[],System.Int32)">
            <summary>
             Reads an <see cref="T:System.UInt64"/> (8-bytes little-endian) from the given position
            </summary>
            <param name="b"><see cref="T:byte[]"/></param>
            <param name="pos"><see cref="T:System.Int32"/></param>
            <returns><see cref="T:System.UInt64"/></returns>
        </member>
        <member name="M:AndroidCtrl.Internal.Extensions.SetInt16(System.Byte[],System.Int16,System.Int32)">
            <summary>
             Writes an <see cref="T:System.Int16"/> (2-bytes little-endian) to the given position
            </summary>
            <param name="b"><see cref="T:byte[]"/></param>
            <param name="val"><see cref="T:System.Int16"/></param>
            <param name="pos"><see cref="T:System.Int32"/></param>
        </member>
        <member name="M:AndroidCtrl.Internal.Extensions.SetInt32(System.Byte[],System.Int32,System.Int32)">
            <summary>
             Writes an <see cref="T:System.Int32"/> (4-bytes little-endian) to the given position
            </summary>
            <param name="b"><see cref="T:byte[]"/></param>
            <param name="val"><see cref="T:System.Int32"/></param>
            <param name="pos"><see cref="T:System.Int32"/></param>
        </member>
        <member name="M:AndroidCtrl.Internal.Extensions.SetInt64(System.Byte[],System.Int64,System.Int32)">
            <summary>
             Writes an <see cref="T:System.Int64"/> (8-bytes little-endian) to the given position
            </summary>
            <param name="b"><see cref="T:byte[]"/></param>
            <param name="val"><see cref="T:System.Int64"/></param>
            <param name="pos"><see cref="T:System.Int32"/></param>
        </member>
        <member name="M:AndroidCtrl.Internal.Extensions.SetUInt16(System.Byte[],System.UInt16,System.Int32)">
            <summary>
             Writes an <see cref="T:System.UInt16"/> (2-bytes little-endian) to the given position
            </summary>
            <param name="b"><see cref="T:byte[]"/></param>
            <param name="val"><see cref="T:System.UInt16"/></param>
            <param name="pos"><see cref="T:System.Int32"/></param>
        </member>
        <member name="M:AndroidCtrl.Internal.Extensions.SetUInt32(System.Byte[],System.UInt32,System.Int32)">
            <summary>
             Writes an <see cref="T:System.UInt32"/> (4-bytes little-endian) to the given position
            </summary>
            <param name="b"><see cref="T:byte[]"/></param>
            <param name="val"><see cref="T:System.UInt32"/></param>
            <param name="pos"><see cref="T:System.Int32"/></param>
        </member>
        <member name="M:AndroidCtrl.Internal.Extensions.SetUInt64(System.Byte[],System.UInt64,System.Int32)">
            <summary>
             Writes an <see cref="T:System.UInt64"/> (8-bytes little-endian) to the given position
            </summary>
            <param name="b"><see cref="T:byte[]"/></param>
            <param name="val"><see cref="T:System.UInt64"/></param>
            <param name="pos"><see cref="T:System.Int32"/></param>
        </member>
        <member name="M:AndroidCtrl.Internal.Extensions.SetKeepAlive(System.Net.Sockets.Socket,System.Boolean,System.UInt32,System.UInt32)">
            <summary>
             Sets low-level keep-alive (TCP ONLY!)
            </summary>
            <param name="soc"><see cref="T:System.Net.Sockets.Socket"/></param>
            <param name="on"><see cref="T:System.Boolean"/></param>
            <param name="keepAliveTime"><see cref="T:System.UInt32"/></param>
            <param name="keepAliveInterval"><see cref="T:System.UInt32"/></param>
        </member>
        <member name="F:AndroidCtrl.Internal.RegEx.Group.ADB.devices_line">
            <summary>
             SERIAL, STATE, PRODUCT, MODEL, DEVICE, TRANSPORT_ID
            </summary>
        </member>
        <member name="F:AndroidCtrl.Internal.RegEx.Group.ADB.df">
            <summary>
             NAME, SIZE, USED, FREE, BLOCKSIZE, USE, PATH
            </summary>
        </member>
        <member name="F:AndroidCtrl.Internal.RegEx.Group.ADB.Dumpsys.Screen.focus">
            <summary>
             PACKAGE, ACTIVITY
            </summary>
        </member>
        <member name="F:AndroidCtrl.Internal.RegEx.Group.ADB.Dumpsys.Screen.on">
            <summary>
             STATE
            </summary>
        </member>
        <member name="F:AndroidCtrl.Internal.RegEx.Group.ADB.Dumpsys.Screen.restrictedScreen">
            <summary>
             WIDTH HEIGHT
            </summary>
        </member>
        <member name="F:AndroidCtrl.Internal.RegEx.Group.ADB.Dumpsys.Screen.unrestrictedScreen">
            <summary>
             WIDTH HEIGHT
            </summary>
        </member>
        <member name="F:AndroidCtrl.Internal.RegEx.Group.ADB.getprop">
            <summary>
             KEY, VALUE
            </summary>
        </member>
        <member name="F:AndroidCtrl.Internal.RegEx.Group.ADB.hash_file">
            <summary>
             HASH, NAME
            </summary>
        </member>
        <member name="F:AndroidCtrl.Internal.RegEx.Group.ADB.hres">
            <summary>
             HRES
            </summary>
        </member>
        <member name="F:AndroidCtrl.Internal.RegEx.Group.ADB.ls">
            <summary>
             INODE, TYPE, PERM, INCLUDES, OWNER, GROUP, ID, SIZE, DATE, TIME, NAME, SYMLINK, SUBTYPE
            </summary>
        </member>
        <member name="F:AndroidCtrl.Internal.RegEx.Group.ADB.Logcat.line">
            <summary>
             DATE, TIME, PID, TID, TYPE, NAME, INFO
            </summary>
        </member>
        <member name="F:AndroidCtrl.Internal.RegEx.Group.ADB.Logcat.longline">
            <summary>
             DATE, TIME, PID, TID, TYPE, NAME, INFO
            </summary>
        </member>
        <member name="F:AndroidCtrl.Internal.RegEx.Group.ADB.mount">
            <summary>
             NAME, PATH, TYPE, OPTS
            </summary>
        </member>
        <member name="T:AndroidCtrl.Internal.RegEx.Group.ADB.PackageManager">
            <summary>
             USER, PID, PPID, VSIZE, RSS, WCHAN, PC, NAME
            </summary>
        </member>
        <member name="F:AndroidCtrl.Internal.RegEx.Group.ADB.PackageManager.List.features_line">
            <summary>
             FEATURE
            </summary>
        </member>
        <member name="F:AndroidCtrl.Internal.RegEx.Group.ADB.PackageManager.List.instrumentation_line">
            <summary>
             PATH, ACTIVITY, PACKAGE
            </summary>
        </member>
        <member name="F:AndroidCtrl.Internal.RegEx.Group.ADB.PackageManager.List.libraries_line">
            <summary>
             PACKAGE
            </summary>
        </member>
        <member name="F:AndroidCtrl.Internal.RegEx.Group.ADB.PackageManager.List.packages_line">
            <summary>
             PATH, PACKAGE
            </summary>
        </member>
        <member name="F:AndroidCtrl.Internal.RegEx.Group.ADB.PackageManager.List.permission_group_line">
            <summary>
             GROUP
            </summary>
        </member>
        <member name="F:AndroidCtrl.Internal.RegEx.Group.ADB.PackageManager.List.permissions">
            <summary>
             PERMISSION, PACKAGE, LABEL, DESCRIPTION, PROTECTIONLEVEL
            </summary>
        </member>
        <member name="F:AndroidCtrl.Internal.RegEx.Group.ADB.PackageManager.path">
            <summary>
             PATH
            </summary>
        </member>
        <member name="F:AndroidCtrl.Internal.RegEx.Group.ADB.SQLite3.version">
            <summary>
             VERSION, DATE, TIME, CHECKSUM
            </summary>
        </member>
        <member name="F:AndroidCtrl.Internal.RegEx.Group.ADB.uptime">
            <summary>
             UP_D, UP_T, IDLE_D, IDLE_T, SLEEP_D, SLEEP_T, USERS, LOAD
            </summary>
        </member>
        <member name="F:AndroidCtrl.Internal.RegEx.Group.Fastboot.version">
            <summary>
             VERSION
            </summary>
        </member>
        <member name="T:AndroidCtrl.IMonitor">
            <summary>
             IMonitor interface
            </summary>
        </member>
        <member name="P:AndroidCtrl.IMonitor.Interval">
            <summary>
             Time to wait between checks
            <para/>*NOTE*
            <para/>Default are 10000 ms = 10 sec
            </summary>
        </member>
        <member name="P:AndroidCtrl.IMonitor.IsStarted">
            <summary>
             Check if the monitor is running
            </summary>
            <returns>if monitor is running return is true else false</returns>
        </member>
        <member name="M:AndroidCtrl.IMonitor.ForceScan">
            <summary>
             Force the monitor to scan for new devices
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.IMonitor.ForceScan(System.Boolean)">
            <summary>
             Force the monitor to scan for new devices
            </summary>
            <param name="resetCache"><see cref="T:System.Boolean"/></param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.IMonitor.Start">
            <summary>
             Starts a thread which checks every 10 sec for connected devices
            </summary>
            <returns>true if start successfull else false</returns>
        </member>
        <member name="M:AndroidCtrl.IMonitor.Stop(System.Boolean)">
            <summary>
             Stops the Monitor Thread.
            </summary>
            <param name="resetEvents">If true the notify-events will be set to null. In this case u have to set all defined callbacks again!</param>
            <returns>true if stop successfull else false</returns>
        </member>
        <member name="E:AndroidCtrl.IMonitor.Added">
            <summary>
             This event will be raised if a new device is detected
            </summary>
        </member>
        <member name="E:AndroidCtrl.IMonitor.Changed">
            <summary>
             This event will be raised if some changes on a specific device are detected
            <para/>*NOTE* This callback will be raised if the device "state" has been changed e.g. from device to recovery
            </summary>
        </member>
        <member name="E:AndroidCtrl.IMonitor.Removed">
            <summary>
             This event will be raised if a device is not longer detected
            </summary>
        </member>
        <member name="E:AndroidCtrl.IMonitor.Started">
            <summary>
             This event will be raised when the monitor gets started
            </summary>
        </member>
        <member name="E:AndroidCtrl.IMonitor.Stopped">
            <summary>
             This event will be raised when the monitor gets stopped
            </summary>
        </member>
        <member name="T:AndroidCtrl.Fastboot.Backdoor">
            <summary>
             Backdoor is the general class for Fastboot oem backdoor commands.
            </summary>
        </member>
        <member name="M:AndroidCtrl.Fastboot.Backdoor.Xecute(System.String)">
            <summary>
             Execute the oem backdoor commands
            </summary>
            <param name="cmd">Command to execute</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.Fastboot.Backdoor.End">
            <summary>
             end
            </summary>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.Fastboot.Backdoor.Get(System.String)">
            <summary>
             get
            <para/>*NOTE* the value ist not auto-quoted
            </summary>
            <param name="val">value to request</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.Fastboot.Backdoor.Info">
            <summary>
             info
            </summary>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="T:AndroidCtrl.Fastboot.Partition">
            <summary>
             Device partitions
            </summary>
        </member>
        <member name="F:AndroidCtrl.Fastboot.Partition.BOOT">
            <summary>
             boot
            </summary>
        </member>
        <member name="F:AndroidCtrl.Fastboot.Partition.BOOTLOADER">
            <summary>
             bootloader
            </summary>
        </member>
        <member name="F:AndroidCtrl.Fastboot.Partition.CACHE">
            <summary>
             cache
            </summary>
        </member>
        <member name="F:AndroidCtrl.Fastboot.Partition.CUST">
            <summary>
             cache
            </summary>
        </member>
        <member name="F:AndroidCtrl.Fastboot.Partition.DATA">
            <summary>
             data
            </summary>
        </member>
        <member name="F:AndroidCtrl.Fastboot.Partition.HBOOT">
            <summary>
             hboot
            </summary>
        </member>
        <member name="F:AndroidCtrl.Fastboot.Partition.KERNEL">
            <summary>
             kernel
            </summary>
        </member>
        <member name="F:AndroidCtrl.Fastboot.Partition.MISC">
            <summary>
             misc
            </summary>
        </member>
        <member name="F:AndroidCtrl.Fastboot.Partition.RADIO">
            <summary>
             radio
            </summary>
        </member>
        <member name="F:AndroidCtrl.Fastboot.Partition.RAMDISK">
            <summary>
             ramdisk
            </summary>
        </member>
        <member name="F:AndroidCtrl.Fastboot.Partition.RECOVERY">
            <summary>
             recovery
            </summary>
        </member>
        <member name="F:AndroidCtrl.Fastboot.Partition.RECOVERY_RAMDISK">
            <summary>
             recovery ramdisk
            </summary>
        </member>
        <member name="F:AndroidCtrl.Fastboot.Partition.SDCARD">
            <summary>
             sdcard
            </summary>
        </member>
        <member name="F:AndroidCtrl.Fastboot.Partition.SYSTEM">
            <summary>
             system
            </summary>
        </member>
        <member name="F:AndroidCtrl.Fastboot.Partition.UNLOCKTOKEN">
            <summary>
             unlocktoken
            </summary>
        </member>
        <member name="F:AndroidCtrl.Fastboot.Partition.USERDATA">
            <summary>
             userdata
            </summary>
        </member>
        <member name="F:AndroidCtrl.Fastboot.Partition.VENDOR">
            <summary>
             vendor
            </summary>
        </member>
        <member name="F:AndroidCtrl.Fastboot.Partition.ZIP">
            <summary>
             a zip file to install
            </summary>
        </member>
        <member name="T:AndroidCtrl.Fastboot.FlashingMode">
            <summary>
             Flashing IDs
            </summary>
        </member>
        <member name="F:AndroidCtrl.Fastboot.FlashingMode.GET_UNLOCK_ABILITY">
            <summary>
             get_unlock_ability
            </summary>
        </member>
        <member name="F:AndroidCtrl.Fastboot.FlashingMode.GET_UNLOCK_BOOTLOADER_NONCE">
            <summary>
             get_unlock_bootloader_nonce
            </summary>
        </member>
        <member name="F:AndroidCtrl.Fastboot.FlashingMode.LOCK">
            <summary>
             lock
            </summary>
        </member>
        <member name="F:AndroidCtrl.Fastboot.FlashingMode.LOCK_BOOTLOADER">
            <summary>
             lock_bootloader
            </summary>
        </member>
        <member name="F:AndroidCtrl.Fastboot.FlashingMode.LOCK_CRITICAL">
            <summary>
             lock_critical
            </summary>
        </member>
        <member name="F:AndroidCtrl.Fastboot.FlashingMode.UNLOCK">
            <summary>
             unlock
            </summary>
        </member>
        <member name="F:AndroidCtrl.Fastboot.FlashingMode.UNLOCK_CRITICAL">
            <summary>
             unlock_critical
            </summary>
        </member>
        <member name="T:AndroidCtrl.Fastboot.Fastboot">
            <summary>
             .NET 4.x (Thread-Safe) wrapper class, to interact with an Android device via Fastboot.
            <para/>*NOTE*
            <para/>ALL local and remote paths, special variables, etc. will be set in quotes ("), so there is no need to quote anything.
            <para/>Exceptions are nested commands, these u have to quote ur self.
            </summary>
        </member>
        <member name="M:AndroidCtrl.Fastboot.Fastboot.Instance(System.String)">
            <summary>
             Returns and if not exist creates, the choosen Fastboot device instance
            <para/>*NOTE*
            <para/>This is the basic interactor in this class, via this var u MUST get/create every device instance.
            <para/>Via device u can get/create the device specific instance. If device is empty, the return is ever the class selected device.
            </summary>
            <param name="device">The device id/serialnumber or empty</param>
            <returns><see cref="T:AndroidCtrl.Fastboot.Fastboot"/></returns>
        </member>
        <member name="M:AndroidCtrl.Fastboot.Fastboot.Instance(AndroidCtrl.IDeviceInfo)">
            <summary>
             Returns and if not exist creates, the choosen Fastboot device instance
            <para/>*NOTE*
            <para/>This is the basic interactor in this class, via this var u MUST get/create every device instance.
            <para/>Via device u can get/create the device specific instance. If device is null, the return is ever the class selected device.
            </summary>
            <param name="device"><see cref="T:AndroidCtrl.IDeviceInfo"/></param>
            <returns><see cref="T:AndroidCtrl.Fastboot.Fastboot"/></returns>
        </member>
        <member name="M:AndroidCtrl.Fastboot.Fastboot.Remove(System.String)">
            <summary>
             Remove the given device from the instance dictionary.
            </summary>
            <param name="device">Device ID</param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.Fastboot.Fastboot.Remove(AndroidCtrl.IDeviceInfo)">
            <summary>
             Remove the given device from the instance dictionary.
            </summary>
            <param name="device"><see cref="T:AndroidCtrl.IDeviceInfo"/></param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.Fastboot.Fastboot.Select(System.String)">
            <summary>
             Select the given device serial in the static class var.
            <para/>*NOTE*
            <para/>U can reach the selected device instance from everywhere in ur code via Fastboot.Instance().
            </summary>
            <param name="device">Device ID</param>
        </member>
        <member name="M:AndroidCtrl.Fastboot.Fastboot.Select(AndroidCtrl.IDeviceInfo)">
            <summary>
             Select the given device in the static class var.
            <para/>*NOTE*
            <para/>U can reach the selected device instance from everywhere in ur code via Fastboot.Instance().
            </summary>
            <param name="device"><see cref="T:AndroidCtrl.IDeviceInfo"/></param>
        </member>
        <member name="M:AndroidCtrl.Fastboot.Fastboot.Update(AndroidCtrl.IDeviceInfo)">
            <summary>
             Updates an existing instance of the given device object.
            <para/>*NOTE*
            <para/>Currently only the State gets updated.
            </summary>
            <param name="device"><see cref="T:AndroidCtrl.IDeviceInfo"/></param>
        </member>
        <member name="P:AndroidCtrl.Fastboot.Fastboot.Monitor">
            <summary>
             Returns and if not exist, creates the Monitor instance
            </summary>
        </member>
        <member name="P:AndroidCtrl.Fastboot.Fastboot.IsStarted">
            <summary>
             Check if Fastboot process is running
            </summary>
        </member>
        <member name="P:AndroidCtrl.Fastboot.Fastboot.PATH_EXE">
            <summary>
             Get/Set the full exe path
            </summary>
        </member>
        <member name="P:AndroidCtrl.Fastboot.Fastboot.Version">
            <summary>
             Get Fastboot version
            </summary>
        </member>
        <member name="M:AndroidCtrl.Fastboot.Fastboot.Devices">
            <summary>
             List all connected Devices
            </summary>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.Fastboot.Fastboot.Dispose(System.Boolean)">
            <summary>
             This is not a real IDisposable but it will act like one
            <para/>It will reset the whole Fastboot class to null, everything in this class will be deleted, stopped, closed, etc...
            </summary>
        </member>
        <member name="M:AndroidCtrl.Fastboot.Fastboot.ForceStop">
            <summary>
             Force Stop (kills the fastboot.exe process)
            </summary>
        </member>
        <member name="M:AndroidCtrl.Fastboot.Fastboot.IntegrityCheck">
            <summary>
             Checks if all needed files exists
            <para/>Checks for:
            <para/>fastboot.exe
            <para/>AdbWinApi.dll
            <para/>AdbWinUsbApi.dll
            <para/>libwinpthread-1.dll
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.Fastboot.Fastboot.Manufacturer">
            <summary>
             Open "developer.android.com" in the default browser
            </summary>
        </member>
        <member name="M:AndroidCtrl.Fastboot.Fastboot.Xecute(System.String,System.String,AndroidCtrl.ProcessModels.ProcessResponseEventHandler,System.Int32)">
            <summary>
             Execute the given command on the defined device
            </summary>
            <param name="cmd">Command to execute</param>
            <param name="deviceSerial">device serialnumber</param>
            <param name="responseEventHandler">Defines the callback to raise for any output/error response during the operation.</param>
            <param name="timeout">Defines the time in ms Xecute will wait before it closes the process, -1 implies infinite.</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="E:AndroidCtrl.Fastboot.Fastboot.Removed">
            <summary>
             This event will be raised if a device is removed from the instance dictionary
            </summary>
        </member>
        <member name="E:AndroidCtrl.Fastboot.Fastboot.Selected">
            <summary>
             This event will be raised if a device is selected
            </summary>
        </member>
        <member name="P:AndroidCtrl.Fastboot.Fastboot.CmdTimeout">
            <summary>
             CmdTimeout define for the whole instance how long Xecute() will wait for the given process to responde.
            <para/>*NOTE*
            <para/>Instance default is "-1", it implies infinite
            <para/>The value are milliseconds 30 sec = 30 000 ms
            </summary>
        </member>
        <member name="P:AndroidCtrl.Fastboot.Fastboot.DeviceID">
            <summary>
             DeviceID return the DeviceID for this class instance
            </summary>
        </member>
        <member name="P:AndroidCtrl.Fastboot.Fastboot.DeviceState">
            <summary>
             Return the last known device state e.g. FASTBOOT/UNKNOWN/OFFLINE etc.
            </summary>
        </member>
        <member name="P:AndroidCtrl.Fastboot.Fastboot.OEM">
            <summary>
             Returns and if not exist, creates the OEM instance
            </summary>
        </member>
        <member name="P:AndroidCtrl.Fastboot.Fastboot.Wipe">
            <summary>
             Returns and if not exist, creates the Wipe instance
            </summary>
        </member>
        <member name="M:AndroidCtrl.Fastboot.Fastboot.Boot(System.String,System.String)">
            <summary>
             Boot the given image
            </summary>
            <param name="kernelPath">Kernel image path</param>
            <param name="ramdiskPath">Ramdisk image/zimage path</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.Fastboot.Fastboot.Continue">
            <summary>
             Continue with autoboot
            </summary>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.Fastboot.Fastboot.Erase(System.String)">
            <summary>
             Erase the given partition
            </summary>
            <param name="partition">partition to erase</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.Fastboot.Fastboot.Erase(AndroidCtrl.Fastboot.Partition)">
            <summary>
             Erase the given partition
            </summary>
            <param name="partition"><see cref="T:AndroidCtrl.Fastboot.Partition"/></param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.Fastboot.Fastboot.Execute(System.String,System.Int32)">
            <summary>
             Execute a custom command
            <para/>*NOTE*
            <para/>timeOut = -1 implies infinite
            </summary>
            <param name="cmd">Command to run</param>
            <param name="timeout">time the process will wait for output, -1 implies infinite, 0 implies class internal timeout</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.Fastboot.Fastboot.Execute(System.String,AndroidCtrl.ProcessModels.ProcessResponseEventHandler,System.Int32)">
            <summary>
             Execute a custom command
            <para/>*NOTE*
            <para/>timeOut = -1 implies infinite
            </summary>
            <param name="cmd">Command to run</param>
            <param name="responseEventHandler">Defines the callback to raise for any output/error response during the operation.</param>
            <param name="timeout">time the process will wait for output, -1 implies infinite, 0 implies class internal timeout</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.Fastboot.Fastboot.Flash(System.String,System.String)">
            <summary>
             Write an file to an flash partition
            </summary>
            <param name="partition">partition to flash</param>
            <param name="localPath">File path</param>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.Fastboot.Fastboot.Flash(AndroidCtrl.Fastboot.Partition,System.String)">
            <summary>
             Write an file to an flash partition
            </summary>
            <param name="partition"><see cref="T:AndroidCtrl.Fastboot.Partition"/></param>
            <param name="localPath">File path</param>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.Fastboot.Fastboot.Flashing(AndroidCtrl.Fastboot.FlashingMode)">
            <summary>
             Sets the flashing mode
            </summary>
            <param name="mode"><see cref="T:AndroidCtrl.Fastboot.FlashingMode"/></param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.Fastboot.Fastboot.Format(System.String)">
            <summary>
             Format the given partition
            </summary>
            <param name="partition">partition to format</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.Fastboot.Fastboot.Format(AndroidCtrl.Fastboot.Partition)">
            <summary>
             Format the given partition
            </summary>
            <param name="partition"><see cref="T:AndroidCtrl.Fastboot.Partition"/></param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.Fastboot.Fastboot.GetVar(System.String)">
            <summary>
             Get given bootloader variable
            </summary>
            <param name="var">Variable to get</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.Fastboot.Fastboot.Reboot(AndroidCtrl.BootMode)">
            <summary>
             Reboot Device
            </summary>
            <param name="mode">BootMode</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.Fastboot.Fastboot.Update(System.String)">
            <summary>
             Reflash Device from Update.zip
            </summary>
            <param name="localPath">File path</param>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="T:AndroidCtrl.Fastboot.Monitor">
            <summary>
             Manage the Fastboot-Device-Monitor
            <para/>This object implements <see cref="T:AndroidCtrl.IMonitor"/>
            </summary>
        </member>
        <member name="P:AndroidCtrl.Fastboot.Monitor.Interval">
            <summary>
             Time to wait between checks
            <para/>*NOTE*
            <para/>Default are 10000 ms = 10 sec
            </summary>
        </member>
        <member name="P:AndroidCtrl.Fastboot.Monitor.IsStarted">
            <summary>
             Check if the monitor is running
            </summary>
        </member>
        <member name="M:AndroidCtrl.Fastboot.Monitor.ForceScan">
            <summary>
             Force the monitor to scan for new devices
            </summary>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.Fastboot.Monitor.ForceScan(System.Boolean)">
            <summary>
             Force the monitor to scan for new devices
            </summary>
            <param name="resetCache"><see cref="T:System.Boolean"/></param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.Fastboot.Monitor.Start">
            <summary>
             Starts a thread which checks every <see cref="P:AndroidCtrl.Fastboot.Monitor.Interval"/> sec for changes
            </summary>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.Fastboot.Monitor.Stop(System.Boolean)">
            <summary>
             Stops the Monitor Thread.
            </summary>
            <param name="resetEvents">If true the notify-events will be set to null. In this case u have to set all defined callbacks again!</param>
            <returns>true if stop successfull else false</returns>
        </member>
        <member name="E:AndroidCtrl.Fastboot.Monitor.Added">
            <summary>
             This event will be raised if a new device is detected
            </summary>
        </member>
        <member name="E:AndroidCtrl.Fastboot.Monitor.Changed">
            <summary>
             This event will be raised if some changes on a specific device are detected
            <para/>*NOTE* This callback will be raised if the device "state" has been changed e.g. from device to recovery
            </summary>
        </member>
        <member name="E:AndroidCtrl.Fastboot.Monitor.Removed">
            <summary>
             This event will be raised if a device is not longer detected
            </summary>
        </member>
        <member name="E:AndroidCtrl.Fastboot.Monitor.Started">
            <summary>
             This event will be raised when the monitor gets started
            </summary>
        </member>
        <member name="E:AndroidCtrl.Fastboot.Monitor.Stopped">
            <summary>
             This event will be raised when the monitor gets stopped
            </summary>
        </member>
        <member name="T:AndroidCtrl.Fastboot.Wipe">
            <summary>
             This class give u access to some predefined wipe methods
            </summary>
        </member>
        <member name="M:AndroidCtrl.Fastboot.Wipe.All(System.Boolean)">
            <summary>
             Erase and format the cache, data and system partition
            </summary>
            <param name="erase">Erase each partition before it format each partition</param>
        </member>
        <member name="M:AndroidCtrl.Fastboot.Wipe.Cache(System.Boolean)">
            <summary>
             Erase and format the cache partition
            </summary>
            <param name="erase">Erase the partition before it format the partition</param>
        </member>
        <member name="M:AndroidCtrl.Fastboot.Wipe.Data(System.Boolean)">
            <summary>
             Erase and format the data partition
            </summary>
            <param name="erase">Erase the partition before it format the partition</param>
        </member>
        <member name="M:AndroidCtrl.Fastboot.Wipe.System(System.Boolean)">
            <summary>
             Erase and format the system partition
            </summary>
            <param name="erase">Erase the partition before it format the partition</param>
        </member>
        <member name="T:AndroidCtrl.Fastboot.OEM">
            <summary>
             OEM is the general class for Fastboot oem commands.
            </summary>
        </member>
        <member name="M:AndroidCtrl.Fastboot.OEM.Xecute(System.String)">
            <summary>
             Execute the oem commands
            </summary>
            <param name="cmd">Command to execute</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.Fastboot.OEM.BattCheck">
            <summary>
             battcheck
            </summary>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.Fastboot.OEM.CheckRootInfo">
            <summary>
             check-rootinfo
            </summary>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.Fastboot.OEM.DeviceInfo">
            <summary>
             device-info (Get the device info)
            </summary>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.Fastboot.OEM.GetBatteryPresentCheck">
            <summary>
             Battery voltage like "4354mv"
            </summary>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.Fastboot.OEM.GetBootFailVer">
            <summary>
             get_bootFail_ver like "Boot_Ver1.1"
            </summary>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.Fastboot.OEM.GetBootInfo">
            <summary>
             get-bootinfo (Get the bootloader state, locked/unlocked)
            </summary>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.Fastboot.OEM.GetIdentifierToken">
            <summary>
             Get_identifier_token (Get the bootloader identifier_token to unlock ur bootloader, for example by HTC)
            </summary>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.Fastboot.OEM.GetLockState">
            <summary>
             get-lockstate (Get the bootloader state, locked/unlocked)
            </summary>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.Fastboot.OEM.GetProductModel">
            <summary>
             get-product-model (Get the product model)
            </summary>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.Fastboot.OEM.GetPSID">
            <summary>
             get-psid (Get the serial, imei(s))
            </summary>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.Fastboot.OEM.GoToFastboot">
            <summary>
             GoToFastboot
            </summary>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.Fastboot.OEM.GoToHBoot">
            <summary>
             GoToHBoot
            </summary>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.Fastboot.OEM.Lock">
            <summary>
             Lock (Lock, relock the bootloader)
            </summary>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.Fastboot.OEM.PowerDown">
            <summary>
             PowerDown
            </summary>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.Fastboot.OEM.PowerOff">
            <summary>
             PowerOff
            </summary>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.Fastboot.OEM.PowerOn">
            <summary>
             PowerOn
            </summary>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.Fastboot.OEM.PowerTest">
            <summary>
             PowerTest
            </summary>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.Fastboot.OEM.RamTest">
            <summary>
             RamTest
            </summary>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.Fastboot.OEM.ReadCid">
            <summary>
             Readcid (Read the CID)
            </summary>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.Fastboot.OEM.ReadIMEI">
            <summary>
             Readimei (Read the imei)
            </summary>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.Fastboot.OEM.ReadSecureFlag">
            <summary>
             Readsecureflag (Read the secureflag)
            </summary>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.Fastboot.OEM.RebootRUU">
            <summary>
             RebootRUU
            </summary>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.Fastboot.OEM.Relock(System.String)">
            <summary>
             Relock (relocks the bootloder with the given relock-code)
            </summary>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.Fastboot.OEM.SysInfo">
            <summary>
             SysInfo
            </summary>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.Fastboot.OEM.Unlock(System.String)">
            <summary>
             Unlock (unlocks the bootloder with the given unlock-code)
            </summary>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.Fastboot.OEM.VibrateTest">
            <summary>
             VibrateTest
            </summary>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.Fastboot.OEM.WriteCid(System.String)">
            <summary>
             Writecid (Set a new (given) CID)
            </summary>
            <param name="cid">CID to set</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.Fastboot.OEM.WriteIMEI(System.String)">
            <summary>
             Writeimei (Set a new imei)
            </summary>
            <param name="imei">IMEI to set</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.Fastboot.OEM.WriteMid(System.String)">
            <summary>
             WriteMid (Set a new (given) MID)
            </summary>
            <param name="mid">MID to set</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.Fastboot.OEM.WriteProtTest">
            <summary>
             WriteProtTest
            </summary>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.Fastboot.OEM.WriteSecureFlag(System.String)">
            <summary>
             Writesecureflag (Set the secureflag) 3 = S-On
            </summary>
            <param name="flag">Flag to set</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="P:AndroidCtrl.Fastboot.OEM.Backdoor">
            <summary>
             Returns the Backdoor instance
            </summary>
        </member>
        <member name="T:AndroidCtrl.ProcessModels.ProcessResponseEventHandler">
            <summary>
             This event will be raised if u have set an callback to any realtime process
            </summary>
            <param name="sender">error/output <see cref="T:System.String"/></param>
            <param name="e"><see cref="T:AndroidCtrl.ProcessModels.ProcessResponseEventArgs"/></param>
        </member>
        <member name="T:AndroidCtrl.ProcessModels.ProcessResponseEventArgs">
            <summary>
             ProcessResponseEventArgs
            </summary>
        </member>
        <member name="P:AndroidCtrl.ProcessModels.ProcessResponseEventArgs.Data">
            <summary>
             Response data
            </summary>
        </member>
        <member name="P:AndroidCtrl.ProcessModels.ProcessResponseEventArgs.PID">
            <summary>
             process ID
            </summary>
        </member>
        <member name="M:AndroidCtrl.ProcessModels.ProcessResponseEventArgs.#ctor(System.Int32,System.String)">
            <summary>
             ProcessResponseEventArgs
            </summary>
            <param name="pid">process or ADBSocket channel ID <see cref="T:System.Int32"/></param>
            <param name="data">process response <see cref="T:System.String"/></param>
        </member>
        <member name="T:AndroidCtrl.ProcessModels.IRealTimeBG">
            <summary>
             Real time process model interface
            </summary>
        </member>
        <member name="P:AndroidCtrl.ProcessModels.IRealTimeBG.ID">
            <summary>
             Process ID
            </summary>
        </member>
        <member name="P:AndroidCtrl.ProcessModels.IRealTimeBG.IsAlive">
            <summary>
             Checks if the process is running
            </summary>
        </member>
        <member name="P:AndroidCtrl.ProcessModels.IRealTimeBG.StartInfo">
            <summary>
             Get/Set the start options
            <para/>*NOTE*
            <para/>Only set able if the process is not running
            </summary>
        </member>
        <member name="M:AndroidCtrl.ProcessModels.IRealTimeBG.Close">
            <summary>
             Frees all used resources
            </summary>
        </member>
        <member name="M:AndroidCtrl.ProcessModels.IRealTimeBG.Kill">
            <summary>
             Stops the underlying process immediately
            </summary>
        </member>
        <member name="M:AndroidCtrl.ProcessModels.IRealTimeBG.Start">
            <summary>
             Start the process and its background thread
            </summary>
        </member>
        <member name="M:AndroidCtrl.ProcessModels.IRealTimeBG.WaitForExit">
            <summary>
             Waits until the process is done
            </summary>
        </member>
        <member name="M:AndroidCtrl.ProcessModels.IRealTimeBG.WaitForExit(System.Int32)">
            <summary>
             Waits X milliseconds for output before the process will be closed
            </summary>
            <param name="milliseconds">timeout to wait in milliseconds</param>
        </member>
        <member name="M:AndroidCtrl.ProcessModels.IRealTimeBG.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
             Send the given bytes the running process (don't forget the line termination "\r\n")
            </summary>
            <param name="buffer">bytes to send</param>
            <param name="offset">offset</param>
            <param name="length">length</param>
        </member>
        <member name="M:AndroidCtrl.ProcessModels.IRealTimeBG.WriteLine(System.String)">
            <summary>
             Send the given command the running process
            </summary>
            <param name="cmd">command to send</param>
        </member>
        <member name="E:AndroidCtrl.ProcessModels.IRealTimeBG.ErrorEventHandler">
            <summary>
             This event will be raised if any error appear
            </summary>
        </member>
        <member name="E:AndroidCtrl.ProcessModels.IRealTimeBG.OutputEventHandler">
            <summary>
             This event will be raised if any output appear
            </summary>
        </member>
        <member name="T:AndroidCtrl.ProcessModels.RealTimeBGExe">
            <summary>
             Give u a full working realtime background process with input ability, u can also define a callback function which will be raised if any error-/outputdata arrived.
            <para/>*NOTE*
            <para/>This object is not reusable, if the process is terminated, u need to start with a new instance.
            <para/>This object implements <see cref="T:AndroidCtrl.ProcessModels.IRealTimeBG"/>
            </summary>
        </member>
        <member name="M:AndroidCtrl.ProcessModels.RealTimeBGExe.#ctor(System.Diagnostics.ProcessStartInfo)">
            <summary>
             Creates a new realtime background process
            </summary>
            <param name="startInfo"><see cref="T:System.Diagnostics.ProcessStartInfo"/></param>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:AndroidCtrl.ProcessModels.RealTimeBGExe.#ctor(System.String,System.String)">
            <summary>
             Creates a new realtime background process with input ability
            </summary>
            <param name="binary">Executable (c:\path\to\adb.exe)</param>
            <param name="args">Process arguments (shell)</param>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.FileNotFoundException"/>
        </member>
        <member name="M:AndroidCtrl.ProcessModels.RealTimeBGExe.Dispose">
            <summary>
             IDispose
            </summary>
        </member>
        <member name="M:AndroidCtrl.ProcessModels.RealTimeBGExe.Dispose(System.Boolean)">
            <summary>
             IDispose
            </summary>
        </member>
        <member name="P:AndroidCtrl.ProcessModels.RealTimeBGExe.ID">
            <summary>
             Process ID
            </summary>
        </member>
        <member name="P:AndroidCtrl.ProcessModels.RealTimeBGExe.IsAlive">
            <summary>
             Checks if the process is running
            </summary>
        </member>
        <member name="P:AndroidCtrl.ProcessModels.RealTimeBGExe.StartInfo">
            <summary>
             Get/Set the start options
            <para/>*NOTE*
            <para/>Only set able if the process is not running
            </summary>
        </member>
        <member name="M:AndroidCtrl.ProcessModels.RealTimeBGExe.Close">
            <summary>
             Frees all used resources
            </summary>
        </member>
        <member name="M:AndroidCtrl.ProcessModels.RealTimeBGExe.Kill">
            <summary>
             Stops the underlying process immediately
            </summary>
        </member>
        <member name="M:AndroidCtrl.ProcessModels.RealTimeBGExe.Start">
            <summary>
             Start the process and its background thread
            </summary>
        </member>
        <member name="M:AndroidCtrl.ProcessModels.RealTimeBGExe.WaitForExit">
            <summary>
             Waits until the process is done
            </summary>
        </member>
        <member name="M:AndroidCtrl.ProcessModels.RealTimeBGExe.WaitForExit(System.Int32)">
            <summary>
             Waits X milliseconds for output before the process will be closed
            </summary>
            <param name="milliseconds">timeout to wait in milliseconds</param>
        </member>
        <member name="M:AndroidCtrl.ProcessModels.RealTimeBGExe.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
             NOT-Implemented
            </summary>
            <param name="buffer">bytes to send</param>
            <param name="offset">offset</param>
            <param name="length">length</param>
        </member>
        <member name="M:AndroidCtrl.ProcessModels.RealTimeBGExe.WriteLine(System.String)">
            <summary>
             Send the given command the running process (encoding is UTF8 -> default)
            </summary>
            <param name="cmd">command to send</param>
        </member>
        <member name="E:AndroidCtrl.ProcessModels.RealTimeBGExe.ErrorEventHandler">
            <summary>
             This event will be raised if any error appear
            </summary>
        </member>
        <member name="E:AndroidCtrl.ProcessModels.RealTimeBGExe.OutputEventHandler">
            <summary>
             This event will be raised if any output appear
            </summary>
        </member>
        <member name="T:AndroidCtrl.ProcessModels.RealTimeBGExeV2">
            <summary>
             Give u a full working realtime background process with input ability, u can also define a callback function which will be raised if any error-/outputdata arrived.
            <para/>*NOTE*
            <para/>This object is not reusable, if the process is terminated, u need to start with a new instance.
            <para/>This object implements <see cref="T:AndroidCtrl.ProcessModels.IRealTimeBG"/>
            </summary>
        </member>
        <member name="M:AndroidCtrl.ProcessModels.RealTimeBGExeV2.#ctor(System.Diagnostics.ProcessStartInfo)">
            <summary>
             Creates a new realtime background process
            </summary>
            <param name="startInfo"><see cref="T:System.Diagnostics.ProcessStartInfo"/></param>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:AndroidCtrl.ProcessModels.RealTimeBGExeV2.#ctor(System.String,System.String)">
            <summary>
             Creates a new realtime background process with input ability
            </summary>
            <param name="binary">Executable (c:\path\to\adb.exe)</param>
            <param name="args">Process arguments (shell)</param>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.FileNotFoundException"/>
        </member>
        <member name="M:AndroidCtrl.ProcessModels.RealTimeBGExeV2.Dispose">
            <summary>
             IDispose
            </summary>
        </member>
        <member name="M:AndroidCtrl.ProcessModels.RealTimeBGExeV2.Dispose(System.Boolean)">
            <summary>
             IDispose
            </summary>
        </member>
        <member name="P:AndroidCtrl.ProcessModels.RealTimeBGExeV2.ID">
            <summary>
             Process ID
            </summary>
        </member>
        <member name="P:AndroidCtrl.ProcessModels.RealTimeBGExeV2.IsAlive">
            <summary>
             Checks if the process is running
            </summary>
        </member>
        <member name="P:AndroidCtrl.ProcessModels.RealTimeBGExeV2.StartInfo">
            <summary>
             Get/Set the start options
            <para/>*NOTE*
            <para/>Only set able if the process is not running
            </summary>
        </member>
        <member name="M:AndroidCtrl.ProcessModels.RealTimeBGExeV2.Close">
            <summary>
             Frees all used resources
            </summary>
        </member>
        <member name="M:AndroidCtrl.ProcessModels.RealTimeBGExeV2.Kill">
            <summary>
             Stops the underlying process immediately
            </summary>
        </member>
        <member name="M:AndroidCtrl.ProcessModels.RealTimeBGExeV2.Start">
            <summary>
             Start the process and its background thread
            </summary>
        </member>
        <member name="M:AndroidCtrl.ProcessModels.RealTimeBGExeV2.WaitForExit">
            <summary>
             Waits until the process is done
            </summary>
        </member>
        <member name="M:AndroidCtrl.ProcessModels.RealTimeBGExeV2.WaitForExit(System.Int32)">
            <summary>
             Waits X milliseconds for output before the process will be closed
            </summary>
            <param name="milliseconds">timeout to wait in milliseconds</param>
        </member>
        <member name="M:AndroidCtrl.ProcessModels.RealTimeBGExeV2.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
             Send the given bytes the running process (don't forget the line termination CR-LF "0x0D 0x0A")
            </summary>
            <param name="buffer">bytes to send</param>
            <param name="offset">offset</param>
            <param name="length">length</param>
        </member>
        <member name="M:AndroidCtrl.ProcessModels.RealTimeBGExeV2.WriteLine(System.String)">
            <summary>
             Send the given command the running process (encoding is UTF-8)
            </summary>
            <param name="cmd">command to send</param>
        </member>
        <member name="E:AndroidCtrl.ProcessModels.RealTimeBGExeV2.ErrorEventHandler">
            <summary>
             This event will be raised if any error appear
            </summary>
        </member>
        <member name="E:AndroidCtrl.ProcessModels.RealTimeBGExeV2.OutputEventHandler">
            <summary>
             This event will be raised if any output appear
            </summary>
        </member>
        <member name="T:AndroidCtrl.ProcessModels.General">
            <summary>
             Give u a few pre-defined .NET process models
            </summary>
        </member>
        <member name="M:AndroidCtrl.ProcessModels.General.ExecuteBG(System.String,System.String,System.Int32)">
            <summary>
             Executes a single command in an hidden process window and wait the given time (ms) for output before it ends.
            <para/>Uses <see cref="T:System.Diagnostics.Process"/>
            <para/>*NOTE*
            <para/>timeOut = -1 implies infinite
            </summary>
            <param name="binary">Executable (c:\path\to\adb.exe)</param>
            <param name="args">Process arguments (shell ls-l)</param>
            <param name="timeout">Defines the time in ms the process will wait before it closes if no output returs, -1 implies infinite.</param>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ProcessModels.General.ExecuteBG(System.String,System.String,System.Threading.CancellationToken,System.Int32)">
            <summary>
             Executes a single command in an hidden process window and wait the given time (ms) for output before it ends.
            <para/>Uses <see cref="T:System.Diagnostics.Process"/>
            <para/>*NOTE*
            <para/>timeOut = -1 implies infinite
            </summary>
            <param name="binary">Executable (c:\path\to\adb.exe)</param>
            <param name="args">Process arguments (shell ls-l)</param>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/></param>
            <param name="timeout">Defines the time in ms the process will wait before it closes if no output returs, -1 implies infinite.</param>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ProcessModels.General.ExecuteBG(System.String,System.String,AndroidCtrl.ProcessModels.ProcessResponseEventHandler,System.Int32)">
            <summary>
             Executes a single command in an hidden process window and wait the given time (ms) for output before it ends.
            <para/>Uses <see cref="T:System.Diagnostics.Process"/>
            <para/>*NOTE*
            <para/>timeOut = -1 implies infinite
            </summary>
            <param name="binary">Executable (c:\path\to\adb.exe)</param>
            <param name="args">Process arguments (shell ls-l)</param>
            <param name="responseEventHandler"><see cref="T:AndroidCtrl.ProcessModels.ProcessResponseEventHandler"/></param>
            <param name="timeout">Defines the time in ms the process will wait before it closes if no output returs, -1 implies infinite.</param>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ProcessModels.General.ExecuteBG(System.String,System.String,AndroidCtrl.ProcessModels.ProcessResponseEventHandler,System.Threading.CancellationToken,System.Int32)">
            <summary>
             Executes a single command in an hidden process window and wait the given time (ms) for output before it ends.
            <para/>Uses <see cref="T:System.Diagnostics.Process"/>
            <para/>*NOTE*
            <para/>timeOut = -1 implies infinite
            </summary>
            <param name="binary">Executable (c:\path\to\adb.exe)</param>
            <param name="args">Process arguments (shell ls-l)</param>
            <param name="responseEventHandler"><see cref="T:AndroidCtrl.ProcessModels.ProcessResponseEventHandler"/></param>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/></param>
            <param name="timeout">Defines the time in ms the process will wait before it closes if no output returs, -1 implies infinite.</param>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ProcessModels.General.ExecuteBGv2(System.String,System.String,System.Int32)">
            <summary>
             Executes a single command in an hidden process window and wait the given time (ms) for output before it ends.
            <para/>Uses <see cref="T:AndroidCtrl.ProcessModels.RealTimeBGExeV2"/>
            <para/>*NOTE*
            <para/>timeOut = -1 implies infinite
            </summary>
            <param name="binary">Executable (c:\path\to\adb.exe)</param>
            <param name="args">Process arguments (shell ls-l)</param>
            <param name="timeout">Defines the time in ms the process will wait before it closes if no output returs, -1 implies infinite.</param>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ProcessModels.General.ExecuteBGv2(System.String,System.String,System.Threading.CancellationToken,System.Int32)">
            <summary>
             Executes a single command in an hidden process window and wait the given time (ms) for output before it ends.
            <para/>Uses <see cref="T:AndroidCtrl.ProcessModels.RealTimeBGExeV2"/>
            <para/>*NOTE*
            <para/>timeOut = -1 implies infinite
            </summary>
            <param name="binary">Executable (c:\path\to\adb.exe)</param>
            <param name="args">Process arguments (shell ls-l)</param>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/></param>
            <param name="timeout">Defines the time in ms the process will wait before it closes if no output returs, -1 implies infinite.</param>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ProcessModels.General.ExecuteBGv2(System.String,System.String,AndroidCtrl.ProcessModels.ProcessResponseEventHandler,System.Int32)">
            <summary>
             Executes a single command in an hidden process window and wait the given time (ms) for output before it ends.
            <para/>Uses <see cref="T:AndroidCtrl.ProcessModels.RealTimeBGExeV2"/>
            <para/>*NOTE*
            <para/>timeOut = -1 implies infinite
            </summary>
            <param name="binary">Executable (c:\path\to\adb.exe)</param>
            <param name="args">Process arguments (shell ls-l)</param>
            <param name="responseEventHandler"><see cref="T:AndroidCtrl.ProcessModels.ProcessResponseEventHandler"/></param>
            <param name="timeout">Defines the time in ms the process will wait before it closes if no output returs, -1 implies infinite.</param>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ProcessModels.General.ExecuteBGv2(System.String,System.String,AndroidCtrl.ProcessModels.ProcessResponseEventHandler,System.Threading.CancellationToken,System.Int32)">
            <summary>
             Executes a single command in an hidden process window and wait the given time (ms) for output before it ends.
            <para/>Uses <see cref="T:AndroidCtrl.ProcessModels.RealTimeBGExeV2"/>
            <para/>*NOTE*
            <para/>timeOut = -1 implies infinite
            </summary>
            <param name="binary">Executable (c:\path\to\adb.exe)</param>
            <param name="args">Process arguments (shell ls-l)</param>
            <param name="responseEventHandler"><see cref="T:AndroidCtrl.ProcessModels.ProcessResponseEventHandler"/></param>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/></param>
            <param name="timeout">Defines the time in ms the process will wait before it closes if no output returs, -1 implies infinite.</param>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.ProcessModels.General.FormProcessArgs(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
             Generates a single string from the given parameter
            </summary>
            <param name="args">Process/commandline arguments</param>
            <returns>string</returns>
        </member>
        <member name="M:AndroidCtrl.ProcessModels.General.FormProcessArgs(System.String,System.String)">
            <summary>
             Generates a single string from the given parameter
            </summary>
            <param name="deviceID">Device serial</param>
            <param name="args">Process/commandline arguments</param>
            <returns>string</returns>
        </member>
        <member name="M:AndroidCtrl.ProcessModels.General.FormProcessArgs(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
             Generates a single string from the given parameter
            </summary>
            <param name="deviceID">Device serial</param>
            <param name="args">Process/commandline arguments</param>
            <returns>string</returns>
        </member>
        <member name="M:AndroidCtrl.ProcessModels.General.OpenInBrowser(System.String)">
            <summary>
             Opens the given link in the default browser
            <para/>*NOTE*
            <para/>If the link doesn't start with "(http|ftp)(s)?" the function will add "http://"
            </summary>
            <param name="link">Web URL to open</param>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.InvalidOperationException"/>
        </member>
        <member name="M:AndroidCtrl.ProcessModels.General.OpenInExplorer(System.String)">
            <summary>
             Opens the given path in the Windows Explorer
            </summary>
            <param name="path">path to open</param>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.InvalidOperationException"/>
        </member>
        <member name="T:AndroidCtrl.Properties.Resources">
            <summary>
              Eine stark typisierte Ressourcenklasse zum Suchen von lokalisierten Zeichenfolgen usw.
            </summary>
        </member>
        <member name="P:AndroidCtrl.Properties.Resources.ResourceManager">
            <summary>
              Gibt die zwischengespeicherte ResourceManager-Instanz zurück, die von dieser Klasse verwendet wird.
            </summary>
        </member>
        <member name="P:AndroidCtrl.Properties.Resources.Culture">
            <summary>
              Überschreibt die CurrentUICulture-Eigenschaft des aktuellen Threads für alle
              Ressourcenzuordnungen, die diese stark typisierte Ressourcenklasse verwenden.
            </summary>
        </member>
        <member name="P:AndroidCtrl.Properties.Resources.adb">
            <summary>
              Sucht eine lokalisierte Ressource vom Typ System.Byte[].
            </summary>
        </member>
        <member name="P:AndroidCtrl.Properties.Resources.AdbWinApi">
            <summary>
              Sucht eine lokalisierte Ressource vom Typ System.Byte[].
            </summary>
        </member>
        <member name="P:AndroidCtrl.Properties.Resources.AdbWinUsbApi">
            <summary>
              Sucht eine lokalisierte Ressource vom Typ System.Byte[].
            </summary>
        </member>
        <member name="P:AndroidCtrl.Properties.Resources.fastboot">
            <summary>
              Sucht eine lokalisierte Ressource vom Typ System.Byte[].
            </summary>
        </member>
        <member name="P:AndroidCtrl.Properties.Resources.libwinpthread_1">
            <summary>
              Sucht eine lokalisierte Ressource vom Typ System.Byte[].
            </summary>
        </member>
        <member name="P:AndroidCtrl.Properties.Resources.signapk">
            <summary>
              Sucht eine lokalisierte Ressource vom Typ System.Byte[].
            </summary>
        </member>
        <member name="P:AndroidCtrl.Properties.Resources.testkey">
            <summary>
              Sucht eine lokalisierte Ressource vom Typ System.Byte[].
            </summary>
        </member>
        <member name="P:AndroidCtrl.Properties.Resources.testkey_x509">
            <summary>
              Sucht eine lokalisierte Ressource vom Typ System.Byte[].
            </summary>
        </member>
        <member name="T:AndroidCtrl.Signer.Signer">
            <summary>
             .NET 4.x (Thread-Safe) wrapper class, to interact with the signapk.jar.
            <para/>*NOTE*
            <para/>ALL local and remote paths, special variables, etc. will be set in quotes ("), so there is no need to quote anything.
            <para/>Exceptions are nested commands, these u have to quote ur self.
            <para/>Until JavaExists returns false, all calls inside this class and all subclasses will not work!
            <para/>If u call any method until JavaExists returns false, u'll get no exceptions! Coz, ExecuteBG() checks if the given
            <para/>(.exe) file exists, if not, it will return an empty List string. So if the (.exe) not exists no call will be executed!
            </summary>
        </member>
        <member name="P:AndroidCtrl.Signer.Signer.Instance">
            <summary>
             Returns the Signer class instance
            </summary>
        </member>
        <member name="P:AndroidCtrl.Signer.Signer.JavaExists">
            <summary>
             Checks if the java.exe exists
            </summary>
        </member>
        <member name="P:AndroidCtrl.Signer.Signer.PATH_JAVA">
            <summary>
             Get the full java path
            </summary>
        </member>
        <member name="P:AndroidCtrl.Signer.Signer.PATH_DIRECTORY_JAVA">
            <summary>
             Get/Set the java directory
            </summary>
        </member>
        <member name="P:AndroidCtrl.Signer.Signer.PATH_JAR">
            <summary>
             Get the full Signer path
            </summary>
        </member>
        <member name="P:AndroidCtrl.Signer.Signer.PATH_DIRECTORY">
            <summary>
             Get/Set the signer directory
            </summary>
        </member>
        <member name="P:AndroidCtrl.Signer.Signer.PATH_PUBLIC_TEST_KEY">
            <summary>
             Get the public test key path
            </summary>
        </member>
        <member name="P:AndroidCtrl.Signer.Signer.PATH_PRIVATE_TEST_KEY">
            <summary>
             Get the private test key path
            </summary>
        </member>
        <member name="M:AndroidCtrl.Signer.Signer.IntegrityCheck">
            <summary>
             Checks if all needed files exists
            <para>Checks for:</para>
            <para>java.exe</para>
            <para>signapk.jar</para>
            <para>testkey.pk8</para>
            <para>testkey.x509.pem</para>
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.Signer.Signer.Xecute(System.String,AndroidCtrl.ProcessModels.ProcessResponseEventHandler,System.Int32)">
            <summary>
             Execute the given command
            </summary>
            <param name="cmd">Command to execute</param>
            <param name="responseEventHandler">Defines the callback to raise for any output/error response during the operation.</param>
            <param name="timeout">Defines the time in ms Xecute will wait before it closes the process, -1 implies infinite.</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="P:AndroidCtrl.Signer.Signer.CmdTimeout">
            <summary>
             CmdTimeout define for the whole instance how long Xecute() will wait for the given process to responde.
            <para/>*NOTE*
            <para/>Instance default is "-1", it implies infinite
            <para/>The value are milliseconds 30 sec = 30 000 ms
            </summary>
        </member>
        <member name="M:AndroidCtrl.Signer.Signer.Execute(System.String,System.Int32)">
            <summary>
             Execute a custom command
             <para>*NOTE* timeOut = -1 implies infinite.</para>
            </summary>
            <param name="cmd">Command to run</param>
            <param name="timeout">time the process will wait for output, -1 implies infinite, 0 implies class internal timeout</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.Signer.Signer.Execute(System.String,AndroidCtrl.ProcessModels.ProcessResponseEventHandler,System.Int32)">
            <summary>
             Execute a custom command
             <para>*NOTE* timeOut = -1 implies infinite.</para>
            </summary>
            <param name="cmd">Command to run</param>
            <param name="responseEventHandler">Defines the callback to raise for any output/error response during the operation.</param>
            <param name="timeout">time the process will wait for output, -1 implies infinite, 0 implies class internal timeout</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:AndroidCtrl.Signer.Signer.Sign(System.String,System.String,System.String)">
            <summary>
             Signs an apk or zip file with the given public and private keys
            <para>*NOTE* The signed file will always be a signed copy of the given file</para>
            <para>*NOTE* The signed file will end like xxxxx_signed.apk or xxxxx_signed.zip</para>
            </summary>
            <param name="localPath">Local path to apk or zip file</param>
            <param name="publickey">Public key-file (xxxxxkey.x509.pem)</param>
            <param name="privatekey">Private key-file (xxxxxkey.pk8)</param>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.FileNotFoundException"/>
        </member>
        <member name="M:AndroidCtrl.Signer.Signer.SignWithTestKeys(System.String)">
            <summary>
             Signs an apk or zip file with testkeys
             <para>*NOTE* The signed file will always be a signed copy of the given file</para>
             <para>*NOTE* The signed file will end like xxxxx_signed.apk or xxxxx_signed.zip</para>
            </summary>
            <param name="localPath">Local path to apk or zip</param>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.FileNotFoundException"/>
        </member>
        <member name="T:AndroidCtrl.Tools.CRC16">
            <summary>
             CRC16
            </summary>
        </member>
        <member name="F:AndroidCtrl.Tools.CRC16.DefaultPolynomial">
            <summary>
             DefaultPolynomial (0xA001)
            </summary>
        </member>
        <member name="F:AndroidCtrl.Tools.CRC16.DefaultSeed">
            <summary>
             DefaultSeed (0)
            </summary>
        </member>
        <member name="M:AndroidCtrl.Tools.CRC16.#ctor">
            <summary>
             CRC16
            </summary>
        </member>
        <member name="M:AndroidCtrl.Tools.CRC16.#ctor(System.UInt16,System.UInt16)">
            <summary>
             CRC16
            </summary>
            <param name="polynomial">ushort by default (0xA001)</param>
            <param name="seed">ushort by default (0)</param>
        </member>
        <member name="M:AndroidCtrl.Tools.CRC16.Create">
            <summary>
             Creates an instance of the CRC-16 algorithm
            </summary>
            <returns><see cref="T:AndroidCtrl.Tools.CRC16"/></returns>
        </member>
        <member name="M:AndroidCtrl.Tools.CRC16.Compute(System.Byte[])">
            <summary>
             Compute
            </summary>
            <param name="buffer">byte[]</param>
            <returns>ushort</returns>
        </member>
        <member name="M:AndroidCtrl.Tools.CRC16.Compute(System.UInt16,System.Byte[])">
            <summary>
             Compute
            </summary>
            <param name="seed">uint</param>
            <param name="buffer">byte[]</param>
            <returns>ushort</returns>
        </member>
        <member name="M:AndroidCtrl.Tools.CRC16.Compute(System.UInt16,System.UInt16,System.Byte[])">
            <summary>
             Compute
            </summary>
            <param name="polynomial">uint</param>
            <param name="seed">uint</param>
            <param name="buffer">byte[]</param>
            <returns>uint</returns>
        </member>
        <member name="M:AndroidCtrl.Tools.CRC16.OfString(System.String)">
            <summary>
             Calculates the CRC-checksum for the given string
            </summary>
            <param name="str">string</param>
            <returns>string</returns>
        </member>
        <member name="M:AndroidCtrl.Tools.CRC16.OfByteArray(System.Byte[])">
            <summary>
             Calculates the CRC-checksum for the given byte[]
            </summary>
            <param name="bytes">byte[]</param>
            <returns>byte[]</returns>
        </member>
        <member name="M:AndroidCtrl.Tools.CRC16.Initialize">
            <summary>
             Initialize (override)
            </summary>
        </member>
        <member name="M:AndroidCtrl.Tools.CRC16.HashCore(System.Byte[],System.Int32,System.Int32)">
            <summary>
             HashCore (override)
            </summary>
            <param name="array">byte[]</param>
            <param name="ibStart">int</param>
            <param name="cbSize">int</param>
        </member>
        <member name="M:AndroidCtrl.Tools.CRC16.HashFinal">
            <summary>
             HashFinal (override)
            </summary>
            <returns>byte[]</returns>
        </member>
        <member name="P:AndroidCtrl.Tools.CRC16.HashSize">
            <summary>
             HashSize (override)
            </summary>
        </member>
        <member name="T:AndroidCtrl.Tools.CRC32">
            <summary>
             CRC32
            </summary>
        </member>
        <member name="F:AndroidCtrl.Tools.CRC32.DefaultPolynomial">
            <summary>
             DefaultPolynomial (0xedb88320u)
            </summary>
        </member>
        <member name="F:AndroidCtrl.Tools.CRC32.DefaultSeed">
            <summary>
             DefaultSeed (0xffffffffu)
            </summary>
        </member>
        <member name="M:AndroidCtrl.Tools.CRC32.#ctor">
            <summary>
             CRC32
            </summary>
        </member>
        <member name="M:AndroidCtrl.Tools.CRC32.#ctor(System.UInt32,System.UInt32)">
            <summary>
             CRC32
            </summary>
            <param name="polynomial">uint by default (0xedb88320u)</param>
            <param name="seed">uint by default (0xffffffffu)</param>
        </member>
        <member name="M:AndroidCtrl.Tools.CRC32.Create">
            <summary>
             Creates an instance of the CRC-32 algorithm
            </summary>
            <returns><see cref="T:AndroidCtrl.Tools.CRC32"/></returns>
        </member>
        <member name="M:AndroidCtrl.Tools.CRC32.Compute(System.Byte[])">
            <summary>
             Compute
            </summary>
            <param name="buffer">byte[]</param>
            <returns>uint</returns>
        </member>
        <member name="M:AndroidCtrl.Tools.CRC32.Compute(System.UInt32,System.Byte[])">
            <summary>
             Compute
            </summary>
            <param name="seed">uint</param>
            <param name="buffer">byte[]</param>
            <returns>uint</returns>
        </member>
        <member name="M:AndroidCtrl.Tools.CRC32.Compute(System.UInt32,System.UInt32,System.Byte[])">
            <summary>
             Compute
            </summary>
            <param name="polynomial">uint</param>
            <param name="seed">uint</param>
            <param name="buffer">byte[]</param>
            <returns>uint</returns>
        </member>
        <member name="M:AndroidCtrl.Tools.CRC32.OfString(System.String)">
            <summary>
             Calculates the CRC-checksum for the given string
            </summary>
            <param name="str">string</param>
            <returns>string</returns>
        </member>
        <member name="M:AndroidCtrl.Tools.CRC32.OfByteArray(System.Byte[])">
            <summary>
             Calculates the CRC-checksum for the given byte[]
            </summary>
            <param name="bytes">byte[]</param>
            <returns>byte[]</returns>
        </member>
        <member name="M:AndroidCtrl.Tools.CRC32.Initialize">
            <summary>
             Initialize (override)
            </summary>
        </member>
        <member name="M:AndroidCtrl.Tools.CRC32.HashCore(System.Byte[],System.Int32,System.Int32)">
            <summary>
             HashCore (override)
            </summary>
            <param name="array">byte[]</param>
            <param name="ibStart">int</param>
            <param name="cbSize">int</param>
        </member>
        <member name="M:AndroidCtrl.Tools.CRC32.HashFinal">
            <summary>
             HashFinal (override)
            </summary>
            <returns>byte[]</returns>
        </member>
        <member name="P:AndroidCtrl.Tools.CRC32.HashSize">
            <summary>
             HashSize (override)
            </summary>
        </member>
        <member name="T:AndroidCtrl.Tools.CRC64">
            <summary>
             CRC64
            </summary>
        </member>
        <member name="F:AndroidCtrl.Tools.CRC64.DefaultSeed">
            <summary>
             DefaultSeed (0x0)
            </summary>
        </member>
        <member name="M:AndroidCtrl.Tools.CRC64.#ctor(System.UInt64)">
            <summary>
             CRC64
            </summary>
            <param name="polynomial">ulong</param>
        </member>
        <member name="M:AndroidCtrl.Tools.CRC64.#ctor(System.UInt64,System.UInt64)">
            <summary>
             CRC64
            </summary>
            <param name="polynomial">ulong</param>
            <param name="seed">ulong</param>
        </member>
        <member name="M:AndroidCtrl.Tools.CRC64.OfString(System.String)">
            <summary>
             Calculates the CRC-checksum for the given string
            </summary>
            <param name="str">string</param>
            <returns>string</returns>
        </member>
        <member name="M:AndroidCtrl.Tools.CRC64.OfByteArray(System.Byte[])">
            <summary>
             Calculates the CRC-checksum for the given byte[]
            </summary>
            <param name="bytes">byte[]</param>
            <returns>byte[]</returns>
        </member>
        <member name="M:AndroidCtrl.Tools.CRC64.Initialize">
            <summary>
             Initialize (override)
            </summary>
        </member>
        <member name="M:AndroidCtrl.Tools.CRC64.HashCore(System.Byte[],System.Int32,System.Int32)">
            <summary>
             HashCore (override)
            </summary>
            <param name="array"></param>
            <param name="ibStart"></param>
            <param name="cbSize"></param>
        </member>
        <member name="M:AndroidCtrl.Tools.CRC64.HashFinal">
            <summary>
             HashFinal (override)
            </summary>
            <returns></returns>
        </member>
        <member name="P:AndroidCtrl.Tools.CRC64.HashSize">
            <summary>
             HashSize (override)
            </summary>
        </member>
        <member name="T:AndroidCtrl.Tools.CRC64Iso3309">
            <summary>
             CRC-64 (ISO 3309)
            </summary>
        </member>
        <member name="F:AndroidCtrl.Tools.CRC64Iso3309.Iso3309Polynomial">
            <summary>
             Iso3309Polynomial (0xD800000000000000)
            </summary>
        </member>
        <member name="M:AndroidCtrl.Tools.CRC64Iso3309.#ctor">
            <summary>
             CRC-64 ISO-3309
            </summary>
        </member>
        <member name="M:AndroidCtrl.Tools.CRC64Iso3309.#ctor(System.UInt64)">
            <summary>
             CRC-64 ISO-3309
            </summary>
            <param name="seed">ulong</param>
        </member>
        <member name="M:AndroidCtrl.Tools.CRC64Iso3309.Create">
            <summary>
             Creates an instance of the CRC-64 ISO-3309 algorithm
            </summary>
            <returns><see cref="T:AndroidCtrl.Tools.CRC64Iso3309"/></returns>
        </member>
        <member name="M:AndroidCtrl.Tools.CRC64Iso3309.Compute(System.Byte[])">
            <summary>
             Compute
            </summary>
            <param name="buffer">byte[]</param>
            <returns>ulong</returns>
        </member>
        <member name="M:AndroidCtrl.Tools.CRC64Iso3309.Compute(System.UInt64,System.Byte[])">
            <summary>
             Compute
            </summary>
            <param name="seed">ulong</param>
            <param name="buffer">byte[]</param>
            <returns>ulong</returns>
        </member>
        <member name="T:AndroidCtrl.Tools.Deploy">
            <summary>
             Deploy the files needed by this dll.
            </summary>
        </member>
        <member name="M:AndroidCtrl.Tools.Deploy.ADB">
            <summary>
             Create the working folder (ADB.PATH_EXE) and deploy the files needed by this dll
            </summary>
        </member>
        <member name="M:AndroidCtrl.Tools.Deploy.ADB(System.String)">
            <summary>
             Create the given working folder and deploy the files needed by this dll
            </summary>
            <param name="localPath">Full qualified directory path</param>
        </member>
        <member name="M:AndroidCtrl.Tools.Deploy.Fastboot">
            <summary>
             Create the working folder (Fastboot.PATH_EXE) and deploy the files needed by this dll
            </summary>
        </member>
        <member name="M:AndroidCtrl.Tools.Deploy.Fastboot(System.String)">
            <summary>
             Create the given working folder and deploy the files needed by this dll
            </summary>
            <param name="localPath">Full qualified directory path</param>
        </member>
        <member name="M:AndroidCtrl.Tools.Deploy.Signer">
            <summary>
             Create the working folder (Signer.PATH_DIRECTORY) and deploy the files needed by this dll
            </summary>
        </member>
        <member name="M:AndroidCtrl.Tools.Deploy.Signer(System.String)">
            <summary>
             Create the given working folder and deploy the files needed by this dll
            </summary>
            <param name="localPath">Full qualified directory path</param>
        </member>
        <member name="M:AndroidCtrl.Tools.Deploy.ExtractResource(System.Byte[],System.String,System.String)">
            <summary>
             Extract a deployment resource and check the md5 hash
            </summary>
            <param name="resource"></param>
            <param name="file"></param>
            <param name="hash">md5 hash</param>
        </member>
        <member name="M:AndroidCtrl.Tools.Deploy.ExtractResource(System.Byte[],System.String)">
            <summary>
             Extract a deployment resource
            </summary>
            <param name="resource"></param>
            <param name="file"></param>
        </member>
        <member name="T:AndroidCtrl.Tools.Hash">
            <summary>
             This class give u some shortcuts to .NET cryptography tools
            </summary>
        </member>
        <member name="M:AndroidCtrl.Tools.Hash.FromBytes(System.Byte[],AndroidCtrl.HashMode)">
            <summary>
             Generate a hash from the given byte[] and HashID
            </summary>
            <param name="bytes">input bytes</param>
            <param name="hash">HashID</param>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.FormatException"/>
            <returns>string or null</returns>
        </member>
        <member name="M:AndroidCtrl.Tools.Hash.FromFile(System.String,AndroidCtrl.HashMode)">
            <summary>
             Generate a hash from the given file and HashID
            </summary>
            <param name="path">input filepath</param>
            <param name="hash">HashID</param>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.IO.FileNotFoundException"/>
            <exception cref="T:System.FormatException"/>
            <returns>string or null</returns>
        </member>
        <member name="M:AndroidCtrl.Tools.Hash.FromString(System.String,AndroidCtrl.HashMode)">
            <summary>
             Generate a hash from the given (UTF-8) string and HashID
            </summary>
            <param name="str">input string</param>
            <param name="hash">HashID</param>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.FormatException"/>
            <returns>string</returns>
        </member>
        <member name="M:AndroidCtrl.Tools.Hash.FromString(System.String,System.Text.Encoding,AndroidCtrl.HashMode)">
            <summary>
             Generate a hash from the given string, encoding and HashID
            </summary>
            <param name="str">input string</param>
            <param name="enc">Encoding</param>
            <param name="hash">HashID</param>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.FormatException"/>
            <returns>string</returns>
        </member>
        <member name="T:AndroidCtrl.Tools.IMEI">
            <summary>
             (I)nternational(M)obile(E)quipment(I)dentifier - Tools
            </summary>
        </member>
        <member name="M:AndroidCtrl.Tools.IMEI.BuildFromPartsV1(System.String,System.String,System.String,System.String)">
            <summary>
             Constructs a syntactical valid IMEI based on the given parts:
            <para/>(T)ype (A)llocation (C)ode = 6 digits (e.g.: 012345)
            <para/>(F)inal (A)ssembly (C)ode = 2 digits (e.g: 01)
            <para/>(S)erial (N)umber = 6 digits (e.g.: 012345)
            <para/>(optional) (S)oftware (V)ersion (N)umber = 2 digits (e.g.: 01)
            <para/>*Side Note*
            <para/>Takes an input, based on the scheme applied before April 1st, 2004
            </summary>
            <param name="tac">Type Allocation Code - 6 digits</param>
            <param name="fac">Final Assembly Code - 2 digits</param>
            <param name="sn">Serial number - 6 digits</param>
            <param name="svn">(optional) Software Version Number - 2 digits</param>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.FormatException"/>
        </member>
        <member name="M:AndroidCtrl.Tools.IMEI.BuildFromPartsV2(System.String,System.String,System.String,System.String)">
            <summary>
             Constructs a syntactical valid IMEI based on the given parts:
            <para/>(R)eporting (B)ody (I)dentifier = 2 digits (e.g.: 01)
            <para/>(T)ype (A)llocation (C)ode = 6 digits (e.g.: 012345)
            <para/>(S)erial (N)umber = 6 digits (e.g.: 012345)
            <para/>(optional) (S)oftware (V)ersion (N)umber = 2 digits (e.g.: 01)
            <para/>*Side Note*
            <para/>Takes an input, based on the scheme applied since April 1st, 2004
            </summary>
            <param name="rbi">Reporting Body Identifier - 2 digits</param>
            <param name="tac">Type Allocation Code - 6 digits</param>
            <param name="sn">Serial number - 6 digits</param>
            <param name="svn">(optional) Software Version Number - 2 digits</param>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.FormatException"/>
        </member>
        <member name="M:AndroidCtrl.Tools.IMEI.CalculateChecksum(System.String)">
            <summary>
             Calculates the checksum of the given IMEI
            </summary>
            <param name="imei">IMEI as <see cref="T:System.String"/> - at least 14 digits long</param>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.FormatException"/>
            <returns><see cref="T:System.Int32"/></returns>
        </member>
        <member name="M:AndroidCtrl.Tools.IMEI.Verify(System.String)">
            <summary>
             Matches a calculated checksum (of the 1st, 14 digits) against the IMEI checksum (15th digit)
            </summary>
            <param name="imei">IMEI as <see cref="T:System.String"/> - 15 digits long</param>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.FormatException"/>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.Tools.IMEI.CalculateChecksum(System.Int32[])">
            <summary>
             CalculateChecksum
            </summary>
            <param name="imei"><see cref="T:int[]"/></param>
            <returns><see cref="T:System.Int32"/></returns>
        </member>
        <member name="M:AndroidCtrl.Tools.IMEI.GetIntArray(System.String)">
            <summary>
             Convert an string based on numbers to an int[]
            </summary>
            <param name="str"><see cref="T:System.String"/></param>
            <returns><see cref="T:int[]"/></returns>
        </member>
        <member name="T:AndroidCtrl.Tools.ToolBox">
            <summary>
             Here u can find some little usefull functions which makes ur life a bit easier ;)
            </summary>
        </member>
        <member name="M:AndroidCtrl.Tools.ToolBox.CheckDeviceState(System.String)">
            <summary>
             Returns the state of the given deviceID
            </summary>
            <param name="deviceID">device id/serial</param>
            <returns><see cref="T:AndroidCtrl.DeviceState"/></returns>
        </member>
        <member name="M:AndroidCtrl.Tools.ToolBox.CheckDeviceState(AndroidCtrl.IDeviceInfo)">
            <summary>
             Returns the state of the given <see cref="T:AndroidCtrl.IDeviceInfo"/>
            </summary>
            <param name="device"><see cref="T:AndroidCtrl.IDeviceInfo"/></param>
            <returns><see cref="T:AndroidCtrl.DeviceState"/></returns>
        </member>
        <member name="M:AndroidCtrl.Tools.ToolBox.ConvertUnixChmod(System.String)">
            <summary>
             Convert an unix chmod (rwsrwxrwt) to an number (5777) and reverse
            </summary>
            <param name="chmod">(rwsrwxrwt) or (5777)</param>
            <returns>string</returns>
        </member>
        <member name="M:AndroidCtrl.Tools.ToolBox.GetDevice(System.String)">
            <summary>
             Returns a <see cref="T:AndroidCtrl.IDeviceInfo"/> if the device is connected to <see cref="T:AndroidCtrl.ADB.Binary.ADB"/>, <see cref="T:AndroidCtrl.ADB.Socket.ADB"/> or <see cref="T:AndroidCtrl.Fastboot.Fastboot"/>
            </summary>
            <param name="deviceID">device id/serial</param>
            <returns><see cref="T:AndroidCtrl.IDeviceInfo"/> or <see cref="T:null"/></returns>
        </member>
        <member name="M:AndroidCtrl.Tools.ToolBox.GetEnumString(System.Enum)">
            <summary>
             Returns the real string value of the given enum
            </summary>
            <param name="enumVar">enum</param>
            <returns>string</returns>
        </member>
        <member name="M:AndroidCtrl.Tools.ToolBox.ProcessAlive(System.String)">
            <summary>
             Check if the given processname is alive
            </summary>
            <param name="processName">Process name</param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.Tools.ToolBox.ProcessAlive(System.String,System.Boolean)">
            <summary>
             Check if the given processname is alive
            </summary>
            <param name="processName">Process name</param>
            <param name="isPath"><see cref="T:System.Boolean"/></param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.Tools.ToolBox.ProcessAlive(System.Int32)">
            <summary>
             Check if the given processname is alive
            </summary>
            <param name="pid">Process ID</param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.Tools.ToolBox.ProcessKill(System.String)">
            <summary>
             Kills all instances of the given process
            </summary>
            <param name="processName">Process name</param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.Tools.ToolBox.ProcessKill(System.String,System.Boolean)">
            <summary>
             Kills all instances of the given process
            </summary>
            <param name="processName">Process name</param>
            <param name="isPath"><see cref="T:System.Boolean"/></param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.Tools.ToolBox.ProcessKill(System.Int32)">
            <summary>
             Kills the given process ID
            </summary>
            <param name="pid">Process ID</param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.Tools.ToolBox.Quote(System.String,System.Int32,System.Boolean)">
            <summary>
             Quote adds quotes (') or (") to a string
            <para>mode 1 = (') | 2 = (")</para>
            </summary>
            <param name="str">string to quote</param>
            <param name="mode">1 single (') | 2 double (") quote</param>
            <param name="esc">escape</param>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="M:AndroidCtrl.Tools.ToolBox.ParseBool(System.String)">
            <summary>
             Covert a string to bool (true,on,1) will be true all other will be false
            </summary>
            <param name="str">String to convert</param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:AndroidCtrl.Tools.ToolBox.ParseDeviceState(System.String)">
            <summary>
             Convert a string like (bootloader,device,fastboot,etc.) in the right IDDeviceState type
            </summary>
            <param name="state">String to convert</param>
            <returns><see cref="T:AndroidCtrl.DeviceState"/></returns>
        </member>
        <member name="M:AndroidCtrl.Tools.ToolBox.ParseSize(System.String,System.Boolean)">
            <summary>
             Calculate size in Byte,KB,MB,GB,TB,PT,EB,ZB,YB
            </summary>
            <param name="size">string 12389127389127389</param>
            <param name="base1024">use 1024 not 1000 as multiplier</param>
            <returns>string  2,45 MB | 200,00 GB | string.Empty</returns>
        </member>
        <member name="M:AndroidCtrl.Tools.ToolBox.ParseSize(System.Int64,System.Boolean)">
            <summary>
             Calculate size in Byte,KB,MB,GB,TB,PT,EB,ZB,YB
            </summary>
            <param name="size">long 12389127389127389</param>
            <param name="base1024">use 1024 not 1000 as multiplier</param>
            <returns>string  2,45 MB | 200,00 GB | string.Empty</returns>
        </member>
        <member name="T:AndroidCtrl.Tools.Hex">
            <summary>
             Hex Tools
            </summary>
        </member>
        <member name="M:AndroidCtrl.Tools.Hex.FromBytes(System.Byte[])">
            <summary>
             Encode the given byte[] to an hex string
            </summary>
            <param name="bytes">bytes to encode</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns>string</returns>
        </member>
        <member name="M:AndroidCtrl.Tools.Hex.FromString(System.String)">
            <summary>
             Encode the given (UTF-8) string to an hex string
            </summary>
            <param name="str">String to encode</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns>string</returns>
        </member>
        <member name="M:AndroidCtrl.Tools.Hex.FromString(System.String,System.Text.Encoding)">
            <summary>
             Encode the given string with the given encoding to an hex string
            </summary>
            <param name="str">String to encode</param>
            <param name="enc">Encoding</param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns>string</returns>
        </member>
        <member name="M:AndroidCtrl.Tools.Hex.ToBytes(System.String)">
            <summary>
             Decode the given hex string to an byte[]
            </summary>
            <param name="str">String to decode</param>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.FormatException"/>
            <returns>byte[]</returns>
        </member>
        <member name="M:AndroidCtrl.Tools.Hex.ToString(System.String)">
            <summary>
             Decode the given hex string to an (UTF-8) string
            </summary>
            <param name="str">String to decode</param>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.FormatException"/>
            <returns>string</returns>
        </member>
        <member name="M:AndroidCtrl.Tools.Hex.ToString(System.String,System.Text.Encoding)">
            <summary>
             Decode the given hex string to an string with the given encoding
            </summary>
            <param name="str">String to decode</param>
            <param name="enc">Encoding</param>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.FormatException"/>
            <returns>string</returns>
        </member>
        <member name="T:AndroidCtrl.Config">
            <summary>
             Default configuration
            <para/>*NOTE*
            <para/>Changes in this class only appear if u start with an fresh dll instance.
            <para/>Any changes must be made before u start working with this dll.
            <para/>This is only a "init" | "default" | "fallback" configuration.
            </summary>
        </member>
        <member name="P:AndroidCtrl.Config.Instance">
            <summary>
             Returns the Config class instance
            </summary>
        </member>
        <member name="P:AndroidCtrl.Config.Remote">
            <summary>
             Remote configuration
            </summary>
        </member>
        <member name="T:AndroidCtrl.Configuration.Remote">
            <summary>
             Remote configuration
            <para>*NOTE* This class can't be called directly. Use "Config.Instance" to get an instance.</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.Configuration.Remote.Cache">
            <summary>
             Get/Set the Android cache directory
            </summary>
        </member>
        <member name="P:AndroidCtrl.Configuration.Remote.DalvikCache">
            <summary>
             Get/Set the Android dalvik-cache directory
            </summary>
        </member>
        <member name="P:AndroidCtrl.Configuration.Remote.Data">
            <summary>
             Get/Set the Android data directory
            </summary>
        </member>
        <member name="P:AndroidCtrl.Configuration.Remote.RecoveryCache">
            <summary>
             Get/Set the Android-Recovery cache directory
            </summary>
        </member>
        <member name="P:AndroidCtrl.Configuration.Remote.SystemTmp">
            <summary>
             Get/Set the Android-System tmp directory
            </summary>
        </member>
        <member name="P:AndroidCtrl.Configuration.Remote.Provider">
            <summary>
             Android Provider directories
            </summary>
        </member>
        <member name="T:AndroidCtrl.Configuration.RProvider">
            <summary>
             Android content provider
            <para>*NOTE* This class can't be called directly. Use "Config.Instance" to get an instance.</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.Configuration.RProvider.Contacts">
            <summary>
             Contact-Provider
            </summary>
        </member>
        <member name="P:AndroidCtrl.Configuration.RProvider.Telephony">
            <summary>
             Telephony-Provider
            </summary>
        </member>
        <member name="T:AndroidCtrl.Configuration.RProviderContacts">
            <summary>
             Android Contact-Provider
            <para>*NOTE* This class can't be called directly. Use "Config.Instance" to get an instance.</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.Configuration.RProviderContacts.Contacts2">
            <summary>
             Get/Set the Android-Contacts-Provider Database-File (contacts2.db) directory
            </summary>
        </member>
        <member name="P:AndroidCtrl.Configuration.RProviderContacts.Profile">
            <summary>
             Get/Set the Android-Contacts-Provider Profile-File (profile.db) directory
            </summary>
        </member>
        <member name="T:AndroidCtrl.Configuration.RProviderTelephony">
            <summary>
             Android Telephony-Provider
            <para>*NOTE* This class can't be called directly. Use "Config.Instance" to get an instance.</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.Configuration.RProviderTelephony.BlackList">
            <summary>
             Get/Set the Android-Telephony-Provider Blacklist-File (blacklist.db) directory
            </summary>
        </member>
        <member name="P:AndroidCtrl.Configuration.RProviderTelephony.SmsMms">
            <summary>
             Get/Set the Android-Telephony-Provider SMS-MMS-Database-File (mmssms.db) directory
            </summary>
        </member>
        <member name="P:AndroidCtrl.Configuration.RProviderTelephony.Telephony">
            <summary>
             Get/Set the Android-Telephony-Provider Call-Database-File (telephony.db) directory
            </summary>
        </member>
        <member name="T:AndroidCtrl.Cleanup">
            <summary>
             Cleanup Area, here u can simply delete the folders which are created by this dll
            </summary>
        </member>
        <member name="P:AndroidCtrl.Cleanup.Instance">
            <summary>
             Returns the Cleanup class instance
            </summary>
        </member>
        <member name="M:AndroidCtrl.Cleanup.ADB">
            <summary>
             Delete the "ADB.PATH_EXE" folder and it's content
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.Cleanup.Complete">
            <summary>
             Call all methods inside this class
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.Cleanup.Fastboot">
            <summary>
             Delete the "Fastboot.PATH_EXE" folder and it's content
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.Cleanup.Signer">
            <summary>
             Delete the "Signer.PATH_DIRECTORY" folder and it's content
            </summary>
            <returns>bool</returns>
        </member>
        <member name="T:AndroidCtrl.DeviceRemovedEventHandler">
            <summary>
             This event will be raised if a device is dll wide removed
            </summary>
            <param name="sender"><see cref="T:AndroidCtrl.DeviceMode"/> as <see cref="T:System.String"/></param>
            <param name="e"><see cref="T:AndroidCtrl.DeviceRemovedEventArgs"/></param>
        </member>
        <member name="T:AndroidCtrl.DeviceRemovedEventArgs">
            <summary>
             DeviceRemovedEventArgs
            </summary>
        </member>
        <member name="P:AndroidCtrl.DeviceRemovedEventArgs.Mode">
            <summary>
             Returns the device mode
            </summary>
        </member>
        <member name="P:AndroidCtrl.DeviceRemovedEventArgs.DeviceID">
            <summary>
             Returns the selected device serial
            </summary>
        </member>
        <member name="M:AndroidCtrl.DeviceRemovedEventArgs.#ctor(AndroidCtrl.DeviceMode,System.String)">
            <summary>
             DeviceRemovedEventArgs
            </summary>
            <param name="deviceMode"><see cref="T:AndroidCtrl.DeviceMode"/></param>
            <param name="deviceID">deviceID as <see cref="T:System.String"/></param>
        </member>
        <member name="T:AndroidCtrl.DeviceSelectedEventHandler">
            <summary>
             This event will be raised if a device is dll wide selected/removed
            </summary>
            <param name="sender"><see cref="T:AndroidCtrl.DeviceMode"/> as <see cref="T:System.String"/></param>
            <param name="e"><see cref="T:AndroidCtrl.DeviceSelectedEventArgs"/></param>
        </member>
        <member name="T:AndroidCtrl.DeviceSelectedEventArgs">
            <summary>
             DeviceSelectedEventArgs
            </summary>
        </member>
        <member name="P:AndroidCtrl.DeviceSelectedEventArgs.Mode">
            <summary>
             Returns the device mode
            </summary>
        </member>
        <member name="P:AndroidCtrl.DeviceSelectedEventArgs.DeviceID">
            <summary>
             Returns the selected device serial
            </summary>
        </member>
        <member name="M:AndroidCtrl.DeviceSelectedEventArgs.#ctor(AndroidCtrl.DeviceMode,System.String)">
            <summary>
             DeviceSelectedEventArgs
            </summary>
            <param name="deviceMode"><see cref="T:AndroidCtrl.DeviceMode"/></param>
            <param name="deviceID">deviceID as <see cref="T:System.String"/></param>
        </member>
        <member name="T:AndroidCtrl.MonitorAddedEventHandler">
            <summary>
             This event will be raised if a new device is detected
            </summary>
            <param name="sender"><see cref="T:AndroidCtrl.DeviceMode"/> as <see cref="T:System.String"/></param>
            <param name="e"><see cref="T:AndroidCtrl.MonitorAddedEventArgs"/></param>
        </member>
        <member name="T:AndroidCtrl.MonitorAddedEventArgs">
            <summary>
             MonitorAddedEventArgs
            </summary>
        </member>
        <member name="P:AndroidCtrl.MonitorAddedEventArgs.Mode">
            <summary>
             Returns the device mode
            </summary>
        </member>
        <member name="P:AndroidCtrl.MonitorAddedEventArgs.Devices">
            <summary>
             Returns the added devices
            </summary>
        </member>
        <member name="M:AndroidCtrl.MonitorAddedEventArgs.#ctor(AndroidCtrl.DeviceMode,System.Collections.Generic.IEnumerable{AndroidCtrl.IDeviceInfo})">
            <summary>
             MonitorAddedEventArgs
            </summary>
            <param name="deviceMode"><see cref="T:AndroidCtrl.DeviceMode"/></param>
            <param name="devices"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
        </member>
        <member name="T:AndroidCtrl.MonitorChangedEventHandler">
            <summary>
             This event will be raised if a device state has changed
            </summary>
            <param name="sender"><see cref="T:AndroidCtrl.DeviceMode"/> as <see cref="T:System.String"/></param>
            <param name="e"><see cref="T:AndroidCtrl.MonitorChangedEventArgs"/></param>
        </member>
        <member name="T:AndroidCtrl.MonitorChangedEventArgs">
            <summary>
             MonitorChangedEventArgs
            </summary>
        </member>
        <member name="P:AndroidCtrl.MonitorChangedEventArgs.Mode">
            <summary>
             Returns the device mode
            </summary>
        </member>
        <member name="P:AndroidCtrl.MonitorChangedEventArgs.Devices">
            <summary>
             Returns the changed devices
            </summary>
        </member>
        <member name="M:AndroidCtrl.MonitorChangedEventArgs.#ctor(AndroidCtrl.DeviceMode,System.Collections.Generic.IEnumerable{AndroidCtrl.IDeviceInfo})">
            <summary>
             MonitorChangedEventArgs
            </summary>
            <param name="deviceMode"><see cref="T:AndroidCtrl.DeviceMode"/></param>
            <param name="devices"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
        </member>
        <member name="T:AndroidCtrl.MonitorRemovedEventHandler">
            <summary>
             This event will be raised if a device state has changed
            </summary>
            <param name="sender"><see cref="T:AndroidCtrl.DeviceMode"/> as <see cref="T:System.String"/></param>
            <param name="e"><see cref="T:AndroidCtrl.MonitorRemovedEventArgs"/></param>
        </member>
        <member name="T:AndroidCtrl.MonitorRemovedEventArgs">
            <summary>
             MonitorRemovedEventArgs
            </summary>
        </member>
        <member name="P:AndroidCtrl.MonitorRemovedEventArgs.Mode">
            <summary>
             Returns the device mode
            </summary>
        </member>
        <member name="P:AndroidCtrl.MonitorRemovedEventArgs.Devices">
            <summary>
             Returns the removed devices
            </summary>
        </member>
        <member name="M:AndroidCtrl.MonitorRemovedEventArgs.#ctor(AndroidCtrl.DeviceMode,System.Collections.Generic.IEnumerable{AndroidCtrl.IDeviceInfo})">
            <summary>
             MonitorRemovedEventArgs
            </summary>
            <param name="deviceMode"><see cref="T:AndroidCtrl.DeviceMode"/></param>
            <param name="devices"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
        </member>
        <member name="T:AndroidCtrl.MonitorStartedEventHandler">
            <summary>
             This event will be raised when the monitor gets started
            </summary>
            <param name="sender"><see cref="T:AndroidCtrl.DeviceMode"/> as <see cref="T:System.String"/></param>
            <param name="e"><see cref="T:System.EventArgs"/></param>
        </member>
        <member name="T:AndroidCtrl.MonitorStoppedEventHandler">
            <summary>
             This event will be raised when the monitor gets stopped
            </summary>
            <param name="sender"><see cref="T:AndroidCtrl.DeviceMode"/> as <see cref="T:System.String"/></param>
            <param name="e"><see cref="T:System.EventArgs"/></param>
        </member>
        <member name="T:AndroidCtrl.DeviceInfo">
            <summary>
             Holds the connected device information
            <para/>This object implements <see cref="T:AndroidCtrl.IDeviceInfo"/> &amp; <see cref="T:System.Runtime.Serialization.ISerializable"/>
            </summary>
        </member>
        <member name="M:AndroidCtrl.DeviceInfo.#ctor(AndroidCtrl.DeviceMode,System.String,AndroidCtrl.DeviceState)">
            <summary>
             Creates the DeviceInfo object (Fastboot)
            </summary>
            <param name="mode"><see cref="T:AndroidCtrl.DeviceMode"/></param>
            <param name="serial">Device serial</param>
            <param name="state"><see cref="T:AndroidCtrl.DeviceState"/></param>
        </member>
        <member name="M:AndroidCtrl.DeviceInfo.#ctor(AndroidCtrl.DeviceMode,System.String,AndroidCtrl.DeviceState,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
             Creates the DeviceInfo object (ADB)
            </summary>
            <param name="mode"><see cref="T:AndroidCtrl.DeviceMode"/></param>
            <param name="serial">Device serial</param>
            <param name="state"><see cref="T:AndroidCtrl.DeviceState"/></param>
            <param name="product">product name</param>
            <param name="model">model name</param>
            <param name="device">deviceid</param>
            <param name="transportID">transport_id</param>
            <param name="ip">IP</param>
            <param name="port">Port</param>
        </member>
        <member name="M:AndroidCtrl.DeviceInfo.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
             Serialize
            </summary>
            <param name="info"><see cref="T:System.Runtime.Serialization.SerializationInfo"/></param>
            <param name="context"><see cref="T:System.Runtime.Serialization.StreamingContext"/></param>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:AndroidCtrl.DeviceInfo.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
             Deserialize
            </summary>
            <param name="info"><see cref="T:System.Runtime.Serialization.SerializationInfo"/></param>
            <param name="context"><see cref="T:System.Runtime.Serialization.StreamingContext"/></param>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:AndroidCtrl.DeviceInfo.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
             Serialize
            </summary>
            <param name="info"><see cref="T:System.Runtime.Serialization.SerializationInfo"/></param>
            <param name="context"><see cref="T:System.Runtime.Serialization.StreamingContext"/></param>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="P:AndroidCtrl.DeviceInfo.Device">
            <summary>
             (ADB) deviceid
            <para>*NOTE* Can be null</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.DeviceInfo.IP">
            <summary>
             IP-Address
            <para>*NOTE* Can be null</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.DeviceInfo.Mode">
            <summary>
             Device mode
            </summary>
        </member>
        <member name="P:AndroidCtrl.DeviceInfo.Model">
            <summary>
             (ADB) model name
            <para>*NOTE* Can be null</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.DeviceInfo.Port">
            <summary>
             Port
            <para>*NOTE* Can be null</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.DeviceInfo.Product">
            <summary>
             (ADB) product name
            <para>*NOTE* Can be null</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.DeviceInfo.Serial">
            <summary>
             (ADB/Fastboot) serialnumber
            </summary>
        </member>
        <member name="P:AndroidCtrl.DeviceInfo.State">
            <summary>
             (ADB/Fastboot) state
            </summary>
        </member>
        <member name="P:AndroidCtrl.DeviceInfo.TransportID">
            <summary>
             (ADB) transport ID
            </summary>
        </member>
        <member name="T:AndroidCtrl.BootMode">
            <summary>
             ADB/Fastboot boot modes
            </summary>
        </member>
        <member name="F:AndroidCtrl.BootMode.BOOTLOADER">
            <summary>
             reboot bootloader
            </summary>
        </member>
        <member name="F:AndroidCtrl.BootMode.DOWNLOAD">
            <summary>
             reboot download
            </summary>
        </member>
        <member name="F:AndroidCtrl.BootMode.REBOOT">
            <summary>
             reboot
            </summary>
        </member>
        <member name="F:AndroidCtrl.BootMode.RECOVERY">
            <summary>
             reboot recovery
            </summary>
        </member>
        <member name="F:AndroidCtrl.BootMode.SIDELOAD">
            <summary>
             reboot sideload
            </summary>
        </member>
        <member name="F:AndroidCtrl.BootMode.SIDELOAD_AUTO_REBOOT">
            <summary>
             reboot sideload-auto-reboot
            </summary>
        </member>
        <member name="T:AndroidCtrl.DeviceMode">
            <summary>
             Device modes
            </summary>
        </member>
        <member name="F:AndroidCtrl.DeviceMode.ADB">
            <summary>
             ADB
            </summary>
        </member>
        <member name="F:AndroidCtrl.DeviceMode.ADBSocket">
            <summary>
             ADBSocket
            </summary>
        </member>
        <member name="F:AndroidCtrl.DeviceMode.FASTBOOT">
            <summary>
             fastboot
            </summary>
        </member>
        <member name="T:AndroidCtrl.DeviceState">
            <summary>
             ADB/Fastboot state ids
            </summary>
        </member>
        <member name="F:AndroidCtrl.DeviceState.BOOTLOADER">
            <summary>
             bootloader/fastboot state
            </summary>
        </member>
        <member name="F:AndroidCtrl.DeviceState.DEVICE">
            <summary>
             device/adb state
            </summary>
        </member>
        <member name="F:AndroidCtrl.DeviceState.DOWNLOAD">
            <summary>
             download mode
            </summary>
        </member>
        <member name="F:AndroidCtrl.DeviceState.FASTBOOT">
            <summary>
             fastboot
            </summary>
        </member>
        <member name="F:AndroidCtrl.DeviceState.OFFLINE">
            <summary>
             offline
            </summary>
        </member>
        <member name="F:AndroidCtrl.DeviceState.ONLINE">
            <summary>
             online
            </summary>
        </member>
        <member name="F:AndroidCtrl.DeviceState.RECOVERY">
            <summary>
             recovery/adb state
            </summary>
        </member>
        <member name="F:AndroidCtrl.DeviceState.SIDELOAD">
            <summary>
             recovery/sideload state
            </summary>
        </member>
        <member name="F:AndroidCtrl.DeviceState.UNAUTHORIZED">
            <summary>
             unauthorized state
            </summary>
        </member>
        <member name="F:AndroidCtrl.DeviceState.UNKNOWN">
            <summary>
             unknown
            </summary>
        </member>
        <member name="T:AndroidCtrl.HashMode">
            <summary>
             Hash IDs
            </summary>
        </member>
        <member name="F:AndroidCtrl.HashMode.MD5">
            <summary>
             MD5
            </summary>
        </member>
        <member name="F:AndroidCtrl.HashMode.SHA1">
            <summary>
             SHA-1
            </summary>
        </member>
        <member name="F:AndroidCtrl.HashMode.SHA256">
            <summary>
             SHA-256
            </summary>
        </member>
        <member name="F:AndroidCtrl.HashMode.SHA384">
            <summary>
             SHA-384
            </summary>
        </member>
        <member name="F:AndroidCtrl.HashMode.SHA512">
            <summary>
             SHA-512
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.CallerMemberNameAttribute">
            <summary>
             Allows you to obtain the method or property name of the caller to the method.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.CallerFilePathAttribute">
            <summary>
             Allows you to obtain the full path of the source file that contains the caller. This is the file path at the time of compile.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.CallerLineNumberAttribute">
            <summary>
             Allows you to obtain the line number in the source file at which the method is called.
            </summary>
        </member>
    </members>
</doc>
